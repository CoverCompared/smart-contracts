{
  "address": "0x67FB9bd8C694B76CeFD95Fdc0A75f2a1b6dA58Fb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CVR",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "BuyNexusMutual",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "SetExchangeAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAsset",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coverAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sumAssured",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "coverPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "coverType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceWithFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "buyCoverByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "sumAssured",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "coverPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "coverType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceWithFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "buyCoverByToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coverAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sumAssured",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "coverPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "coverType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getProductPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf6bc3a3faccba393d463ccb53a8a2274fda098c2993e35175a3eea94e1bbc29c",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x67FB9bd8C694B76CeFD95Fdc0A75f2a1b6dA58Fb",
    "transactionIndex": 1,
    "gasUsed": "2326791",
    "logsBloom": "0x
    "blockHash": "0x452cc7d1e1acdaa17fa30975cc537d72aa59d54d06bc3980acb059831c9a3376",
    "transactionHash": "0xf6bc3a3faccba393d463ccb53a8a2274fda098c2993e35175a3eea94e1bbc29c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 28892993,
        "transactionHash": "0xf6bc3a3faccba393d463ccb53a8a2274fda098c2993e35175a3eea94e1bbc29c",
        "address": "0x67FB9bd8C694B76CeFD95Fdc0A75f2a1b6dA58Fb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x452cc7d1e1acdaa17fa30975cc537d72aa59d54d06bc3980acb059831c9a3376"
      }
    ],
    "blockNumber": 28892993,
    "cumulativeGasUsed": "2378355",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFc9B2B2565B38511B9822887F99D036d694a11e6",
    "0x33C5F22E6db919CCFFe1dDf0999cB5C4C9ae7B79",
    "0xe77250450fc9f682edeff9f0d252836189c01b53"
  ],
  "solcInputHash": "72e708df0775b21f517637d69b302982",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CVR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"BuyNexusMutual\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"SetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coverAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceWithFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buyCoverByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceWithFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buyCoverByToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coverAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getProductPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyCoverByETH(address,address,uint256,uint16,uint8,uint256,bytes)\":{\"details\":\"User will buy product directly using his ETH\"},\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"params\":{\"functionSignature\":\"Signature of the actual function to be called via meta transaction\",\"sigR\":\"R part of the signature\",\"sigS\":\"S part of the signature\",\"sigV\":\"V part of the signature\",\"userAddress\":\"Address of user trying to do meta transaction\"}},\"getProductPrice(address,address,uint256,uint16,uint8,bytes)\":{\"details\":\"return maxPriceWithFee value\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAsset(address,address,uint256)\":{\"details\":\"For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"notice\":\"Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onchain/NexusMutualCover.sol\":\"NexusMutualCover\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd260defa45bc1bbdf5e6d74298fb2705bf058c3d2beb17fb1158fa1a430c5024\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeAgent {\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _desiredAmount\\n    ) external returns (uint256);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function swapTokenWithETH(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n\\n    function swapTokenWithToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1aad6c6cae768a559b0c7ed1de81906e327e45f93a1f7a3bdc25c7323a959d0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INexusMutual.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface INexusMutual {\\n    function buyCover(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        uint8 coverType,\\n        uint256 maxPriceWithFee,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function ETH() external view returns (address);\\n\\n    function feePercentage() external view returns (uint256);\\n\\n    function gateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7d9b431c4e536af78f7cb06e98146ea7f444c9336d3559620a7be67571806d92\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INexusMutualGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\ninterface INexusMutualGateway {\\n    enum ClaimStatus {\\n        IN_PROGRESS,\\n        ACCEPTED,\\n        REJECTED\\n    }\\n    enum CoverType {\\n        SIGNED_QUOTE_CONTRACT_COVER\\n    }\\n\\n    function getCoverPrice(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        CoverType coverType,\\n        bytes calldata data\\n    ) external view returns (uint256 coverPrice);\\n}\\n\",\"keccak256\":\"0x7583c4878dccc691d42a76065844eb3557a812f29d8c3644a7c6f4ef75de0071\",\"license\":\"GPL-3.0-only\"},\"contracts/libs/BasicMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract BasicMetaTransaction {\\r\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\r\\n\\r\\n    mapping(address => uint256) private nonces;\\r\\n\\r\\n    /**\\r\\n     * Main function to be called when user wants to execute meta transaction.\\r\\n     * The actual function to be called should be passed as param with name functionSignature\\r\\n     * Here the basic signature recovery is being used. Signature is expected to be generated using\\r\\n     * personal_sign method.\\r\\n     * @param userAddress Address of user trying to do meta transaction\\r\\n     * @param functionSignature Signature of the actual function to be called via meta transaction\\r\\n     * @param sigR R part of the signature\\r\\n     * @param sigS S part of the signature\\r\\n     * @param sigV V part of the signature\\r\\n     */\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public payable returns (bytes memory) {\\r\\n        require(\\r\\n            verify(userAddress, nonces[userAddress], block.chainid, functionSignature, sigR, sigS, sigV),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n        nonces[userAddress] += 1;\\r\\n\\r\\n        // Append userAddress at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\r\\n\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function getNonce(address user) external view returns (uint256 nonce) {\\r\\n        nonce = nonces[user];\\r\\n    }\\r\\n\\r\\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\\r\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address owner,\\r\\n        uint256 nonce,\\r\\n        uint256 chainID,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 hash = prefixed(keccak256(abi.encodePacked(nonce, this, chainID, functionSignature)));\\r\\n        address signer = ecrecover(hash, sigV, sigR, sigS);\\r\\n        require(signer != address(0), \\\"Invalid signature\\\");\\r\\n        return (owner == signer);\\r\\n    }\\r\\n\\r\\n    function msgSender() internal view returns (address sender) {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\r\\n            }\\r\\n        } else {\\r\\n            return msg.sender;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x039006f9bcbc41d558b9b397bf9e0649fc2a46b2c335a8f6066cb23605e43fdf\",\"license\":\"MIT\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/onchain/BaseCoverOnChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../libs/TransferHelper.sol\\\";\\r\\nimport \\\"../libs/BasicMetaTransaction.sol\\\";\\r\\n\\r\\ncontract BaseCoverOnChain is Ownable, BasicMetaTransaction {\\r\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\r\\n    event WithdrawAsset(address _user, address _to, address _token, uint256 _amount);\\r\\n    event SetExchangeAgent(address _setter, address _exchangeAgent);\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter public productIds;\\r\\n    mapping(address => bool) public availableCurrencies;\\r\\n\\r\\n    // address public immutable WETH;\\r\\n    address public exchangeAgent;\\r\\n\\r\\n    constructor(address _CVR, address _exchangeAgent) {\\r\\n        availableCurrencies[_CVR] = true;\\r\\n        exchangeAgent = _exchangeAgent;\\r\\n    }\\r\\n\\r\\n    modifier onlyAvailableToken(address _token) {\\r\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function addCurrency(address _currency) external onlyOwner {\\r\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\r\\n        availableCurrencies[_currency] = true;\\r\\n    }\\r\\n\\r\\n    function removeCurrency(address _currency) external onlyOwner {\\r\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\r\\n        availableCurrencies[_currency] = false;\\r\\n    }\\r\\n\\r\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\r\\n        require(_exchangeAgent != address(0), \\\"ZERO Address\\\");\\r\\n        exchangeAgent = _exchangeAgent;\\r\\n        emit SetExchangeAgent(msg.sender, _exchangeAgent);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev For reflect tokens, we should deposit some tokens at contract directly,\\r\\n     * We will withdraw tokens deposited at contract through this function\\r\\n     */\\r\\n    function withdrawAsset(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        TransferHelper.safeTransfer(_token, _to, _amount);\\r\\n        WithdrawAsset(msgSender(), _to, _token, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd0aa1a4e50df71a690565303256f883f3701d06de43e66d89779f1221ca40f4\",\"license\":\"MIT\"},\"contracts/onchain/NexusMutualCover.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport {INexusMutual} from \\\"../interfaces/INexusMutual.sol\\\";\\r\\nimport {INexusMutualGateway} from \\\"../interfaces/INexusMutualGateway.sol\\\";\\r\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\r\\nimport \\\"../libs/TransferHelper.sol\\\";\\r\\nimport \\\"./BaseCoverOnChain.sol\\\";\\r\\n\\r\\ncontract NexusMutualCover is ERC721Holder, BaseCoverOnChain {\\r\\n    event BuyNexusMutual(uint256 indexed pid, address _buyToken, uint256 _tokenAmount);\\r\\n\\r\\n    address public immutable distributor;\\r\\n\\r\\n    constructor(\\r\\n        address _CVR,\\r\\n        address _exchangeAgent,\\r\\n        address _distributor\\r\\n    ) BaseCoverOnChain(_CVR, _exchangeAgent) {\\r\\n        distributor = _distributor;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev return maxPriceWithFee value\\r\\n     */\\r\\n    function getProductPrice(\\r\\n        address contractAddress,\\r\\n        address coverAsset,\\r\\n        uint256 sumAssured,\\r\\n        uint16 coverPeriod,\\r\\n        uint8 coverType,\\r\\n        bytes calldata data\\r\\n    ) public view returns (uint256) {\\r\\n        address nexusGateWay = INexusMutual(distributor).gateway();\\r\\n        uint256 coverPrice = INexusMutualGateway(nexusGateWay).getCoverPrice(\\r\\n            contractAddress,\\r\\n            coverAsset,\\r\\n            sumAssured,\\r\\n            coverPeriod,\\r\\n            INexusMutualGateway.CoverType(coverType),\\r\\n            data\\r\\n        );\\r\\n        uint256 _feePercentage = INexusMutual(distributor).feePercentage();\\r\\n        uint256 coverPriceWithFee = (_feePercentage * coverPrice) / 10000 + coverPrice;\\r\\n\\r\\n        return coverPriceWithFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev User will buy product directly using his ETH\\r\\n     */\\r\\n    function buyCoverByETH(\\r\\n        address contractAddress,\\r\\n        address coverAsset,\\r\\n        uint256 sumAssured,\\r\\n        uint16 coverPeriod,\\r\\n        uint8 coverType,\\r\\n        uint256 maxPriceWithFee,\\r\\n        bytes calldata data\\r\\n    ) external payable {\\r\\n        address _weth = INexusMutual(distributor).ETH();\\r\\n        require(coverAsset == _weth, \\\"Should pay in ETH\\\");\\r\\n        uint256 productPrice = getProductPrice(contractAddress, coverAsset, sumAssured, coverPeriod, coverType, data);\\r\\n\\r\\n        require(msg.value >= productPrice, \\\"Insufficient amount\\\");\\r\\n        if (msg.value > productPrice) {\\r\\n            TransferHelper.safeTransferETH(msgSender(), msg.value - productPrice);\\r\\n        }\\r\\n\\r\\n        uint256 productId = INexusMutual(distributor).buyCover{value: productPrice}(\\r\\n            contractAddress,\\r\\n            coverAsset,\\r\\n            sumAssured,\\r\\n            coverPeriod,\\r\\n            coverType,\\r\\n            maxPriceWithFee,\\r\\n            data\\r\\n        );\\r\\n\\r\\n        buyCover(productId);\\r\\n\\r\\n        emit BuyNexusMutual(productId, coverAsset, productPrice);\\r\\n    }\\r\\n\\r\\n    function buyCoverByToken(\\r\\n        address[] memory _assets, // _token, contractAddress, coverAsset\\r\\n        uint256 sumAssured,\\r\\n        uint16 coverPeriod,\\r\\n        uint8 coverType,\\r\\n        uint256 maxPriceWithFee,\\r\\n        bytes calldata data\\r\\n    ) external payable onlyAvailableToken(_assets[0]) {\\r\\n        require(_assets.length == 3, \\\"Assets param length should be 3\\\");\\r\\n        uint256 productPrice = getProductPrice(_assets[1], _assets[2], sumAssured, coverPeriod, coverType, data);\\r\\n\\r\\n        uint256 amount;\\r\\n        uint256 value;\\r\\n\\r\\n        if (_assets[2] == INexusMutual(distributor).ETH()) {\\r\\n            amount = IExchangeAgent(exchangeAgent).getTokenAmountForETH(_assets[0], productPrice);\\r\\n            value = productPrice;\\r\\n        } else {\\r\\n            amount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(_assets[0], _assets[2], productPrice);\\r\\n        }\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_assets[0], msgSender(), address(this), amount);\\r\\n        TransferHelper.safeApprove(_assets[0], exchangeAgent, amount);\\r\\n\\r\\n        if (_assets[2] == INexusMutual(distributor).ETH()) {\\r\\n            IExchangeAgent(exchangeAgent).swapTokenWithETH(_assets[0], amount, productPrice);\\r\\n        } else {\\r\\n            IExchangeAgent(exchangeAgent).swapTokenWithToken(_assets[0], _assets[2], amount, productPrice);\\r\\n            TransferHelper.safeApprove(_assets[2], distributor, productPrice);\\r\\n        }\\r\\n\\r\\n        uint256 productId = INexusMutual(distributor).buyCover{value: value}(\\r\\n            _assets[1],\\r\\n            _assets[2],\\r\\n            sumAssured,\\r\\n            coverPeriod,\\r\\n            coverType,\\r\\n            maxPriceWithFee,\\r\\n            data\\r\\n        );\\r\\n\\r\\n        buyCover(productId);\\r\\n        emit BuyNexusMutual(productId, _assets[0], amount);\\r\\n    }\\r\\n\\r\\n    function buyCover(uint256 productId) private {\\r\\n        IERC721(distributor).transferFrom(address(this), msgSender(), productId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xefa71ac91419e80c13962e3d368187813587e99f6fede8e3c4bafb695edfe8b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200298338038062002983833981016040819052620000349162000101565b8282600062000042620000e0565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0391821660009081526003602052604090208054600160ff19909116179055600480546001600160a01b0319169190921617905560601b6001600160601b031916608052506200014a9050565b3390565b80516001600160a01b0381168114620000fc57600080fd5b919050565b60008060006060848603121562000116578283fd5b6200012184620000e4565b92506200013160208501620000e4565b91506200014160408501620000e4565b90509250925092565b60805160601c6127db620001a86000396000818161061f0152818161073a01528181610b3601528181610e17015281816110640152818161108d0152818161121b015281816112e901528181611429015261179101526127db6000f3fe60806040526004361061010d5760003560e01c80638ab234b611610095578063bfe1092811610064578063bfe10928146102bd578063c5d3a107146102d2578063d9203b91146102f2578063f24935cb14610307578063f2fde38b1461032757610114565b80638ab234b6146102535780638b407d4f146102735780638da5cb5b14610286578063aa57511d146102a857610114565b80631af42c0f116100dc5780631af42c0f146101b15780632788943b146101de5780632d0335ab146101f15780636281133d1461021e578063715018a61461023e57610114565b8063092ae4dc146101195780630c53c51c1461013b578063150b7a021461016457806318a00d8e1461019157610114565b3661011457005b600080fd5b34801561012557600080fd5b50610139610134366004611b2f565b610347565b005b61014e610149366004611d06565b6103e3565b60405161015b9190612291565b60405180910390f35b34801561017057600080fd5b5061018461017f366004611b6f565b610539565b60405161015b9190612264565b34801561019d57600080fd5b506101396101ac366004611af0565b610549565b3480156101bd57600080fd5b506101d16101cc366004611af0565b610606565b60405161015b919061223b565b6101396101ec366004611c6b565b61061b565b3480156101fd57600080fd5b5061021161020c366004611af0565b610837565b60405161015b9190612690565b34801561022a57600080fd5b506101d1610239366004611d78565b610852565b34801561024a57600080fd5b50610139610922565b34801561025f57600080fd5b5061013961026e366004611af0565b6109ab565b610139610281366004611dfd565b610a47565b34801561029257600080fd5b5061029b611203565b60405161015b9190612062565b3480156102b457600080fd5b50610211611213565b3480156102c957600080fd5b5061029b611219565b3480156102de57600080fd5b506101396102ed366004611af0565b61123d565b3480156102fe57600080fd5b5061029b6112d5565b34801561031357600080fd5b50610211610322366004611bd9565b6112e4565b34801561033357600080fd5b50610139610342366004611af0565b6114ee565b61034f6115ae565b6001600160a01b0316610360611203565b6001600160a01b03161461038f5760405162461bcd60e51b8152600401610386906124ee565b60405180910390fd5b61039a8383836115b2565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf246103c361169f565b8385846040516103d694939291906120c5565b60405180910390a1505050565b6001600160a01b03851660009081526001602052604090205460609061040f9087904688888888610852565b61042b5760405162461bcd60e51b81526004016103869061255a565b6001600160a01b038616600090815260016020819052604082208054919290916104569084906126c3565b9091555050604051600090819030906104759089908b90602001611fb4565b60408051601f198184030181529082905261048f91611f98565b6000604051808303816000865af19150503d80600081146104cc576040519150601f19603f3d011682016040523d82523d6000602084013e6104d1565b606091505b5091509150816104f35760405162461bcd60e51b815260040161038690612321565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b88338960405161052693929190612090565b60405180910390a1979650505050505050565b630a85bd0160e11b949350505050565b6105516115ae565b6001600160a01b0316610562611203565b6001600160a01b0316146105885760405162461bcd60e51b8152600401610386906124ee565b6001600160a01b0381166105ae5760405162461bcd60e51b81526004016103869061261d565b600480546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb6906105fb9033908490612076565b60405180910390a150565b60036020526000908152604090205460ff1681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b15801561067657600080fd5b505afa15801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae9190611b13565b9050806001600160a01b0316886001600160a01b0316146106e15760405162461bcd60e51b8152600401610386906122a4565b60006106f28a8a8a8a8a89896112e4565b9050803410156107145760405162461bcd60e51b8152600401610386906125e6565b803411156107365761073661072761169f565b610731833461271a565b6116fd565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838d8d8d8d8d8d8d8d6040518a63ffffffff1660e01b815260040161079398979695949392919061217e565b6020604051808303818588803b1580156107ac57600080fd5b505af11580156107c0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107e59190611f2a565b90506107f08161178f565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48b84604051610822929190612201565b60405180910390a25050505050505050505050565b6001600160a01b031660009081526001602052604090205490565b60008061088a8830898960405160200161086f949392919061201c565b60405160208183030381529060405280519060200120611814565b90506000600182858888604051600081526020016040526040516108b19493929190612246565b6020604051602081039080840390855afa1580156108d3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109065760405162461bcd60e51b815260040161038690612480565b6001600160a01b038a8116911614915050979650505050505050565b61092a6115ae565b6001600160a01b031661093b611203565b6001600160a01b0316146109615760405162461bcd60e51b8152600401610386906124ee565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6109b36115ae565b6001600160a01b03166109c4611203565b6001600160a01b0316146109ea5760405162461bcd60e51b8152600401610386906124ee565b6001600160a01b03811660009081526003602052604090205460ff1615610a235760405162461bcd60e51b8152600401610386906124b7565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b86600081518110610a6857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0381166000908152600390925260409091205460ff16610aad5760405162461bcd60e51b815260040161038690612358565b8751600314610ace5760405162461bcd60e51b81526004016103869061238f565b6000610b2f89600181518110610af457634e487b7160e01b600052603260045260246000fd5b60200260200101518a600281518110610b1d57634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a89896112e4565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8d57600080fd5b505afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611b13565b6001600160a01b03168b600281518110610bef57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610cbe576004548b516001600160a01b039091169063ba560ed9908d90600090610c3c57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518363ffffffff1660e01b8152600401610c62929190612201565b602060405180830381600087803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb49190611f2a565b9150829050610d99565b6004548b516001600160a01b03909116906334899be6908d90600090610cf457634e487b7160e01b600052603260045260246000fd5b60200260200101518d600281518110610d1d57634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518463ffffffff1660e01b8152600401610d44939291906120ef565b602060405180830381600087803b158015610d5e57600080fd5b505af1158015610d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d969190611f2a565b91505b610dd48b600081518110610dbd57634e487b7160e01b600052603260045260246000fd5b6020026020010151610dcd61169f565b3085611845565b610e158b600081518110610df857634e487b7160e01b600052603260045260246000fd5b60209081029190910101516004546001600160a01b031684611935565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190611b13565b6001600160a01b03168b600281518110610ed057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610f7c576004548b516001600160a01b0390911690630de43334908d90600090610f1d57634e487b7160e01b600052603260045260246000fd5b602002602001015184866040518463ffffffff1660e01b8152600401610f459392919061221a565b600060405180830381600087803b158015610f5f57600080fd5b505af1158015610f73573d6000803e3d6000fd5b50505050611089565b6004548b516001600160a01b03909116906380dcc456908d90600090610fb257634e487b7160e01b600052603260045260246000fd5b60200260200101518d600281518110610fdb57634e487b7160e01b600052603260045260246000fd5b602002602001015185876040518563ffffffff1660e01b815260040161100494939291906121d8565b600060405180830381600087803b15801561101e57600080fd5b505af1158015611032573d6000803e3d6000fd5b505050506110898b60028151811061105a57634e487b7160e01b600052603260045260246000fd5b60200260200101517f000000000000000000000000000000000000000000000000000000000000000085611935565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838e6001815181106110dc57634e487b7160e01b600052603260045260246000fd5b60200260200101518f60028151811061110557634e487b7160e01b600052603260045260246000fd5b60200260200101518f8f8f8f8f8f6040518a63ffffffff1660e01b815260040161113698979695949392919061217e565b6020604051808303818588803b15801561114f57600080fd5b505af1158015611163573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111889190611f2a565b90506111938161178f565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48d6000815181106111d657634e487b7160e01b600052603260045260246000fd5b6020026020010151856040516111ed929190612201565b60405180910390a2505050505050505050505050565b6000546001600160a01b03165b90565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6112456115ae565b6001600160a01b0316611256611203565b6001600160a01b03161461127c5760405162461bcd60e51b8152600401610386906124ee565b6001600160a01b03811660009081526003602052604090205460ff166112b45760405162461bcd60e51b815260040161038690612523565b6001600160a01b03166000908152600360205260409020805460ff19169055565b6004546001600160a01b031681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663116191b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113789190611b13565b905060006001600160a01b038216635caca7b48b8b8b8b60ff8c1680156113af57634e487b7160e01b600052602160045260246000fd5b8b8b6040518863ffffffff1660e01b81526004016113d39796959493929190612113565b60206040518083038186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114239190611f2a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a001ecdd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b89190611f2a565b90506000826127106114ca82856126fb565b6114d491906126db565b6114de91906126c3565b9c9b505050505050505050505050565b6114f66115ae565b6001600160a01b0316611507611203565b6001600160a01b03161461152d5760405162461bcd60e51b8152600401610386906124ee565b6001600160a01b0381166115535760405162461bcd60e51b8152600401610386906122db565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600080846001600160a01b031663a9059cbb85856040516024016115d7929190612201565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516116109190611f98565b6000604051808303816000865af19150503d806000811461164d576040519150601f19603f3d011682016040523d82523d6000602084013e611652565b606091505b509150915081801561167c57508051158061167c57508080602001905181019061167c9190611f0a565b6116985760405162461bcd60e51b815260040161038690612643565b5050505050565b6000333014156116f657600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506112109050565b5033611210565b604080516000808252602082019092526001600160a01b0384169083906040516117279190611f98565b60006040518083038185875af1925050503d8060008114611764576040519150601f19603f3d011682016040523d82523d6000602084013e611769565b606091505b505090508061178a5760405162461bcd60e51b815260040161038690612423565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd306117c761169f565b846040518463ffffffff1660e01b81526004016117e6939291906120ef565b600060405180830381600087803b15801561180057600080fd5b505af1158015611698573d6000803e3d6000fd5b6000816040516020016118279190611feb565b6040516020818303038152906040528051906020012090505b919050565b600080856001600160a01b03166323b872dd86868660405160240161186c939291906120ef565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516118a59190611f98565b6000604051808303816000865af19150503d80600081146118e2576040519150601f19603f3d011682016040523d82523d6000602084013e6118e7565b606091505b50915091508180156119115750805115806119115750808060200190518101906119119190611f0a565b61192d5760405162461bcd60e51b8152600401610386906123c6565b505050505050565b600080846001600160a01b031663095ea7b3858560405160240161195a929190612201565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516119939190611f98565b6000604051808303816000865af19150503d80600081146119d0576040519150601f19603f3d011682016040523d82523d6000602084013e6119d5565b606091505b50915091508180156119ff5750805115806119ff5750808060200190518101906119ff9190611f0a565b6116985760405162461bcd60e51b81526004016103869061259b565b60008083601f840112611a2c578182fd5b50813567ffffffffffffffff811115611a43578182fd5b602083019150836020828501011115611a5b57600080fd5b9250929050565b600082601f830112611a72578081fd5b813567ffffffffffffffff811115611a8c57611a8c612777565b611a9f601f8201601f1916602001612699565b818152846020838601011115611ab3578283fd5b816020850160208301379081016020019190915292915050565b803561ffff8116811461184057600080fd5b803560ff8116811461184057600080fd5b600060208284031215611b01578081fd5b8135611b0c8161278d565b9392505050565b600060208284031215611b24578081fd5b8151611b0c8161278d565b600080600060608486031215611b43578182fd5b8335611b4e8161278d565b92506020840135611b5e8161278d565b929592945050506040919091013590565b60008060008060808587031215611b84578081fd5b8435611b8f8161278d565b93506020850135611b9f8161278d565b925060408501359150606085013567ffffffffffffffff811115611bc1578182fd5b611bcd87828801611a62565b91505092959194509250565b600080600080600080600060c0888a031215611bf3578283fd5b8735611bfe8161278d565b96506020880135611c0e8161278d565b955060408801359450611c2360608901611acd565b9350611c3160808901611adf565b925060a088013567ffffffffffffffff811115611c4c578283fd5b611c588a828b01611a1b565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b031215611c86578081fd5b8835611c918161278d565b97506020890135611ca18161278d565b965060408901359550611cb660608a01611acd565b9450611cc460808a01611adf565b935060a0890135925060c089013567ffffffffffffffff811115611ce6578182fd5b611cf28b828c01611a1b565b999c989b5096995094979396929594505050565b600080600080600060a08688031215611d1d578081fd5b8535611d288161278d565b9450602086013567ffffffffffffffff811115611d43578182fd5b611d4f88828901611a62565b9450506040860135925060608601359150611d6c60808701611adf565b90509295509295909350565b600080600080600080600060e0888a031215611d92578081fd5b8735611d9d8161278d565b96506020880135955060408801359450606088013567ffffffffffffffff811115611dc6578182fd5b611dd28a828b01611a62565b9450506080880135925060a08801359150611def60c08901611adf565b905092959891949750929550565b600080600080600080600060c0888a031215611e17578081fd5b67ffffffffffffffff8089351115611e2d578182fd5b883589018a601f820112611e3f578283fd5b8035602083821115611e5357611e53612777565b611e608182840201612699565b8083825282820191508285018f848587028801011115611e7e578788fd5b8795505b84861015611eaa57611e94813561278d565b8035835260019590950194918301918301611e82565b509b50508b01359850611ec291505060408a01611acd565b9550611ed060608a01611adf565b94506080890135935060a089013581811115611eea578283fd5b611ef68b828c01611a1b565b999c989b5096995094979396939450505050565b600060208284031215611f1b578081fd5b81518015158114611b0c578182fd5b600060208284031215611f3b578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452611f84816020860160208601612731565b601f01601f19169290920160200192915050565b60008251611faa818460208701612731565b9190910192915050565b60008351611fc6818460208801612731565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60008582526bffffffffffffffffffffffff198560601b1660208301528360348301528251612052816054850160208701612731565b9190910160540195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b038086168352808516602084015250606060408301526120bc6060830184611f6c565b95945050505050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038881168252871660208201526040810186905261ffff8516606082015260006001851061215657634e487b7160e01b81526021600452602481fd5b84608083015260c060a083015261217160c083018486611f42565b9998505050505050505050565b60006001600160a01b03808b168352808a1660208401525087604083015261ffff8716606083015260ff861660808301528460a083015260e060c08301526121ca60e083018486611f42565b9a9950505050505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b600060208252611b0c6020830184611f6c565b60208082526011908201527f53686f756c642070617920696e20455448000000000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b6020808252601f908201527f41737365747320706172616d206c656e6774682073686f756c64206265203300604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f496e76616c6964207369676e6174757265000000000000000000000000000000604082015260600190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff811182821017156126bb576126bb612777565b604052919050565b600082198211156126d6576126d6612761565b500190565b6000826126f657634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561271557612715612761565b500290565b60008282101561272c5761272c612761565b500390565b60005b8381101561274c578181015183820152602001612734565b8381111561275b576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146127a257600080fd5b5056fea2646970667358221220db149fc226aadaecbc8a84b9f41fcf2772435b27cbdc59f4c1b2fc346eab04ea64736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061010d5760003560e01c80638ab234b611610095578063bfe1092811610064578063bfe10928146102bd578063c5d3a107146102d2578063d9203b91146102f2578063f24935cb14610307578063f2fde38b1461032757610114565b80638ab234b6146102535780638b407d4f146102735780638da5cb5b14610286578063aa57511d146102a857610114565b80631af42c0f116100dc5780631af42c0f146101b15780632788943b146101de5780632d0335ab146101f15780636281133d1461021e578063715018a61461023e57610114565b8063092ae4dc146101195780630c53c51c1461013b578063150b7a021461016457806318a00d8e1461019157610114565b3661011457005b600080fd5b34801561012557600080fd5b50610139610134366004611b2f565b610347565b005b61014e610149366004611d06565b6103e3565b60405161015b9190612291565b60405180910390f35b34801561017057600080fd5b5061018461017f366004611b6f565b610539565b60405161015b9190612264565b34801561019d57600080fd5b506101396101ac366004611af0565b610549565b3480156101bd57600080fd5b506101d16101cc366004611af0565b610606565b60405161015b919061223b565b6101396101ec366004611c6b565b61061b565b3480156101fd57600080fd5b5061021161020c366004611af0565b610837565b60405161015b9190612690565b34801561022a57600080fd5b506101d1610239366004611d78565b610852565b34801561024a57600080fd5b50610139610922565b34801561025f57600080fd5b5061013961026e366004611af0565b6109ab565b610139610281366004611dfd565b610a47565b34801561029257600080fd5b5061029b611203565b60405161015b9190612062565b3480156102b457600080fd5b50610211611213565b3480156102c957600080fd5b5061029b611219565b3480156102de57600080fd5b506101396102ed366004611af0565b61123d565b3480156102fe57600080fd5b5061029b6112d5565b34801561031357600080fd5b50610211610322366004611bd9565b6112e4565b34801561033357600080fd5b50610139610342366004611af0565b6114ee565b61034f6115ae565b6001600160a01b0316610360611203565b6001600160a01b03161461038f5760405162461bcd60e51b8152600401610386906124ee565b60405180910390fd5b61039a8383836115b2565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf246103c361169f565b8385846040516103d694939291906120c5565b60405180910390a1505050565b6001600160a01b03851660009081526001602052604090205460609061040f9087904688888888610852565b61042b5760405162461bcd60e51b81526004016103869061255a565b6001600160a01b038616600090815260016020819052604082208054919290916104569084906126c3565b9091555050604051600090819030906104759089908b90602001611fb4565b60408051601f198184030181529082905261048f91611f98565b6000604051808303816000865af19150503d80600081146104cc576040519150601f19603f3d011682016040523d82523d6000602084013e6104d1565b606091505b5091509150816104f35760405162461bcd60e51b815260040161038690612321565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b88338960405161052693929190612090565b60405180910390a1979650505050505050565b630a85bd0160e11b949350505050565b6105516115ae565b6001600160a01b0316610562611203565b6001600160a01b0316146105885760405162461bcd60e51b8152600401610386906124ee565b6001600160a01b0381166105ae5760405162461bcd60e51b81526004016103869061261d565b600480546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb6906105fb9033908490612076565b60405180910390a150565b60036020526000908152604090205460ff1681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b15801561067657600080fd5b505afa15801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae9190611b13565b9050806001600160a01b0316886001600160a01b0316146106e15760405162461bcd60e51b8152600401610386906122a4565b60006106f28a8a8a8a8a89896112e4565b9050803410156107145760405162461bcd60e51b8152600401610386906125e6565b803411156107365761073661072761169f565b610731833461271a565b6116fd565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838d8d8d8d8d8d8d8d6040518a63ffffffff1660e01b815260040161079398979695949392919061217e565b6020604051808303818588803b1580156107ac57600080fd5b505af11580156107c0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107e59190611f2a565b90506107f08161178f565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48b84604051610822929190612201565b60405180910390a25050505050505050505050565b6001600160a01b031660009081526001602052604090205490565b60008061088a8830898960405160200161086f949392919061201c565b60405160208183030381529060405280519060200120611814565b90506000600182858888604051600081526020016040526040516108b19493929190612246565b6020604051602081039080840390855afa1580156108d3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109065760405162461bcd60e51b815260040161038690612480565b6001600160a01b038a8116911614915050979650505050505050565b61092a6115ae565b6001600160a01b031661093b611203565b6001600160a01b0316146109615760405162461bcd60e51b8152600401610386906124ee565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6109b36115ae565b6001600160a01b03166109c4611203565b6001600160a01b0316146109ea5760405162461bcd60e51b8152600401610386906124ee565b6001600160a01b03811660009081526003602052604090205460ff1615610a235760405162461bcd60e51b8152600401610386906124b7565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b86600081518110610a6857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0381166000908152600390925260409091205460ff16610aad5760405162461bcd60e51b815260040161038690612358565b8751600314610ace5760405162461bcd60e51b81526004016103869061238f565b6000610b2f89600181518110610af457634e487b7160e01b600052603260045260246000fd5b60200260200101518a600281518110610b1d57634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a89896112e4565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8d57600080fd5b505afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611b13565b6001600160a01b03168b600281518110610bef57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610cbe576004548b516001600160a01b039091169063ba560ed9908d90600090610c3c57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518363ffffffff1660e01b8152600401610c62929190612201565b602060405180830381600087803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb49190611f2a565b9150829050610d99565b6004548b516001600160a01b03909116906334899be6908d90600090610cf457634e487b7160e01b600052603260045260246000fd5b60200260200101518d600281518110610d1d57634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518463ffffffff1660e01b8152600401610d44939291906120ef565b602060405180830381600087803b158015610d5e57600080fd5b505af1158015610d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d969190611f2a565b91505b610dd48b600081518110610dbd57634e487b7160e01b600052603260045260246000fd5b6020026020010151610dcd61169f565b3085611845565b610e158b600081518110610df857634e487b7160e01b600052603260045260246000fd5b60209081029190910101516004546001600160a01b031684611935565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190611b13565b6001600160a01b03168b600281518110610ed057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610f7c576004548b516001600160a01b0390911690630de43334908d90600090610f1d57634e487b7160e01b600052603260045260246000fd5b602002602001015184866040518463ffffffff1660e01b8152600401610f459392919061221a565b600060405180830381600087803b158015610f5f57600080fd5b505af1158015610f73573d6000803e3d6000fd5b50505050611089565b6004548b516001600160a01b03909116906380dcc456908d90600090610fb257634e487b7160e01b600052603260045260246000fd5b60200260200101518d600281518110610fdb57634e487b7160e01b600052603260045260246000fd5b602002602001015185876040518563ffffffff1660e01b815260040161100494939291906121d8565b600060405180830381600087803b15801561101e57600080fd5b505af1158015611032573d6000803e3d6000fd5b505050506110898b60028151811061105a57634e487b7160e01b600052603260045260246000fd5b60200260200101517f000000000000000000000000000000000000000000000000000000000000000085611935565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838e6001815181106110dc57634e487b7160e01b600052603260045260246000fd5b60200260200101518f60028151811061110557634e487b7160e01b600052603260045260246000fd5b60200260200101518f8f8f8f8f8f6040518a63ffffffff1660e01b815260040161113698979695949392919061217e565b6020604051808303818588803b15801561114f57600080fd5b505af1158015611163573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111889190611f2a565b90506111938161178f565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48d6000815181106111d657634e487b7160e01b600052603260045260246000fd5b6020026020010151856040516111ed929190612201565b60405180910390a2505050505050505050505050565b6000546001600160a01b03165b90565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6112456115ae565b6001600160a01b0316611256611203565b6001600160a01b03161461127c5760405162461bcd60e51b8152600401610386906124ee565b6001600160a01b03811660009081526003602052604090205460ff166112b45760405162461bcd60e51b815260040161038690612523565b6001600160a01b03166000908152600360205260409020805460ff19169055565b6004546001600160a01b031681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663116191b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113789190611b13565b905060006001600160a01b038216635caca7b48b8b8b8b60ff8c1680156113af57634e487b7160e01b600052602160045260246000fd5b8b8b6040518863ffffffff1660e01b81526004016113d39796959493929190612113565b60206040518083038186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114239190611f2a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a001ecdd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b89190611f2a565b90506000826127106114ca82856126fb565b6114d491906126db565b6114de91906126c3565b9c9b505050505050505050505050565b6114f66115ae565b6001600160a01b0316611507611203565b6001600160a01b03161461152d5760405162461bcd60e51b8152600401610386906124ee565b6001600160a01b0381166115535760405162461bcd60e51b8152600401610386906122db565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600080846001600160a01b031663a9059cbb85856040516024016115d7929190612201565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516116109190611f98565b6000604051808303816000865af19150503d806000811461164d576040519150601f19603f3d011682016040523d82523d6000602084013e611652565b606091505b509150915081801561167c57508051158061167c57508080602001905181019061167c9190611f0a565b6116985760405162461bcd60e51b815260040161038690612643565b5050505050565b6000333014156116f657600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506112109050565b5033611210565b604080516000808252602082019092526001600160a01b0384169083906040516117279190611f98565b60006040518083038185875af1925050503d8060008114611764576040519150601f19603f3d011682016040523d82523d6000602084013e611769565b606091505b505090508061178a5760405162461bcd60e51b815260040161038690612423565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd306117c761169f565b846040518463ffffffff1660e01b81526004016117e6939291906120ef565b600060405180830381600087803b15801561180057600080fd5b505af1158015611698573d6000803e3d6000fd5b6000816040516020016118279190611feb565b6040516020818303038152906040528051906020012090505b919050565b600080856001600160a01b03166323b872dd86868660405160240161186c939291906120ef565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516118a59190611f98565b6000604051808303816000865af19150503d80600081146118e2576040519150601f19603f3d011682016040523d82523d6000602084013e6118e7565b606091505b50915091508180156119115750805115806119115750808060200190518101906119119190611f0a565b61192d5760405162461bcd60e51b8152600401610386906123c6565b505050505050565b600080846001600160a01b031663095ea7b3858560405160240161195a929190612201565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516119939190611f98565b6000604051808303816000865af19150503d80600081146119d0576040519150601f19603f3d011682016040523d82523d6000602084013e6119d5565b606091505b50915091508180156119ff5750805115806119ff5750808060200190518101906119ff9190611f0a565b6116985760405162461bcd60e51b81526004016103869061259b565b60008083601f840112611a2c578182fd5b50813567ffffffffffffffff811115611a43578182fd5b602083019150836020828501011115611a5b57600080fd5b9250929050565b600082601f830112611a72578081fd5b813567ffffffffffffffff811115611a8c57611a8c612777565b611a9f601f8201601f1916602001612699565b818152846020838601011115611ab3578283fd5b816020850160208301379081016020019190915292915050565b803561ffff8116811461184057600080fd5b803560ff8116811461184057600080fd5b600060208284031215611b01578081fd5b8135611b0c8161278d565b9392505050565b600060208284031215611b24578081fd5b8151611b0c8161278d565b600080600060608486031215611b43578182fd5b8335611b4e8161278d565b92506020840135611b5e8161278d565b929592945050506040919091013590565b60008060008060808587031215611b84578081fd5b8435611b8f8161278d565b93506020850135611b9f8161278d565b925060408501359150606085013567ffffffffffffffff811115611bc1578182fd5b611bcd87828801611a62565b91505092959194509250565b600080600080600080600060c0888a031215611bf3578283fd5b8735611bfe8161278d565b96506020880135611c0e8161278d565b955060408801359450611c2360608901611acd565b9350611c3160808901611adf565b925060a088013567ffffffffffffffff811115611c4c578283fd5b611c588a828b01611a1b565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b031215611c86578081fd5b8835611c918161278d565b97506020890135611ca18161278d565b965060408901359550611cb660608a01611acd565b9450611cc460808a01611adf565b935060a0890135925060c089013567ffffffffffffffff811115611ce6578182fd5b611cf28b828c01611a1b565b999c989b5096995094979396929594505050565b600080600080600060a08688031215611d1d578081fd5b8535611d288161278d565b9450602086013567ffffffffffffffff811115611d43578182fd5b611d4f88828901611a62565b9450506040860135925060608601359150611d6c60808701611adf565b90509295509295909350565b600080600080600080600060e0888a031215611d92578081fd5b8735611d9d8161278d565b96506020880135955060408801359450606088013567ffffffffffffffff811115611dc6578182fd5b611dd28a828b01611a62565b9450506080880135925060a08801359150611def60c08901611adf565b905092959891949750929550565b600080600080600080600060c0888a031215611e17578081fd5b67ffffffffffffffff8089351115611e2d578182fd5b883589018a601f820112611e3f578283fd5b8035602083821115611e5357611e53612777565b611e608182840201612699565b8083825282820191508285018f848587028801011115611e7e578788fd5b8795505b84861015611eaa57611e94813561278d565b8035835260019590950194918301918301611e82565b509b50508b01359850611ec291505060408a01611acd565b9550611ed060608a01611adf565b94506080890135935060a089013581811115611eea578283fd5b611ef68b828c01611a1b565b999c989b5096995094979396939450505050565b600060208284031215611f1b578081fd5b81518015158114611b0c578182fd5b600060208284031215611f3b578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452611f84816020860160208601612731565b601f01601f19169290920160200192915050565b60008251611faa818460208701612731565b9190910192915050565b60008351611fc6818460208801612731565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60008582526bffffffffffffffffffffffff198560601b1660208301528360348301528251612052816054850160208701612731565b9190910160540195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b038086168352808516602084015250606060408301526120bc6060830184611f6c565b95945050505050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038881168252871660208201526040810186905261ffff8516606082015260006001851061215657634e487b7160e01b81526021600452602481fd5b84608083015260c060a083015261217160c083018486611f42565b9998505050505050505050565b60006001600160a01b03808b168352808a1660208401525087604083015261ffff8716606083015260ff861660808301528460a083015260e060c08301526121ca60e083018486611f42565b9a9950505050505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b600060208252611b0c6020830184611f6c565b60208082526011908201527f53686f756c642070617920696e20455448000000000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b6020808252601f908201527f41737365747320706172616d206c656e6774682073686f756c64206265203300604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f496e76616c6964207369676e6174757265000000000000000000000000000000604082015260600190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff811182821017156126bb576126bb612777565b604052919050565b600082198211156126d6576126d6612761565b500190565b6000826126f657634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561271557612715612761565b500290565b60008282101561272c5761272c612761565b500390565b60005b8381101561274c578181015183820152602001612734565b8381111561275b576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146127a257600080fd5b5056fea2646970667358221220db149fc226aadaecbc8a84b9f41fcf2772435b27cbdc59f4c1b2fc346eab04ea64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyCoverByETH(address,address,uint256,uint16,uint8,uint256,bytes)": {
        "details": "User will buy product directly using his ETH"
      },
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "params": {
          "functionSignature": "Signature of the actual function to be called via meta transaction",
          "sigR": "R part of the signature",
          "sigS": "S part of the signature",
          "sigV": "V part of the signature",
          "userAddress": "Address of user trying to do meta transaction"
        }
      },
      "getProductPrice(address,address,uint256,uint16,uint8,bytes)": {
        "details": "return maxPriceWithFee value"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAsset(address,address,uint256)": {
        "details": "For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "notice": "Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "contracts/onchain/NexusMutualCover.sol:NexusMutualCover",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2543,
        "contract": "contracts/onchain/NexusMutualCover.sol:NexusMutualCover",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4535,
        "contract": "contracts/onchain/NexusMutualCover.sol:NexusMutualCover",
        "label": "productIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1476_storage"
      },
      {
        "astId": 4539,
        "contract": "contracts/onchain/NexusMutualCover.sol:NexusMutualCover",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4541,
        "contract": "contracts/onchain/NexusMutualCover.sol:NexusMutualCover",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)1476_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1475,
            "contract": "contracts/onchain/NexusMutualCover.sol:NexusMutualCover",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}