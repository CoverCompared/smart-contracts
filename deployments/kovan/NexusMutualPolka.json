{
  "address": "0xeBEaC21F25ec01570c52420806124c6Abe54f220",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CVR",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "BuyNexusMutual",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAsset",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coverAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sumAssured",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "coverPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "coverType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceWithFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "buyCoverByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "sumAssured",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "coverPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "coverType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceWithFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "buyCoverByToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coverAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sumAssured",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "coverPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "coverType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getProductPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0b514f7edaa1fd9eb96269eb46dd0c84107178f90671983ad21d6b44af633c37",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0xeBEaC21F25ec01570c52420806124c6Abe54f220",
    "transactionIndex": 2,
    "gasUsed": "1895219",
    "logsBloom": "0x
    "blockHash": "0xe22e0448082ddf0d2c9a3d106546cd7af2a63b62859584792dd9c231e30c654f",
    "transactionHash": "0x0b514f7edaa1fd9eb96269eb46dd0c84107178f90671983ad21d6b44af633c37",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 28622544,
        "transactionHash": "0x0b514f7edaa1fd9eb96269eb46dd0c84107178f90671983ad21d6b44af633c37",
        "address": "0xeBEaC21F25ec01570c52420806124c6Abe54f220",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005569bdf4e02cec3fe459796e3d0e741616029fa4"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xe22e0448082ddf0d2c9a3d106546cd7af2a63b62859584792dd9c231e30c654f"
      }
    ],
    "blockNumber": 28622544,
    "cumulativeGasUsed": "2256311",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFc9B2B2565B38511B9822887F99D036d694a11e6",
    "0x278d3387C18F6ca33c2f8a46CA1833C4BdC24c74",
    "0xe77250450fc9f682edeff9f0d252836189c01b53"
  ],
  "solcInputHash": "e121b956ef2c863635cbc7b7bf41db2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CVR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"BuyNexusMutual\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coverAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceWithFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buyCoverByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceWithFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buyCoverByToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coverAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getProductPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyCoverByETH(address,address,uint256,uint16,uint8,uint256,bytes)\":{\"details\":\"User will buy product directly using his ETH\"},\"getProductPrice(address,address,uint256,uint16,uint8,bytes)\":{\"details\":\"return maxPriceWithFee value\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAsset(address,address,uint256)\":{\"details\":\"For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distributor()\":{\"notice\":\"TODO if it is immutable?  \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onchain/NexusMutualPolka.sol\":\"NexusMutualPolka\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x483b106386dd309f168672928252a19f30c30efb4d17d4b8e2b0f587ca784a11\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x56aa86fb8deb7ab08fe01ec07c80ef4d9da52d401150ceba523dab9efdd54fb4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x74f630d2664c1581a1cbd0730d4ba119b3a184ef90c65f3a934be4d16d0e58a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeAgent {\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _desiredAmount\\n    ) external returns (uint256);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function swapTokenWithETH(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n\\n    function swapTokenWithToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1aad6c6cae768a559b0c7ed1de81906e327e45f93a1f7a3bdc25c7323a959d0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INexusMutual.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface INexusMutual {\\n    function buyCover(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        uint8 coverType,\\n        uint256 maxPriceWithFee,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function ETH() external view returns (address);\\n\\n    function feePercentage() external view returns (uint256);\\n\\n    function gateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7d9b431c4e536af78f7cb06e98146ea7f444c9336d3559620a7be67571806d92\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INexusMutualGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\ninterface INexusMutualGateway {\\n    enum ClaimStatus {\\n        IN_PROGRESS,\\n        ACCEPTED,\\n        REJECTED\\n    }\\n    enum CoverType {\\n        SIGNED_QUOTE_CONTRACT_COVER\\n    }\\n\\n    function getCoverPrice(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        CoverType coverType,\\n        bytes calldata data\\n    ) external view returns (uint256 coverPrice);\\n}\\n\",\"keccak256\":\"0x7583c4878dccc691d42a76065844eb3557a812f29d8c3644a7c6f4ef75de0071\",\"license\":\"GPL-3.0-only\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/onchain/BasePolkaOnChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libs/TransferHelper.sol\\\";\\n\\ncontract BasePolkaOnChain is Ownable {\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\n    event WithdrawAsset(address _user, address _to, address _token, uint256 _amount);\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter public productIds;\\n    mapping(address => bool) public availableCurrencies;\\n\\n    // address public immutable WETH;\\n    // TODO should it be public?\\n    address public exchangeAgent;\\n\\n    constructor(address _CVR, address _exchangeAgent) {\\n        availableCurrencies[_CVR] = true;\\n        exchangeAgent = _exchangeAgent;\\n    }\\n\\n    modifier onlyAvailableToken(address _token) {\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function addCurrency(address _currency) external onlyOwner {\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\n        availableCurrencies[_currency] = true;\\n    }\\n\\n    function removeCurrency(address _currency) external onlyOwner {\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\n        availableCurrencies[_currency] = false;\\n    }\\n\\n    /**\\n     * @dev For reflect tokens, we should deposit some tokens at contract directly,\\n     * We will withdraw tokens deposited at contract through this function\\n     */\\n    function withdrawAsset(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, _to, _amount);\\n        WithdrawAsset(msg.sender, _to, _token, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x611a7ec4c27da33e90237d4862284ecc1f2cdf3e2a2e5d3fbc293fd5c9e2d946\",\"license\":\"MIT\"},\"contracts/onchain/NexusMutualPolka.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {INexusMutual} from \\\"../interfaces/INexusMutual.sol\\\";\\nimport {INexusMutualGateway} from \\\"../interfaces/INexusMutualGateway.sol\\\";\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\nimport \\\"../libs/TransferHelper.sol\\\";\\nimport \\\"./BasePolkaOnChain.sol\\\";\\n\\ncontract NexusMutualPolka is ERC721Holder, BasePolkaOnChain {\\n    // event BuyNexusMutual(address indexed distributor, uint256 indexed pid, address converAsset, uint price, address _buyToken, uint _tokenAmount);\\n    event BuyNexusMutual(uint256 indexed pid, address _buyToken, uint256 _tokenAmount);\\n\\n    /** TODO if it is immutable?  */\\n    address public immutable distributor;\\n\\n    constructor(\\n        address _CVR,\\n        address _exchangeAgent,\\n        address _distributor\\n    ) BasePolkaOnChain(_CVR, _exchangeAgent) {\\n        distributor = _distributor;\\n    }\\n\\n    /**\\n     * @dev return maxPriceWithFee value\\n     */\\n    function getProductPrice(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        uint8 coverType,\\n        bytes calldata data\\n    ) public view returns (uint256) {\\n        address nexusGateWay = INexusMutual(distributor).gateway();\\n        uint256 coverPrice = INexusMutualGateway(nexusGateWay).getCoverPrice(\\n            contractAddress,\\n            coverAsset,\\n            sumAssured,\\n            coverPeriod,\\n            INexusMutualGateway.CoverType(coverType),\\n            data\\n        );\\n        uint256 _feePercentage = INexusMutual(distributor).feePercentage();\\n        uint256 coverPriceWithFee = (_feePercentage * coverPrice) / 10000 + coverPrice;\\n\\n        return coverPriceWithFee;\\n    }\\n\\n    /**\\n     * @dev User will buy product directly using his ETH\\n     */\\n    function buyCoverByETH(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        uint8 coverType,\\n        uint256 maxPriceWithFee,\\n        bytes calldata data\\n    ) external payable {\\n        address _weth = INexusMutual(distributor).ETH();\\n        require(coverAsset == _weth, \\\"Should pay in ETH\\\");\\n        uint256 productPrice = getProductPrice(contractAddress, coverAsset, sumAssured, coverPeriod, coverType, data);\\n\\n        require(msg.value >= productPrice, \\\"Insufficient amount\\\");\\n        if (msg.value > productPrice) {\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - productPrice);\\n        }\\n\\n        uint256 productId = INexusMutual(distributor).buyCover{value: productPrice}(\\n            contractAddress,\\n            coverAsset,\\n            sumAssured,\\n            coverPeriod,\\n            coverType,\\n            maxPriceWithFee,\\n            data\\n        );\\n\\n        buyCover(productId);\\n\\n        emit BuyNexusMutual(productId, coverAsset, productPrice);\\n    }\\n\\n    function buyCoverByToken(\\n        address[] memory _assets, // _token, contractAddress, coverAsset\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        uint8 coverType,\\n        uint256 maxPriceWithFee,\\n        bytes calldata data\\n    ) external payable onlyAvailableToken(_assets[0]) {\\n        require(_assets.length == 3, \\\"Assets param length should be 3\\\");\\n        uint256 productPrice = getProductPrice(_assets[1], _assets[2], sumAssured, coverPeriod, coverType, data);\\n\\n        uint256 amount;\\n        uint256 value;\\n\\n        if (_assets[2] == INexusMutual(distributor).ETH()) {\\n            amount = IExchangeAgent(exchangeAgent).getTokenAmountForETH(_assets[0], productPrice);\\n            value = productPrice;\\n        } else {\\n            amount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(_assets[0], _assets[2], productPrice);\\n        }\\n\\n        TransferHelper.safeTransferFrom(_assets[0], msg.sender, address(this), amount);\\n        TransferHelper.safeApprove(_assets[0], exchangeAgent, amount);\\n\\n        if (_assets[2] == INexusMutual(distributor).ETH()) {\\n            IExchangeAgent(exchangeAgent).swapTokenWithETH(_assets[0], amount, productPrice);\\n        } else {\\n            IExchangeAgent(exchangeAgent).swapTokenWithToken(_assets[0], _assets[2], amount, productPrice);\\n            TransferHelper.safeApprove(_assets[2], distributor, productPrice);\\n        }\\n\\n        uint256 productId = INexusMutual(distributor).buyCover{value: value}(\\n            _assets[1],\\n            _assets[2],\\n            sumAssured,\\n            coverPeriod,\\n            coverType,\\n            maxPriceWithFee,\\n            data\\n        );\\n\\n        buyCover(productId);\\n        emit BuyNexusMutual(productId, _assets[0], amount);\\n    }\\n\\n    function buyCover(uint256 productId) private {\\n        IERC721(distributor).transferFrom(address(this), msg.sender, productId);\\n    }\\n}\\n\",\"keccak256\":\"0x9550d031aff31ebfbf5e00065fe6f2edd66bc70bb2162ba2b5c2d91ece045fad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620021c1380380620021c183398101604081905262000034916200010f565b82826200004a620000446200009e565b620000a2565b6001600160a01b0391821660009081526002602052604090208054600160ff19909116179055600380546001600160a01b0319169190921617905560601b6001600160601b03191660805250620001589050565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010a57600080fd5b919050565b60008060006060848603121562000124578283fd5b6200012f84620000f2565b92506200013f60208501620000f2565b91506200014f60408501620000f2565b90509250925092565b60805160601c61200b620001b6600039600081816103590152818161046d0152818161074001528181610a1a01528181610c6701528181610c9001528181610e1d01528181610eeb0152818161102b01526112fb015261200b6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063c5d3a10711610059578063c5d3a10714610226578063d9203b9114610246578063f24935cb1461025b578063f2fde38b1461027b576100e8565b80638da5cb5b146101cd578063aa57511d146101ef578063bfe1092814610211576100e8565b80632788943b116100bb5780632788943b14610172578063715018a6146101855780638ab234b61461019a5780638b407d4f146101ba576100e8565b8063092ae4dc146100ed578063150b7a021461010f5780631af42c0f14610145576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004611643565b61029b565b005b34801561011b57600080fd5b5061012f61012a366004611683565b610330565b60405161013c9190611baf565b60405180910390f35b34801561015157600080fd5b50610165610160366004611604565b610340565b60405161013c9190611ba4565b61010d6101803660046117d1565b610355565b34801561019157600080fd5b5061010d61056a565b3480156101a657600080fd5b5061010d6101b5366004611604565b6105b5565b61010d6101c836600461186c565b610651565b3480156101d957600080fd5b506101e2610e06565b60405161013c9190611a1a565b3480156101fb57600080fd5b50610204610e15565b60405161013c9190611ef3565b34801561021d57600080fd5b506101e2610e1b565b34801561023257600080fd5b5061010d610241366004611604565b610e3f565b34801561025257600080fd5b506101e2610ed7565b34801561026757600080fd5b5061020461027636600461173f565b610ee6565b34801561028757600080fd5b5061010d610296366004611604565b6110f0565b6102a3611161565b6001600160a01b03166102b4610e06565b6001600160a01b0316146102e35760405162461bcd60e51b81526004016102da90611db8565b60405180910390fd5b6102ee838383611165565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf24338385846040516103239493929190611a2e565b60405180910390a1505050565b630a85bd0160e11b949350505050565b60026020526000908152604090205460ff1681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b057600080fd5b505afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190611627565b9050806001600160a01b0316886001600160a01b03161461041b5760405162461bcd60e51b81526004016102da90611bdc565b600061042c8a8a8a8a8a8989610ee6565b90508034101561044e5760405162461bcd60e51b81526004016102da90611e6f565b8034111561046957610469336104648334611f7d565b611252565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838d8d8d8d8d8d8d8d6040518a63ffffffff1660e01b81526004016104c6989796959493929190611ae7565b6020604051808303818588803b1580156104df57600080fd5b505af11580156104f3573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610518919061199f565b9050610523816112e4565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48b84604051610555929190611b6a565b60405180910390a25050505050505050505050565b610572611161565b6001600160a01b0316610583610e06565b6001600160a01b0316146105a95760405162461bcd60e51b81526004016102da90611db8565b6105b36000611362565b565b6105bd611161565b6001600160a01b03166105ce610e06565b6001600160a01b0316146105f45760405162461bcd60e51b81526004016102da90611db8565b6001600160a01b03811660009081526002602052604090205460ff161561062d5760405162461bcd60e51b81526004016102da90611d81565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b8660008151811061067257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0381166000908152600290925260409091205460ff166106b75760405162461bcd60e51b81526004016102da90611c59565b87516003146106d85760405162461bcd60e51b81526004016102da90611c90565b6000610739896001815181106106fe57634e487b7160e01b600052603260045260246000fd5b60200260200101518a60028151811061072757634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a8989610ee6565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cf9190611627565b6001600160a01b03168b6002815181106107f957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156108c8576003548b516001600160a01b039091169063ba560ed9908d9060009061084657634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518363ffffffff1660e01b815260040161086c929190611b6a565b602060405180830381600087803b15801561088657600080fd5b505af115801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be919061199f565b91508290506109a3565b6003548b516001600160a01b03909116906334899be6908d906000906108fe57634e487b7160e01b600052603260045260246000fd5b60200260200101518d60028151811061092757634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518463ffffffff1660e01b815260040161094e93929190611a58565b602060405180830381600087803b15801561096857600080fd5b505af115801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a0919061199f565b91505b6109d78b6000815181106109c757634e487b7160e01b600052603260045260246000fd5b60200260200101513330856113bf565b610a188b6000815181106109fb57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516003546001600160a01b0316846114af565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7157600080fd5b505afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa99190611627565b6001600160a01b03168b600281518110610ad357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610b7f576003548b516001600160a01b0390911690630de43334908d90600090610b2057634e487b7160e01b600052603260045260246000fd5b602002602001015184866040518463ffffffff1660e01b8152600401610b4893929190611b83565b600060405180830381600087803b158015610b6257600080fd5b505af1158015610b76573d6000803e3d6000fd5b50505050610c8c565b6003548b516001600160a01b03909116906380dcc456908d90600090610bb557634e487b7160e01b600052603260045260246000fd5b60200260200101518d600281518110610bde57634e487b7160e01b600052603260045260246000fd5b602002602001015185876040518563ffffffff1660e01b8152600401610c079493929190611b41565b600060405180830381600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b50505050610c8c8b600281518110610c5d57634e487b7160e01b600052603260045260246000fd5b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000856114af565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838e600181518110610cdf57634e487b7160e01b600052603260045260246000fd5b60200260200101518f600281518110610d0857634e487b7160e01b600052603260045260246000fd5b60200260200101518f8f8f8f8f8f6040518a63ffffffff1660e01b8152600401610d39989796959493929190611ae7565b6020604051808303818588803b158015610d5257600080fd5b505af1158015610d66573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610d8b919061199f565b9050610d96816112e4565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48d600081518110610dd957634e487b7160e01b600052603260045260246000fd5b602002602001015185604051610df0929190611b6a565b60405180910390a2505050505050505050505050565b6000546001600160a01b031690565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610e47611161565b6001600160a01b0316610e58610e06565b6001600160a01b031614610e7e5760405162461bcd60e51b81526004016102da90611db8565b6001600160a01b03811660009081526002602052604090205460ff16610eb65760405162461bcd60e51b81526004016102da90611ded565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6003546001600160a01b031681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663116191b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4257600080fd5b505afa158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190611627565b905060006001600160a01b038216635caca7b48b8b8b8b60ff8c168015610fb157634e487b7160e01b600052602160045260246000fd5b8b8b6040518863ffffffff1660e01b8152600401610fd59796959493929190611a7c565b60206040518083038186803b158015610fed57600080fd5b505afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611025919061199f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a001ecdd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561108257600080fd5b505afa158015611096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ba919061199f565b90506000826127106110cc8285611f5e565b6110d69190611f3e565b6110e09190611f26565b9c9b505050505050505050505050565b6110f8611161565b6001600160a01b0316611109610e06565b6001600160a01b03161461112f5760405162461bcd60e51b81526004016102da90611db8565b6001600160a01b0381166111555760405162461bcd60e51b81526004016102da90611c13565b61115e81611362565b50565b3390565b600080846001600160a01b031663a9059cbb858560405160240161118a929190611b6a565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516111c391906119e1565b6000604051808303816000865af19150503d8060008114611200576040519150601f19603f3d011682016040523d82523d6000602084013e611205565b606091505b509150915081801561122f57508051158061122f57508080602001905181019061122f919061197f565b61124b5760405162461bcd60e51b81526004016102da90611ea6565b5050505050565b604080516000808252602082019092526001600160a01b03841690839060405161127c91906119e1565b60006040518083038185875af1925050503d80600081146112b9576040519150601f19603f3d011682016040523d82523d6000602084013e6112be565b606091505b50509050806112df5760405162461bcd60e51b81526004016102da90611d24565b505050565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd9061133490309033908690600401611a58565b600060405180830381600087803b15801561134e57600080fd5b505af115801561124b573d6000803e3d6000fd5b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080856001600160a01b03166323b872dd8686866040516024016113e693929190611a58565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161141f91906119e1565b6000604051808303816000865af19150503d806000811461145c576040519150601f19603f3d011682016040523d82523d6000602084013e611461565b606091505b509150915081801561148b57508051158061148b57508080602001905181019061148b919061197f565b6114a75760405162461bcd60e51b81526004016102da90611cc7565b505050505050565b600080846001600160a01b031663095ea7b385856040516024016114d4929190611b6a565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161150d91906119e1565b6000604051808303816000865af19150503d806000811461154a576040519150601f19603f3d011682016040523d82523d6000602084013e61154f565b606091505b5091509150818015611579575080511580611579575080806020019051810190611579919061197f565b61124b5760405162461bcd60e51b81526004016102da90611e24565b60008083601f8401126115a6578182fd5b50813567ffffffffffffffff8111156115bd578182fd5b6020830191508360208285010111156115d557600080fd5b9250929050565b803561ffff811681146115ee57600080fd5b919050565b803560ff811681146115ee57600080fd5b600060208284031215611615578081fd5b813561162081611fc0565b9392505050565b600060208284031215611638578081fd5b815161162081611fc0565b600080600060608486031215611657578182fd5b833561166281611fc0565b9250602084013561167281611fc0565b929592945050506040919091013590565b60008060008060808587031215611698578081fd5b84356116a381611fc0565b93506020858101356116b481611fc0565b935060408601359250606086013567ffffffffffffffff808211156116d7578384fd5b818801915088601f8301126116ea578384fd5b8135818111156116fc576116fc611faa565b61170e601f8201601f19168501611efc565b91508082528984828501011115611723578485fd5b8084840185840137810190920192909252939692955090935050565b600080600080600080600060c0888a031215611759578283fd5b873561176481611fc0565b9650602088013561177481611fc0565b955060408801359450611789606089016115dc565b9350611797608089016115f3565b925060a088013567ffffffffffffffff8111156117b2578283fd5b6117be8a828b01611595565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156117ec578081fd5b88356117f781611fc0565b9750602089013561180781611fc0565b96506040890135955061181c60608a016115dc565b945061182a60808a016115f3565b935060a0890135925060c089013567ffffffffffffffff81111561184c578182fd5b6118588b828c01611595565b999c989b5096995094979396929594505050565b600080600080600080600060c0888a031215611886578283fd5b67ffffffffffffffff808935111561189c578384fd5b883589018a601f8201126118ae578485fd5b8035828111156118c0576118c0611faa565b602081026118d060208201611efc565b80838252602082019150602085018f60208588010111156118ef57898afd5b8995505b8486101561191c576119058135611fc0565b8035835260019590950194602092830192016118f3565b509b5050505060208a01359750611937905060408a016115dc565b955061194560608a016115f3565b94506080890135935060a08901358181111561195f578384fd5b61196b8b828c01611595565b999c989b5096995094979396939450505050565b600060208284031215611990578081fd5b81518015158114611620578182fd5b6000602082840312156119b0578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251815b81811015611a0157602081860181015185830152016119e7565b81811115611a0f5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038881168252871660208201526040810186905261ffff85166060820152600060018510611abf57634e487b7160e01b81526021600452602481fd5b84608083015260c060a0830152611ada60c0830184866119b7565b9998505050505050505050565b60006001600160a01b03808b168352808a1660208401525087604083015261ffff8716606083015260ff861660808301528460a083015260e060c0830152611b3360e0830184866119b7565b9a9950505050505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60208082526011908201527f53686f756c642070617920696e20455448000000000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b6020808252601f908201527f41737365747320706172616d206c656e6774682073686f756c64206265203300604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611f1e57611f1e611faa565b604052919050565b60008219821115611f3957611f39611f94565b500190565b600082611f5957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f7857611f78611f94565b500290565b600082821015611f8f57611f8f611f94565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461115e57600080fdfea26469706673582212208da70cf946d076d8cb9c3ce1244ca7b1c095a451ad49f9aa8960bd210eb7da4964736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063c5d3a10711610059578063c5d3a10714610226578063d9203b9114610246578063f24935cb1461025b578063f2fde38b1461027b576100e8565b80638da5cb5b146101cd578063aa57511d146101ef578063bfe1092814610211576100e8565b80632788943b116100bb5780632788943b14610172578063715018a6146101855780638ab234b61461019a5780638b407d4f146101ba576100e8565b8063092ae4dc146100ed578063150b7a021461010f5780631af42c0f14610145576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004611643565b61029b565b005b34801561011b57600080fd5b5061012f61012a366004611683565b610330565b60405161013c9190611baf565b60405180910390f35b34801561015157600080fd5b50610165610160366004611604565b610340565b60405161013c9190611ba4565b61010d6101803660046117d1565b610355565b34801561019157600080fd5b5061010d61056a565b3480156101a657600080fd5b5061010d6101b5366004611604565b6105b5565b61010d6101c836600461186c565b610651565b3480156101d957600080fd5b506101e2610e06565b60405161013c9190611a1a565b3480156101fb57600080fd5b50610204610e15565b60405161013c9190611ef3565b34801561021d57600080fd5b506101e2610e1b565b34801561023257600080fd5b5061010d610241366004611604565b610e3f565b34801561025257600080fd5b506101e2610ed7565b34801561026757600080fd5b5061020461027636600461173f565b610ee6565b34801561028757600080fd5b5061010d610296366004611604565b6110f0565b6102a3611161565b6001600160a01b03166102b4610e06565b6001600160a01b0316146102e35760405162461bcd60e51b81526004016102da90611db8565b60405180910390fd5b6102ee838383611165565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf24338385846040516103239493929190611a2e565b60405180910390a1505050565b630a85bd0160e11b949350505050565b60026020526000908152604090205460ff1681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b057600080fd5b505afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190611627565b9050806001600160a01b0316886001600160a01b03161461041b5760405162461bcd60e51b81526004016102da90611bdc565b600061042c8a8a8a8a8a8989610ee6565b90508034101561044e5760405162461bcd60e51b81526004016102da90611e6f565b8034111561046957610469336104648334611f7d565b611252565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838d8d8d8d8d8d8d8d6040518a63ffffffff1660e01b81526004016104c6989796959493929190611ae7565b6020604051808303818588803b1580156104df57600080fd5b505af11580156104f3573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610518919061199f565b9050610523816112e4565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48b84604051610555929190611b6a565b60405180910390a25050505050505050505050565b610572611161565b6001600160a01b0316610583610e06565b6001600160a01b0316146105a95760405162461bcd60e51b81526004016102da90611db8565b6105b36000611362565b565b6105bd611161565b6001600160a01b03166105ce610e06565b6001600160a01b0316146105f45760405162461bcd60e51b81526004016102da90611db8565b6001600160a01b03811660009081526002602052604090205460ff161561062d5760405162461bcd60e51b81526004016102da90611d81565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b8660008151811061067257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0381166000908152600290925260409091205460ff166106b75760405162461bcd60e51b81526004016102da90611c59565b87516003146106d85760405162461bcd60e51b81526004016102da90611c90565b6000610739896001815181106106fe57634e487b7160e01b600052603260045260246000fd5b60200260200101518a60028151811061072757634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a8989610ee6565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cf9190611627565b6001600160a01b03168b6002815181106107f957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156108c8576003548b516001600160a01b039091169063ba560ed9908d9060009061084657634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518363ffffffff1660e01b815260040161086c929190611b6a565b602060405180830381600087803b15801561088657600080fd5b505af115801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be919061199f565b91508290506109a3565b6003548b516001600160a01b03909116906334899be6908d906000906108fe57634e487b7160e01b600052603260045260246000fd5b60200260200101518d60028151811061092757634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518463ffffffff1660e01b815260040161094e93929190611a58565b602060405180830381600087803b15801561096857600080fd5b505af115801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a0919061199f565b91505b6109d78b6000815181106109c757634e487b7160e01b600052603260045260246000fd5b60200260200101513330856113bf565b610a188b6000815181106109fb57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516003546001600160a01b0316846114af565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7157600080fd5b505afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa99190611627565b6001600160a01b03168b600281518110610ad357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610b7f576003548b516001600160a01b0390911690630de43334908d90600090610b2057634e487b7160e01b600052603260045260246000fd5b602002602001015184866040518463ffffffff1660e01b8152600401610b4893929190611b83565b600060405180830381600087803b158015610b6257600080fd5b505af1158015610b76573d6000803e3d6000fd5b50505050610c8c565b6003548b516001600160a01b03909116906380dcc456908d90600090610bb557634e487b7160e01b600052603260045260246000fd5b60200260200101518d600281518110610bde57634e487b7160e01b600052603260045260246000fd5b602002602001015185876040518563ffffffff1660e01b8152600401610c079493929190611b41565b600060405180830381600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b50505050610c8c8b600281518110610c5d57634e487b7160e01b600052603260045260246000fd5b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000856114af565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838e600181518110610cdf57634e487b7160e01b600052603260045260246000fd5b60200260200101518f600281518110610d0857634e487b7160e01b600052603260045260246000fd5b60200260200101518f8f8f8f8f8f6040518a63ffffffff1660e01b8152600401610d39989796959493929190611ae7565b6020604051808303818588803b158015610d5257600080fd5b505af1158015610d66573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610d8b919061199f565b9050610d96816112e4565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48d600081518110610dd957634e487b7160e01b600052603260045260246000fd5b602002602001015185604051610df0929190611b6a565b60405180910390a2505050505050505050505050565b6000546001600160a01b031690565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610e47611161565b6001600160a01b0316610e58610e06565b6001600160a01b031614610e7e5760405162461bcd60e51b81526004016102da90611db8565b6001600160a01b03811660009081526002602052604090205460ff16610eb65760405162461bcd60e51b81526004016102da90611ded565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6003546001600160a01b031681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663116191b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4257600080fd5b505afa158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190611627565b905060006001600160a01b038216635caca7b48b8b8b8b60ff8c168015610fb157634e487b7160e01b600052602160045260246000fd5b8b8b6040518863ffffffff1660e01b8152600401610fd59796959493929190611a7c565b60206040518083038186803b158015610fed57600080fd5b505afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611025919061199f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a001ecdd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561108257600080fd5b505afa158015611096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ba919061199f565b90506000826127106110cc8285611f5e565b6110d69190611f3e565b6110e09190611f26565b9c9b505050505050505050505050565b6110f8611161565b6001600160a01b0316611109610e06565b6001600160a01b03161461112f5760405162461bcd60e51b81526004016102da90611db8565b6001600160a01b0381166111555760405162461bcd60e51b81526004016102da90611c13565b61115e81611362565b50565b3390565b600080846001600160a01b031663a9059cbb858560405160240161118a929190611b6a565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516111c391906119e1565b6000604051808303816000865af19150503d8060008114611200576040519150601f19603f3d011682016040523d82523d6000602084013e611205565b606091505b509150915081801561122f57508051158061122f57508080602001905181019061122f919061197f565b61124b5760405162461bcd60e51b81526004016102da90611ea6565b5050505050565b604080516000808252602082019092526001600160a01b03841690839060405161127c91906119e1565b60006040518083038185875af1925050503d80600081146112b9576040519150601f19603f3d011682016040523d82523d6000602084013e6112be565b606091505b50509050806112df5760405162461bcd60e51b81526004016102da90611d24565b505050565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd9061133490309033908690600401611a58565b600060405180830381600087803b15801561134e57600080fd5b505af115801561124b573d6000803e3d6000fd5b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080856001600160a01b03166323b872dd8686866040516024016113e693929190611a58565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161141f91906119e1565b6000604051808303816000865af19150503d806000811461145c576040519150601f19603f3d011682016040523d82523d6000602084013e611461565b606091505b509150915081801561148b57508051158061148b57508080602001905181019061148b919061197f565b6114a75760405162461bcd60e51b81526004016102da90611cc7565b505050505050565b600080846001600160a01b031663095ea7b385856040516024016114d4929190611b6a565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161150d91906119e1565b6000604051808303816000865af19150503d806000811461154a576040519150601f19603f3d011682016040523d82523d6000602084013e61154f565b606091505b5091509150818015611579575080511580611579575080806020019051810190611579919061197f565b61124b5760405162461bcd60e51b81526004016102da90611e24565b60008083601f8401126115a6578182fd5b50813567ffffffffffffffff8111156115bd578182fd5b6020830191508360208285010111156115d557600080fd5b9250929050565b803561ffff811681146115ee57600080fd5b919050565b803560ff811681146115ee57600080fd5b600060208284031215611615578081fd5b813561162081611fc0565b9392505050565b600060208284031215611638578081fd5b815161162081611fc0565b600080600060608486031215611657578182fd5b833561166281611fc0565b9250602084013561167281611fc0565b929592945050506040919091013590565b60008060008060808587031215611698578081fd5b84356116a381611fc0565b93506020858101356116b481611fc0565b935060408601359250606086013567ffffffffffffffff808211156116d7578384fd5b818801915088601f8301126116ea578384fd5b8135818111156116fc576116fc611faa565b61170e601f8201601f19168501611efc565b91508082528984828501011115611723578485fd5b8084840185840137810190920192909252939692955090935050565b600080600080600080600060c0888a031215611759578283fd5b873561176481611fc0565b9650602088013561177481611fc0565b955060408801359450611789606089016115dc565b9350611797608089016115f3565b925060a088013567ffffffffffffffff8111156117b2578283fd5b6117be8a828b01611595565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156117ec578081fd5b88356117f781611fc0565b9750602089013561180781611fc0565b96506040890135955061181c60608a016115dc565b945061182a60808a016115f3565b935060a0890135925060c089013567ffffffffffffffff81111561184c578182fd5b6118588b828c01611595565b999c989b5096995094979396929594505050565b600080600080600080600060c0888a031215611886578283fd5b67ffffffffffffffff808935111561189c578384fd5b883589018a601f8201126118ae578485fd5b8035828111156118c0576118c0611faa565b602081026118d060208201611efc565b80838252602082019150602085018f60208588010111156118ef57898afd5b8995505b8486101561191c576119058135611fc0565b8035835260019590950194602092830192016118f3565b509b5050505060208a01359750611937905060408a016115dc565b955061194560608a016115f3565b94506080890135935060a08901358181111561195f578384fd5b61196b8b828c01611595565b999c989b5096995094979396939450505050565b600060208284031215611990578081fd5b81518015158114611620578182fd5b6000602082840312156119b0578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251815b81811015611a0157602081860181015185830152016119e7565b81811115611a0f5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038881168252871660208201526040810186905261ffff85166060820152600060018510611abf57634e487b7160e01b81526021600452602481fd5b84608083015260c060a0830152611ada60c0830184866119b7565b9998505050505050505050565b60006001600160a01b03808b168352808a1660208401525087604083015261ffff8716606083015260ff861660808301528460a083015260e060c0830152611b3360e0830184866119b7565b9a9950505050505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60208082526011908201527f53686f756c642070617920696e20455448000000000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b6020808252601f908201527f41737365747320706172616d206c656e6774682073686f756c64206265203300604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611f1e57611f1e611faa565b604052919050565b60008219821115611f3957611f39611f94565b500190565b600082611f5957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f7857611f78611f94565b500290565b600082821015611f8f57611f8f611f94565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461115e57600080fdfea26469706673582212208da70cf946d076d8cb9c3ce1244ca7b1c095a451ad49f9aa8960bd210eb7da4964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyCoverByETH(address,address,uint256,uint16,uint8,uint256,bytes)": {
        "details": "User will buy product directly using his ETH"
      },
      "getProductPrice(address,address,uint256,uint16,uint8,bytes)": {
        "details": "return maxPriceWithFee value"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAsset(address,address,uint256)": {
        "details": "For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "distributor()": {
        "notice": "TODO if it is immutable?  "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 535,
        "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4303,
        "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
        "label": "productIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1510_storage"
      },
      {
        "astId": 4307,
        "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4309,
        "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Counter)1510_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1509,
            "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}