{
  "address": "0x77049864cCa895D8A197938CE72008ff795e4A30",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CVR",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "BuyNexusMutual",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAsset",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coverAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sumAssured",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "coverPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "coverType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceWithFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "buyCoverByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "sumAssured",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "coverPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "coverType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceWithFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "buyCoverByToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coverAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sumAssured",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "coverPeriod",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "coverType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getProductPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb56d53450d20e30a18290efa14f0811943eaf12db624f6ad08ab5fef5a23292e",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x77049864cCa895D8A197938CE72008ff795e4A30",
    "transactionIndex": 0,
    "gasUsed": "1894746",
    "logsBloom": "0x
    "blockHash": "0x16f7f08e1295fa2286b7649275b713e1d23fbfe9d54e60c9f3d0f2d31bf7ae9d",
    "transactionHash": "0xb56d53450d20e30a18290efa14f0811943eaf12db624f6ad08ab5fef5a23292e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28394936,
        "transactionHash": "0xb56d53450d20e30a18290efa14f0811943eaf12db624f6ad08ab5fef5a23292e",
        "address": "0x77049864cCa895D8A197938CE72008ff795e4A30",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x16f7f08e1295fa2286b7649275b713e1d23fbfe9d54e60c9f3d0f2d31bf7ae9d"
      }
    ],
    "blockNumber": 28394936,
    "cumulativeGasUsed": "1894746",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFc9B2B2565B38511B9822887F99D036d694a11e6",
    "0x95635bB88C887ff2464801B989d5483ac8BFe6F8",
    "0xe77250450fc9f682edeff9f0d252836189c01b53"
  ],
  "solcInputHash": "b9f5be885696f0e623502845256d15e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CVR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"BuyNexusMutual\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coverAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceWithFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buyCoverByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceWithFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buyCoverByToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coverAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getProductPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyCoverByETH(address,address,uint256,uint16,uint8,uint256,bytes)\":{\"details\":\"User will buy product directly using his ETH\"},\"getProductPrice(address,address,uint256,uint16,uint8,bytes)\":{\"details\":\"return maxPriceWithFee value\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAsset(address,address,uint256)\":{\"details\":\"For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distributor()\":{\"notice\":\"TODO if it is immutable?  \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onchain/NexusMutualPolka.sol\":\"NexusMutualPolka\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd260defa45bc1bbdf5e6d74298fb2705bf058c3d2beb17fb1158fa1a430c5024\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeAgent {\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _desiredAmount\\n    ) external returns (uint256);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function swapTokenWithETH(address _token, uint256 _amount) external;\\n\\n    function swapTokenWithToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b3a247450082bf7e12ca27c13685885e56e396192d91ddd24820f9e6562cd6a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INexusMutual.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface INexusMutual {\\n    function buyCover(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        uint8 coverType,\\n        uint256 maxPriceWithFee,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function ETH() external view returns (address);\\n\\n    function feePercentage() external view returns (uint256);\\n\\n    function gateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7d9b431c4e536af78f7cb06e98146ea7f444c9336d3559620a7be67571806d92\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INexusMutualGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\ninterface INexusMutualGateway {\\n    enum ClaimStatus {\\n        IN_PROGRESS,\\n        ACCEPTED,\\n        REJECTED\\n    }\\n    enum CoverType {\\n        SIGNED_QUOTE_CONTRACT_COVER\\n    }\\n\\n    function getCoverPrice(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        CoverType coverType,\\n        bytes calldata data\\n    ) external view returns (uint256 coverPrice);\\n}\\n\",\"keccak256\":\"0x7583c4878dccc691d42a76065844eb3557a812f29d8c3644a7c6f4ef75de0071\",\"license\":\"GPL-3.0-only\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/onchain/BasePolkaOnChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libs/TransferHelper.sol\\\";\\n\\ncontract BasePolkaOnChain is Ownable {\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\n    event WithdrawAsset(address _user, address _to, address _token, uint256 _amount);\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter public productIds;\\n    mapping(address => bool) public availableCurrencies;\\n\\n    // address public immutable WETH;\\n    // TODO should it be public?\\n    address public exchangeAgent;\\n\\n    constructor(address _CVR, address _exchangeAgent) {\\n        availableCurrencies[_CVR] = true;\\n        exchangeAgent = _exchangeAgent;\\n    }\\n\\n    modifier onlyAvailableToken(address _token) {\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function addCurrency(address _currency) external onlyOwner {\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\n        availableCurrencies[_currency] = true;\\n    }\\n\\n    function removeCurrency(address _currency) external onlyOwner {\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\n        availableCurrencies[_currency] = false;\\n    }\\n\\n    /**\\n     * @dev For reflect tokens, we should deposit some tokens at contract directly,\\n     * We will withdraw tokens deposited at contract through this function\\n     */\\n    function withdrawAsset(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, _to, _amount);\\n        WithdrawAsset(msg.sender, _to, _token, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x611a7ec4c27da33e90237d4862284ecc1f2cdf3e2a2e5d3fbc293fd5c9e2d946\",\"license\":\"MIT\"},\"contracts/onchain/NexusMutualPolka.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {INexusMutual} from \\\"../interfaces/INexusMutual.sol\\\";\\nimport {INexusMutualGateway} from \\\"../interfaces/INexusMutualGateway.sol\\\";\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\nimport \\\"../libs/TransferHelper.sol\\\";\\nimport \\\"./BasePolkaOnChain.sol\\\";\\n\\ncontract NexusMutualPolka is ERC721Holder, BasePolkaOnChain {\\n    // event BuyNexusMutual(address indexed distributor, uint256 indexed pid, address converAsset, uint price, address _buyToken, uint _tokenAmount);\\n    event BuyNexusMutual(uint256 indexed pid, address _buyToken, uint256 _tokenAmount);\\n\\n    /** TODO if it is immutable?  */\\n    address public immutable distributor;\\n\\n    constructor(\\n        address _CVR,\\n        address _exchangeAgent,\\n        address _distributor\\n    ) BasePolkaOnChain(_CVR, _exchangeAgent) {\\n        distributor = _distributor;\\n    }\\n\\n    /**\\n     * @dev return maxPriceWithFee value\\n     */\\n    function getProductPrice(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        uint8 coverType,\\n        bytes calldata data\\n    ) public view returns (uint256) {\\n        address nexusGateWay = INexusMutual(distributor).gateway();\\n        uint256 coverPrice = INexusMutualGateway(nexusGateWay).getCoverPrice(\\n            contractAddress,\\n            coverAsset,\\n            sumAssured,\\n            coverPeriod,\\n            INexusMutualGateway.CoverType(coverType),\\n            data\\n        );\\n        uint256 _feePercentage = INexusMutual(distributor).feePercentage();\\n        uint256 coverPriceWithFee = (_feePercentage * coverPrice) / 10000 + coverPrice;\\n\\n        return coverPriceWithFee;\\n    }\\n\\n    /**\\n     * @dev User will buy product directly using his ETH\\n     */\\n    function buyCoverByETH(\\n        address contractAddress,\\n        address coverAsset,\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        uint8 coverType,\\n        uint256 maxPriceWithFee,\\n        bytes calldata data\\n    ) external payable {\\n        address _weth = INexusMutual(distributor).ETH();\\n        require(coverAsset == _weth, \\\"Should pay in ETH\\\");\\n        uint256 productPrice = getProductPrice(contractAddress, coverAsset, sumAssured, coverPeriod, coverType, data);\\n\\n        require(msg.value >= productPrice, \\\"Insufficient amount\\\");\\n        if (msg.value > productPrice) {\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - productPrice);\\n        }\\n\\n        uint256 productId = INexusMutual(distributor).buyCover{value: productPrice}(\\n            contractAddress,\\n            coverAsset,\\n            sumAssured,\\n            coverPeriod,\\n            coverType,\\n            maxPriceWithFee,\\n            data\\n        );\\n\\n        buyCover(productId);\\n\\n        emit BuyNexusMutual(productId, coverAsset, productPrice);\\n    }\\n\\n    function buyCoverByToken(\\n        address[] memory _assets, // _token, contractAddress, coverAsset\\n        uint256 sumAssured,\\n        uint16 coverPeriod,\\n        uint8 coverType,\\n        uint256 maxPriceWithFee,\\n        bytes calldata data\\n    ) external payable onlyAvailableToken(_assets[0]) {\\n        require(_assets.length == 3, \\\"Assets param length should be 3\\\");\\n        uint256 productPrice = getProductPrice(_assets[1], _assets[2], sumAssured, coverPeriod, coverType, data);\\n\\n        uint256 amount;\\n        uint256 value;\\n\\n        if (_assets[2] == INexusMutual(distributor).ETH()) {\\n            amount = IExchangeAgent(exchangeAgent).getTokenAmountForETH(_assets[0], productPrice);\\n            value = productPrice;\\n        } else {\\n            amount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(_assets[0], _assets[2], productPrice);\\n        }\\n\\n        TransferHelper.safeTransferFrom(_assets[0], msg.sender, address(this), amount);\\n        TransferHelper.safeApprove(_assets[0], exchangeAgent, amount);\\n\\n        if (_assets[2] == INexusMutual(distributor).ETH()) {\\n            IExchangeAgent(exchangeAgent).swapTokenWithETH(_assets[0], amount);\\n        } else {\\n            IExchangeAgent(exchangeAgent).swapTokenWithToken(_assets[0], _assets[2], amount);\\n            TransferHelper.safeApprove(_assets[2], distributor, productPrice);\\n        }\\n\\n        uint256 productId = INexusMutual(distributor).buyCover{value: value}(\\n            _assets[1],\\n            _assets[2],\\n            sumAssured,\\n            coverPeriod,\\n            coverType,\\n            maxPriceWithFee,\\n            data\\n        );\\n\\n        buyCover(productId);\\n        emit BuyNexusMutual(productId, _assets[0], amount);\\n    }\\n\\n    function buyCover(uint256 productId) private {\\n        IERC721(distributor).transferFrom(address(this), msg.sender, productId);\\n    }\\n}\\n\",\"keccak256\":\"0x941e7a8ee9febe96168de850eb6c08b5e6b101c0c9d5f504e8d6b148a10b80b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620021b2380380620021b2833981016040819052620000349162000101565b8282600062000042620000e0565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0391821660009081526002602052604090208054600160ff19909116179055600380546001600160a01b0319169190921617905560601b6001600160601b031916608052506200014a9050565b3390565b80516001600160a01b0381168114620000fc57600080fd5b919050565b60008060006060848603121562000116578283fd5b6200012184620000e4565b92506200013160208501620000e4565b91506200014160408501620000e4565b90509250925092565b60805160601c61200a620001a8600039600081816103590152818161046d0152818161078b01528181610a6501528181610cae01528181610cd701528181610e6401528181610f3201528181611072015261139e015261200a6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063c5d3a10711610059578063c5d3a10714610226578063d9203b9114610246578063f24935cb1461025b578063f2fde38b1461027b576100e8565b80638da5cb5b146101cd578063aa57511d146101ef578063bfe1092814610211576100e8565b80632788943b116100bb5780632788943b14610172578063715018a6146101855780638ab234b61461019a5780638b407d4f146101ba576100e8565b8063092ae4dc146100ed578063150b7a021461010f5780631af42c0f14610145576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004611689565b61029b565b005b34801561011b57600080fd5b5061012f61012a3660046116c9565b610330565b60405161013c9190611bab565b60405180910390f35b34801561015157600080fd5b5061016561016036600461164a565b610340565b60405161013c9190611ba0565b61010d610180366004611817565b610355565b34801561019157600080fd5b5061010d61056a565b3480156101a657600080fd5b5061010d6101b536600461164a565b610600565b61010d6101c83660046118b2565b61069c565b3480156101d957600080fd5b506101e2610e4d565b60405161013c9190611a60565b3480156101fb57600080fd5b50610204610e5c565b60405161013c9190611eef565b34801561021d57600080fd5b506101e2610e62565b34801561023257600080fd5b5061010d61024136600461164a565b610e86565b34801561025257600080fd5b506101e2610f1e565b34801561026757600080fd5b50610204610276366004611785565b610f2d565b34801561028757600080fd5b5061010d61029636600461164a565b611137565b6102a3611204565b6001600160a01b03166102b4610e4d565b6001600160a01b0316146102e35760405162461bcd60e51b81526004016102da90611db4565b60405180910390fd5b6102ee838383611208565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf24338385846040516103239493929190611a74565b60405180910390a1505050565b630a85bd0160e11b949350505050565b60026020526000908152604090205460ff1681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b057600080fd5b505afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e8919061166d565b9050806001600160a01b0316886001600160a01b03161461041b5760405162461bcd60e51b81526004016102da90611bd8565b600061042c8a8a8a8a8a8989610f2d565b90508034101561044e5760405162461bcd60e51b81526004016102da90611e6b565b8034111561046957610469336104648334611f79565b6112f5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838d8d8d8d8d8d8d8d6040518a63ffffffff1660e01b81526004016104c6989796959493929190611b2d565b6020604051808303818588803b1580156104df57600080fd5b505af11580156104f3573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061051891906119e5565b905061052381611387565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48b84604051610555929190611b87565b60405180910390a25050505050505050505050565b610572611204565b6001600160a01b0316610583610e4d565b6001600160a01b0316146105a95760405162461bcd60e51b81526004016102da90611db4565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610608611204565b6001600160a01b0316610619610e4d565b6001600160a01b03161461063f5760405162461bcd60e51b81526004016102da90611db4565b6001600160a01b03811660009081526002602052604090205460ff16156106785760405162461bcd60e51b81526004016102da90611d7d565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b866000815181106106bd57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0381166000908152600290925260409091205460ff166107025760405162461bcd60e51b81526004016102da90611c55565b87516003146107235760405162461bcd60e51b81526004016102da90611c8c565b60006107848960018151811061074957634e487b7160e01b600052603260045260246000fd5b60200260200101518a60028151811061077257634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a8989610f2d565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a919061166d565b6001600160a01b03168b60028151811061084457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610913576003548b516001600160a01b039091169063ba560ed9908d9060009061089157634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518363ffffffff1660e01b81526004016108b7929190611b87565b602060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090991906119e5565b91508290506109ee565b6003548b516001600160a01b03909116906334899be6908d9060009061094957634e487b7160e01b600052603260045260246000fd5b60200260200101518d60028151811061097257634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518463ffffffff1660e01b815260040161099993929190611a9e565b602060405180830381600087803b1580156109b357600080fd5b505af11580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb91906119e5565b91505b610a228b600081518110610a1257634e487b7160e01b600052603260045260246000fd5b6020026020010151333085611405565b610a638b600081518110610a4657634e487b7160e01b600052603260045260246000fd5b60209081029190910101516003546001600160a01b0316846114f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b158015610abc57600080fd5b505afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af4919061166d565b6001600160a01b03168b600281518110610b1e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610bc8576003548b516001600160a01b03909116906378cb7171908d90600090610b6b57634e487b7160e01b600052603260045260246000fd5b6020026020010151846040518363ffffffff1660e01b8152600401610b91929190611b87565b600060405180830381600087803b158015610bab57600080fd5b505af1158015610bbf573d6000803e3d6000fd5b50505050610cd3565b6003548b516001600160a01b0390911690636e85a5ab908d90600090610bfe57634e487b7160e01b600052603260045260246000fd5b60200260200101518d600281518110610c2757634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518463ffffffff1660e01b8152600401610c4e93929190611a9e565b600060405180830381600087803b158015610c6857600080fd5b505af1158015610c7c573d6000803e3d6000fd5b50505050610cd38b600281518110610ca457634e487b7160e01b600052603260045260246000fd5b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000856114f5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838e600181518110610d2657634e487b7160e01b600052603260045260246000fd5b60200260200101518f600281518110610d4f57634e487b7160e01b600052603260045260246000fd5b60200260200101518f8f8f8f8f8f6040518a63ffffffff1660e01b8152600401610d80989796959493929190611b2d565b6020604051808303818588803b158015610d9957600080fd5b505af1158015610dad573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610dd291906119e5565b9050610ddd81611387565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48d600081518110610e2057634e487b7160e01b600052603260045260246000fd5b602002602001015185604051610e37929190611b87565b60405180910390a2505050505050505050505050565b6000546001600160a01b031690565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610e8e611204565b6001600160a01b0316610e9f610e4d565b6001600160a01b031614610ec55760405162461bcd60e51b81526004016102da90611db4565b6001600160a01b03811660009081526002602052604090205460ff16610efd5760405162461bcd60e51b81526004016102da90611de9565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6003546001600160a01b031681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663116191b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8957600080fd5b505afa158015610f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc1919061166d565b905060006001600160a01b038216635caca7b48b8b8b8b60ff8c168015610ff857634e487b7160e01b600052602160045260246000fd5b8b8b6040518863ffffffff1660e01b815260040161101c9796959493929190611ac2565b60206040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c91906119e5565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a001ecdd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c957600080fd5b505afa1580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110191906119e5565b90506000826127106111138285611f5a565b61111d9190611f3a565b6111279190611f22565b9c9b505050505050505050505050565b61113f611204565b6001600160a01b0316611150610e4d565b6001600160a01b0316146111765760405162461bcd60e51b81526004016102da90611db4565b6001600160a01b03811661119c5760405162461bcd60e51b81526004016102da90611c0f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3390565b600080846001600160a01b031663a9059cbb858560405160240161122d929190611b87565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516112669190611a27565b6000604051808303816000865af19150503d80600081146112a3576040519150601f19603f3d011682016040523d82523d6000602084013e6112a8565b606091505b50915091508180156112d25750805115806112d25750808060200190518101906112d291906119c5565b6112ee5760405162461bcd60e51b81526004016102da90611ea2565b5050505050565b604080516000808252602082019092526001600160a01b03841690839060405161131f9190611a27565b60006040518083038185875af1925050503d806000811461135c576040519150601f19603f3d011682016040523d82523d6000602084013e611361565b606091505b50509050806113825760405162461bcd60e51b81526004016102da90611d20565b505050565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906113d790309033908690600401611a9e565b600060405180830381600087803b1580156113f157600080fd5b505af11580156112ee573d6000803e3d6000fd5b600080856001600160a01b03166323b872dd86868660405160240161142c93929190611a9e565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516114659190611a27565b6000604051808303816000865af19150503d80600081146114a2576040519150601f19603f3d011682016040523d82523d6000602084013e6114a7565b606091505b50915091508180156114d15750805115806114d15750808060200190518101906114d191906119c5565b6114ed5760405162461bcd60e51b81526004016102da90611cc3565b505050505050565b600080846001600160a01b031663095ea7b3858560405160240161151a929190611b87565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516115539190611a27565b6000604051808303816000865af19150503d8060008114611590576040519150601f19603f3d011682016040523d82523d6000602084013e611595565b606091505b50915091508180156115bf5750805115806115bf5750808060200190518101906115bf91906119c5565b6112ee5760405162461bcd60e51b81526004016102da90611e20565b60008083601f8401126115ec578182fd5b50813567ffffffffffffffff811115611603578182fd5b60208301915083602082850101111561161b57600080fd5b9250929050565b803561ffff8116811461163457600080fd5b919050565b803560ff8116811461163457600080fd5b60006020828403121561165b578081fd5b813561166681611fbc565b9392505050565b60006020828403121561167e578081fd5b815161166681611fbc565b60008060006060848603121561169d578182fd5b83356116a881611fbc565b925060208401356116b881611fbc565b929592945050506040919091013590565b600080600080608085870312156116de578081fd5b84356116e981611fbc565b93506020858101356116fa81611fbc565b935060408601359250606086013567ffffffffffffffff8082111561171d578384fd5b818801915088601f830112611730578384fd5b81358181111561174257611742611fa6565b611754601f8201601f19168501611ef8565b91508082528984828501011115611769578485fd5b8084840185840137810190920192909252939692955090935050565b600080600080600080600060c0888a03121561179f578283fd5b87356117aa81611fbc565b965060208801356117ba81611fbc565b9550604088013594506117cf60608901611622565b93506117dd60808901611639565b925060a088013567ffffffffffffffff8111156117f8578283fd5b6118048a828b016115db565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b031215611832578081fd5b883561183d81611fbc565b9750602089013561184d81611fbc565b96506040890135955061186260608a01611622565b945061187060808a01611639565b935060a0890135925060c089013567ffffffffffffffff811115611892578182fd5b61189e8b828c016115db565b999c989b5096995094979396929594505050565b600080600080600080600060c0888a0312156118cc578283fd5b67ffffffffffffffff80893511156118e2578384fd5b883589018a601f8201126118f4578485fd5b80358281111561190657611906611fa6565b6020810261191660208201611ef8565b80838252602082019150602085018f602085880101111561193557898afd5b8995505b848610156119625761194b8135611fbc565b803583526001959095019460209283019201611939565b509b5050505060208a0135975061197d905060408a01611622565b955061198b60608a01611639565b94506080890135935060a0890135818111156119a5578384fd5b6119b18b828c016115db565b999c989b5096995094979396939450505050565b6000602082840312156119d6578081fd5b81518015158114611666578182fd5b6000602082840312156119f6578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251815b81811015611a475760208186018101518583015201611a2d565b81811115611a555782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038881168252871660208201526040810186905261ffff85166060820152600060018510611b0557634e487b7160e01b81526021600452602481fd5b84608083015260c060a0830152611b2060c0830184866119fd565b9998505050505050505050565b60006001600160a01b03808b168352808a1660208401525087604083015261ffff8716606083015260ff861660808301528460a083015260e060c0830152611b7960e0830184866119fd565b9a9950505050505050505050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60208082526011908201527f53686f756c642070617920696e20455448000000000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b6020808252601f908201527f41737365747320706172616d206c656e6774682073686f756c64206265203300604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611f1a57611f1a611fa6565b604052919050565b60008219821115611f3557611f35611f90565b500190565b600082611f5557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f7457611f74611f90565b500290565b600082821015611f8b57611f8b611f90565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611fd157600080fd5b5056fea26469706673582212205c709f97e12b734df5fb2b2ec81ae1f4011e383cf1cfad0c9d4894df8ec2fda964736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063c5d3a10711610059578063c5d3a10714610226578063d9203b9114610246578063f24935cb1461025b578063f2fde38b1461027b576100e8565b80638da5cb5b146101cd578063aa57511d146101ef578063bfe1092814610211576100e8565b80632788943b116100bb5780632788943b14610172578063715018a6146101855780638ab234b61461019a5780638b407d4f146101ba576100e8565b8063092ae4dc146100ed578063150b7a021461010f5780631af42c0f14610145576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004611689565b61029b565b005b34801561011b57600080fd5b5061012f61012a3660046116c9565b610330565b60405161013c9190611bab565b60405180910390f35b34801561015157600080fd5b5061016561016036600461164a565b610340565b60405161013c9190611ba0565b61010d610180366004611817565b610355565b34801561019157600080fd5b5061010d61056a565b3480156101a657600080fd5b5061010d6101b536600461164a565b610600565b61010d6101c83660046118b2565b61069c565b3480156101d957600080fd5b506101e2610e4d565b60405161013c9190611a60565b3480156101fb57600080fd5b50610204610e5c565b60405161013c9190611eef565b34801561021d57600080fd5b506101e2610e62565b34801561023257600080fd5b5061010d61024136600461164a565b610e86565b34801561025257600080fd5b506101e2610f1e565b34801561026757600080fd5b50610204610276366004611785565b610f2d565b34801561028757600080fd5b5061010d61029636600461164a565b611137565b6102a3611204565b6001600160a01b03166102b4610e4d565b6001600160a01b0316146102e35760405162461bcd60e51b81526004016102da90611db4565b60405180910390fd5b6102ee838383611208565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf24338385846040516103239493929190611a74565b60405180910390a1505050565b630a85bd0160e11b949350505050565b60026020526000908152604090205460ff1681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b057600080fd5b505afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e8919061166d565b9050806001600160a01b0316886001600160a01b03161461041b5760405162461bcd60e51b81526004016102da90611bd8565b600061042c8a8a8a8a8a8989610f2d565b90508034101561044e5760405162461bcd60e51b81526004016102da90611e6b565b8034111561046957610469336104648334611f79565b6112f5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838d8d8d8d8d8d8d8d6040518a63ffffffff1660e01b81526004016104c6989796959493929190611b2d565b6020604051808303818588803b1580156104df57600080fd5b505af11580156104f3573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061051891906119e5565b905061052381611387565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48b84604051610555929190611b87565b60405180910390a25050505050505050505050565b610572611204565b6001600160a01b0316610583610e4d565b6001600160a01b0316146105a95760405162461bcd60e51b81526004016102da90611db4565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610608611204565b6001600160a01b0316610619610e4d565b6001600160a01b03161461063f5760405162461bcd60e51b81526004016102da90611db4565b6001600160a01b03811660009081526002602052604090205460ff16156106785760405162461bcd60e51b81526004016102da90611d7d565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b866000815181106106bd57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0381166000908152600290925260409091205460ff166107025760405162461bcd60e51b81526004016102da90611c55565b87516003146107235760405162461bcd60e51b81526004016102da90611c8c565b60006107848960018151811061074957634e487b7160e01b600052603260045260246000fd5b60200260200101518a60028151811061077257634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a8989610f2d565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a919061166d565b6001600160a01b03168b60028151811061084457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610913576003548b516001600160a01b039091169063ba560ed9908d9060009061089157634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518363ffffffff1660e01b81526004016108b7929190611b87565b602060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090991906119e5565b91508290506109ee565b6003548b516001600160a01b03909116906334899be6908d9060009061094957634e487b7160e01b600052603260045260246000fd5b60200260200101518d60028151811061097257634e487b7160e01b600052603260045260246000fd5b6020026020010151866040518463ffffffff1660e01b815260040161099993929190611a9e565b602060405180830381600087803b1580156109b357600080fd5b505af11580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb91906119e5565b91505b610a228b600081518110610a1257634e487b7160e01b600052603260045260246000fd5b6020026020010151333085611405565b610a638b600081518110610a4657634e487b7160e01b600052603260045260246000fd5b60209081029190910101516003546001600160a01b0316846114f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638322fff26040518163ffffffff1660e01b815260040160206040518083038186803b158015610abc57600080fd5b505afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af4919061166d565b6001600160a01b03168b600281518110610b1e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610bc8576003548b516001600160a01b03909116906378cb7171908d90600090610b6b57634e487b7160e01b600052603260045260246000fd5b6020026020010151846040518363ffffffff1660e01b8152600401610b91929190611b87565b600060405180830381600087803b158015610bab57600080fd5b505af1158015610bbf573d6000803e3d6000fd5b50505050610cd3565b6003548b516001600160a01b0390911690636e85a5ab908d90600090610bfe57634e487b7160e01b600052603260045260246000fd5b60200260200101518d600281518110610c2757634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518463ffffffff1660e01b8152600401610c4e93929190611a9e565b600060405180830381600087803b158015610c6857600080fd5b505af1158015610c7c573d6000803e3d6000fd5b50505050610cd38b600281518110610ca457634e487b7160e01b600052603260045260246000fd5b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000856114f5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8a856ee838e600181518110610d2657634e487b7160e01b600052603260045260246000fd5b60200260200101518f600281518110610d4f57634e487b7160e01b600052603260045260246000fd5b60200260200101518f8f8f8f8f8f6040518a63ffffffff1660e01b8152600401610d80989796959493929190611b2d565b6020604051808303818588803b158015610d9957600080fd5b505af1158015610dad573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610dd291906119e5565b9050610ddd81611387565b807ff55ac0abf2bf841b528bc82ae0dea104860c71d7a98d5106fd4a86ab214436d48d600081518110610e2057634e487b7160e01b600052603260045260246000fd5b602002602001015185604051610e37929190611b87565b60405180910390a2505050505050505050505050565b6000546001600160a01b031690565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610e8e611204565b6001600160a01b0316610e9f610e4d565b6001600160a01b031614610ec55760405162461bcd60e51b81526004016102da90611db4565b6001600160a01b03811660009081526002602052604090205460ff16610efd5760405162461bcd60e51b81526004016102da90611de9565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6003546001600160a01b031681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663116191b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8957600080fd5b505afa158015610f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc1919061166d565b905060006001600160a01b038216635caca7b48b8b8b8b60ff8c168015610ff857634e487b7160e01b600052602160045260246000fd5b8b8b6040518863ffffffff1660e01b815260040161101c9796959493929190611ac2565b60206040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c91906119e5565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a001ecdd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c957600080fd5b505afa1580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110191906119e5565b90506000826127106111138285611f5a565b61111d9190611f3a565b6111279190611f22565b9c9b505050505050505050505050565b61113f611204565b6001600160a01b0316611150610e4d565b6001600160a01b0316146111765760405162461bcd60e51b81526004016102da90611db4565b6001600160a01b03811661119c5760405162461bcd60e51b81526004016102da90611c0f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3390565b600080846001600160a01b031663a9059cbb858560405160240161122d929190611b87565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516112669190611a27565b6000604051808303816000865af19150503d80600081146112a3576040519150601f19603f3d011682016040523d82523d6000602084013e6112a8565b606091505b50915091508180156112d25750805115806112d25750808060200190518101906112d291906119c5565b6112ee5760405162461bcd60e51b81526004016102da90611ea2565b5050505050565b604080516000808252602082019092526001600160a01b03841690839060405161131f9190611a27565b60006040518083038185875af1925050503d806000811461135c576040519150601f19603f3d011682016040523d82523d6000602084013e611361565b606091505b50509050806113825760405162461bcd60e51b81526004016102da90611d20565b505050565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906113d790309033908690600401611a9e565b600060405180830381600087803b1580156113f157600080fd5b505af11580156112ee573d6000803e3d6000fd5b600080856001600160a01b03166323b872dd86868660405160240161142c93929190611a9e565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516114659190611a27565b6000604051808303816000865af19150503d80600081146114a2576040519150601f19603f3d011682016040523d82523d6000602084013e6114a7565b606091505b50915091508180156114d15750805115806114d15750808060200190518101906114d191906119c5565b6114ed5760405162461bcd60e51b81526004016102da90611cc3565b505050505050565b600080846001600160a01b031663095ea7b3858560405160240161151a929190611b87565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516115539190611a27565b6000604051808303816000865af19150503d8060008114611590576040519150601f19603f3d011682016040523d82523d6000602084013e611595565b606091505b50915091508180156115bf5750805115806115bf5750808060200190518101906115bf91906119c5565b6112ee5760405162461bcd60e51b81526004016102da90611e20565b60008083601f8401126115ec578182fd5b50813567ffffffffffffffff811115611603578182fd5b60208301915083602082850101111561161b57600080fd5b9250929050565b803561ffff8116811461163457600080fd5b919050565b803560ff8116811461163457600080fd5b60006020828403121561165b578081fd5b813561166681611fbc565b9392505050565b60006020828403121561167e578081fd5b815161166681611fbc565b60008060006060848603121561169d578182fd5b83356116a881611fbc565b925060208401356116b881611fbc565b929592945050506040919091013590565b600080600080608085870312156116de578081fd5b84356116e981611fbc565b93506020858101356116fa81611fbc565b935060408601359250606086013567ffffffffffffffff8082111561171d578384fd5b818801915088601f830112611730578384fd5b81358181111561174257611742611fa6565b611754601f8201601f19168501611ef8565b91508082528984828501011115611769578485fd5b8084840185840137810190920192909252939692955090935050565b600080600080600080600060c0888a03121561179f578283fd5b87356117aa81611fbc565b965060208801356117ba81611fbc565b9550604088013594506117cf60608901611622565b93506117dd60808901611639565b925060a088013567ffffffffffffffff8111156117f8578283fd5b6118048a828b016115db565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b031215611832578081fd5b883561183d81611fbc565b9750602089013561184d81611fbc565b96506040890135955061186260608a01611622565b945061187060808a01611639565b935060a0890135925060c089013567ffffffffffffffff811115611892578182fd5b61189e8b828c016115db565b999c989b5096995094979396929594505050565b600080600080600080600060c0888a0312156118cc578283fd5b67ffffffffffffffff80893511156118e2578384fd5b883589018a601f8201126118f4578485fd5b80358281111561190657611906611fa6565b6020810261191660208201611ef8565b80838252602082019150602085018f602085880101111561193557898afd5b8995505b848610156119625761194b8135611fbc565b803583526001959095019460209283019201611939565b509b5050505060208a0135975061197d905060408a01611622565b955061198b60608a01611639565b94506080890135935060a0890135818111156119a5578384fd5b6119b18b828c016115db565b999c989b5096995094979396939450505050565b6000602082840312156119d6578081fd5b81518015158114611666578182fd5b6000602082840312156119f6578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251815b81811015611a475760208186018101518583015201611a2d565b81811115611a555782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038881168252871660208201526040810186905261ffff85166060820152600060018510611b0557634e487b7160e01b81526021600452602481fd5b84608083015260c060a0830152611b2060c0830184866119fd565b9998505050505050505050565b60006001600160a01b03808b168352808a1660208401525087604083015261ffff8716606083015260ff861660808301528460a083015260e060c0830152611b7960e0830184866119fd565b9a9950505050505050505050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60208082526011908201527f53686f756c642070617920696e20455448000000000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b6020808252601f908201527f41737365747320706172616d206c656e6774682073686f756c64206265203300604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611f1a57611f1a611fa6565b604052919050565b60008219821115611f3557611f35611f90565b500190565b600082611f5557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f7457611f74611f90565b500290565b600082821015611f8b57611f8b611f90565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611fd157600080fd5b5056fea26469706673582212205c709f97e12b734df5fb2b2ec81ae1f4011e383cf1cfad0c9d4894df8ec2fda964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyCoverByETH(address,address,uint256,uint16,uint8,uint256,bytes)": {
        "details": "User will buy product directly using his ETH"
      },
      "getProductPrice(address,address,uint256,uint16,uint8,bytes)": {
        "details": "return maxPriceWithFee value"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAsset(address,address,uint256)": {
        "details": "For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "distributor()": {
        "notice": "TODO if it is immutable?  "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4219,
        "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
        "label": "productIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1476_storage"
      },
      {
        "astId": 4223,
        "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4225,
        "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Counter)1476_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1475,
            "contract": "contracts/onchain/NexusMutualPolka.sol:NexusMutualPolka",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}