{
  "address": "0xC2bccEC5468042822d8CDD75913Edf0425253882",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CVR",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coverContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "productIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "BuyInsureAce",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "SetExchangeAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAsset",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CVR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "products",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "durationInDays",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "helperParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "securityParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "buyCoverByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "products",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "durationInDays",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "helperParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "securityParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "buyCoverByToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coverContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coverContractAddress",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaf87912900be1038ec42a5737ee8471e231cd351b1e9ed0976eb2eabd68919d4",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0xC2bccEC5468042822d8CDD75913Edf0425253882",
    "transactionIndex": 2,
    "gasUsed": "2036907",
    "logsBloom": "0x
    "blockHash": "0x003812553485007919aa151398b2355bbe1dbd6025d0aa67c84eb5dc5a1bd793",
    "transactionHash": "0xaf87912900be1038ec42a5737ee8471e231cd351b1e9ed0976eb2eabd68919d4",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9857999,
        "transactionHash": "0xaf87912900be1038ec42a5737ee8471e231cd351b1e9ed0976eb2eabd68919d4",
        "address": "0xC2bccEC5468042822d8CDD75913Edf0425253882",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x003812553485007919aa151398b2355bbe1dbd6025d0aa67c84eb5dc5a1bd793"
      }
    ],
    "blockNumber": 9857999,
    "cumulativeGasUsed": "2326960",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd3e48FAcD30A73609ffA60AE84851e72d10fEa52",
    "0x5640B69a5e1375a95e610052c5eedfea17675996",
    "0x0921f628b8463227615D2199D0D3860E4fBcD411"
  ],
  "solcInputHash": "72e708df0775b21f517637d69b302982",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CVR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"productIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyInsureAce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"SetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CVR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyCoverByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyCoverByToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyCoverByToken(uint16[],uint16[],uint256[],address,address,uint256,uint256,uint256[],uint256[],uint8[],bytes32[],bytes32[])\":{\"details\":\"Through this function, users can get covers from Insure by some tokens such as CVR... if users want to save gas fee, he shoud reach to this function through MultiSigWallet.\"},\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"params\":{\"functionSignature\":\"Signature of the actual function to be called via meta transaction\",\"sigR\":\"R part of the signature\",\"sigS\":\"S part of the signature\",\"sigV\":\"V part of the signature\",\"userAddress\":\"Address of user trying to do meta transaction\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAsset(address,address,uint256)\":{\"details\":\"For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"notice\":\"Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.\"}},\"notice\":\"We are supporting only CVR for InsureAce\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onchain/InsureAceCover.sol\":\"InsureAceCover\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x603946f0dc2541ff45f4b5cb1424ed1870eb24f3396cd318b1996e7e65278907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeAgent {\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _desiredAmount\\n    ) external returns (uint256);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function swapTokenWithETH(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n\\n    function swapTokenWithToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1aad6c6cae768a559b0c7ed1de81906e327e45f93a1f7a3bdc25c7323a959d0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IInsureAce.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IInsureAce {\\n    function getPremium(\\n        uint256[] memory products,\\n        uint256[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256[] memory rewardPercentages\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256[] memory\\n        );\\n\\n    function buyCover(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters,\\n        uint256[] memory securityParameters,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    ) external payable;\\n\\n    function unlockRewardByController(address owner, address to) external returns (uint256);\\n\\n    function getRewardAmount() external view returns (uint256);\\n\\n    function getCoverOwnerRewardAmount(uint256 premiumAmount2Insur, uint256 overwrittenRewardPctg)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getINSURRewardBalanceDetails() external view returns (uint256, uint256);\\n\\n    function removeINSURRewardBalance(address toAddress, uint256 amount) external;\\n\\n    function setBuyCoverMaxBlkNumLatency(uint256 numOfBlocks) external;\\n\\n    function setBuyCoverSigner(address signer, bool enabled) external;\\n\\n    function data() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3d43fe78b2a5fb29ea38d6432344e9de7a73edf0da1c2618b093f1035b40b3e8\",\"license\":\"GPL-3.0\"},\"contracts/libs/BasicMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract BasicMetaTransaction {\\r\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\r\\n\\r\\n    mapping(address => uint256) private nonces;\\r\\n\\r\\n    /**\\r\\n     * Main function to be called when user wants to execute meta transaction.\\r\\n     * The actual function to be called should be passed as param with name functionSignature\\r\\n     * Here the basic signature recovery is being used. Signature is expected to be generated using\\r\\n     * personal_sign method.\\r\\n     * @param userAddress Address of user trying to do meta transaction\\r\\n     * @param functionSignature Signature of the actual function to be called via meta transaction\\r\\n     * @param sigR R part of the signature\\r\\n     * @param sigS S part of the signature\\r\\n     * @param sigV V part of the signature\\r\\n     */\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public payable returns (bytes memory) {\\r\\n        require(\\r\\n            verify(userAddress, nonces[userAddress], block.chainid, functionSignature, sigR, sigS, sigV),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n        nonces[userAddress] += 1;\\r\\n\\r\\n        // Append userAddress at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\r\\n\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function getNonce(address user) external view returns (uint256 nonce) {\\r\\n        nonce = nonces[user];\\r\\n    }\\r\\n\\r\\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\\r\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address owner,\\r\\n        uint256 nonce,\\r\\n        uint256 chainID,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 hash = prefixed(keccak256(abi.encodePacked(nonce, this, chainID, functionSignature)));\\r\\n        address signer = ecrecover(hash, sigV, sigR, sigS);\\r\\n        require(signer != address(0), \\\"Invalid signature\\\");\\r\\n        return (owner == signer);\\r\\n    }\\r\\n\\r\\n    function msgSender() internal view returns (address sender) {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\r\\n            }\\r\\n        } else {\\r\\n            return msg.sender;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x039006f9bcbc41d558b9b397bf9e0649fc2a46b2c335a8f6066cb23605e43fdf\",\"license\":\"MIT\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/onchain/BaseCoverOnChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../libs/TransferHelper.sol\\\";\\r\\nimport \\\"../libs/BasicMetaTransaction.sol\\\";\\r\\n\\r\\ncontract BaseCoverOnChain is Ownable, BasicMetaTransaction {\\r\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\r\\n    event WithdrawAsset(address _user, address _to, address _token, uint256 _amount);\\r\\n    event SetExchangeAgent(address _setter, address _exchangeAgent);\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter public productIds;\\r\\n    mapping(address => bool) public availableCurrencies;\\r\\n\\r\\n    // address public immutable WETH;\\r\\n    address public exchangeAgent;\\r\\n\\r\\n    constructor(address _CVR, address _exchangeAgent) {\\r\\n        availableCurrencies[_CVR] = true;\\r\\n        exchangeAgent = _exchangeAgent;\\r\\n    }\\r\\n\\r\\n    modifier onlyAvailableToken(address _token) {\\r\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function addCurrency(address _currency) external onlyOwner {\\r\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\r\\n        availableCurrencies[_currency] = true;\\r\\n    }\\r\\n\\r\\n    function removeCurrency(address _currency) external onlyOwner {\\r\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\r\\n        availableCurrencies[_currency] = false;\\r\\n    }\\r\\n\\r\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\r\\n        require(_exchangeAgent != address(0), \\\"ZERO Address\\\");\\r\\n        exchangeAgent = _exchangeAgent;\\r\\n        emit SetExchangeAgent(msg.sender, _exchangeAgent);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev For reflect tokens, we should deposit some tokens at contract directly,\\r\\n     * We will withdraw tokens deposited at contract through this function\\r\\n     */\\r\\n    function withdrawAsset(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        TransferHelper.safeTransfer(_token, _to, _amount);\\r\\n        WithdrawAsset(msgSender(), _to, _token, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd0aa1a4e50df71a690565303256f883f3701d06de43e66d89779f1221ca40f4\",\"license\":\"MIT\"},\"contracts/onchain/InsureAceCover.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\r\\nimport {IInsureAce} from \\\"../interfaces/IInsureAce.sol\\\";\\r\\nimport \\\"./BaseCoverOnChain.sol\\\";\\r\\n\\r\\n/**\\r\\n * We are supporting only CVR for InsureAce\\r\\n */\\r\\ncontract InsureAceCover is BaseCoverOnChain {\\r\\n    event BuyInsureAce(uint16[] productIds, address _buyer, address _currency, address _token, uint256 _amount);\\r\\n\\r\\n    address public coverContractAddress;\\r\\n    // This is the WETH address of InsureAce smart contract\\r\\n    address public constant WETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n    address public immutable CVR;\\r\\n\\r\\n    constructor(\\r\\n        address _CVR,\\r\\n        address _exchangeAgent,\\r\\n        address _coverContractAddress\\r\\n    ) BaseCoverOnChain(_CVR, _exchangeAgent) {\\r\\n        require(_coverContractAddress != address(0), \\\"S:1\\\");\\r\\n        CVR = _CVR;\\r\\n        coverContractAddress = _coverContractAddress;\\r\\n    }\\r\\n\\r\\n    function setup(address _coverContractAddress) external onlyOwner {\\r\\n        require(_coverContractAddress != address(0), \\\"S:1\\\");\\r\\n        coverContractAddress = _coverContractAddress;\\r\\n    }\\r\\n\\r\\n    function buyCoverByETH(\\r\\n        uint16[] memory products,\\r\\n        uint16[] memory durationInDays,\\r\\n        uint256[] memory amounts,\\r\\n        address currency,\\r\\n        uint256 referralCode,\\r\\n        uint256 premiumAmount,\\r\\n        uint256[] memory helperParameters,\\r\\n        uint256[] memory securityParameters,\\r\\n        uint8[] memory v,\\r\\n        bytes32[] memory r,\\r\\n        bytes32[] memory s\\r\\n    ) external payable {\\r\\n        require(currency == WETH, \\\"Not ETH product\\\");\\r\\n        require(msg.value >= premiumAmount, \\\"Insufficient amount\\\");\\r\\n        if (msg.value - premiumAmount > 0) {\\r\\n            TransferHelper.safeTransferETH(msgSender(), msg.value - premiumAmount);\\r\\n        }\\r\\n\\r\\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\\r\\n            products,\\r\\n            durationInDays,\\r\\n            amounts,\\r\\n            currency,\\r\\n            msgSender(),\\r\\n            referralCode,\\r\\n            premiumAmount,\\r\\n            helperParameters,\\r\\n            securityParameters,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n\\r\\n        emit BuyInsureAce(products, msgSender(), currency, currency, premiumAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Through this function, users can get covers from Insure by some tokens such as CVR...\\r\\n     * if users want to save gas fee, he shoud reach to this function through MultiSigWallet.\\r\\n     */\\r\\n    function buyCoverByToken(\\r\\n        uint16[] memory products,\\r\\n        uint16[] memory durationInDays,\\r\\n        uint256[] memory amounts,\\r\\n        address currency,\\r\\n        address _token,\\r\\n        uint256 referralCode,\\r\\n        uint256 premiumAmount,\\r\\n        uint256[] memory helperParameters,\\r\\n        uint256[] memory securityParameters,\\r\\n        uint8[] memory v,\\r\\n        bytes32[] memory r,\\r\\n        bytes32[] memory s\\r\\n    ) external payable {\\r\\n        uint256 amount;\\r\\n        if (currency == WETH) {\\r\\n            amount = IExchangeAgent(exchangeAgent).getTokenAmountForETH(_token, premiumAmount);\\r\\n        } else {\\r\\n            amount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(_token, currency, premiumAmount);\\r\\n        }\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_token, msgSender(), address(this), amount);\\r\\n        TransferHelper.safeApprove(_token, exchangeAgent, amount);\\r\\n\\r\\n        if (currency == WETH) {\\r\\n            IExchangeAgent(exchangeAgent).swapTokenWithETH(_token, amount, premiumAmount);\\r\\n        } else {\\r\\n            IExchangeAgent(exchangeAgent).swapTokenWithToken(_token, currency, amount, premiumAmount);\\r\\n            TransferHelper.safeApprove(currency, coverContractAddress, premiumAmount);\\r\\n        }\\r\\n\\r\\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\\r\\n            products,\\r\\n            durationInDays,\\r\\n            amounts,\\r\\n            currency,\\r\\n            msgSender(),\\r\\n            referralCode,\\r\\n            premiumAmount,\\r\\n            helperParameters,\\r\\n            securityParameters,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n\\r\\n        emit BuyInsureAce(products, msgSender(), currency, _token, premiumAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfff2640899c1923777134be8daa803d9a04f7ddb404a8f15b97d0ab1d9e0e15d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620023f1380380620023f183398101604081905262000034916200014d565b82826000620000426200012c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b039182166000908152600360205260409020805460ff19166001179055600480549183166001600160a01b03199092169190911790558116620000f35760405162461bcd60e51b8152600401620000ea9062000196565b60405180910390fd5b60609290921b6001600160601b03191660805250600580546001600160a01b0319166001600160a01b03909216919091179055620001b3565b3390565b80516001600160a01b03811681146200014857600080fd5b919050565b60008060006060848603121562000162578283fd5b6200016d8462000130565b92506200017d6020850162000130565b91506200018d6040850162000130565b90509250925092565b602080825260039082015262533a3160e81b604082015260600190565b60805160601c61221f620001d26000396000610d78015261221f6000f3fe6080604052600436106101185760003560e01c80638ab234b6116100a0578063b7160dee11610064578063b7160dee146102d0578063c5d3a107146102e5578063d5f4479c14610305578063d9203b911461031a578063f2fde38b1461032f5761011f565b80638ab234b6146102515780638da5cb5b1461027157806393a32fb114610293578063aa57511d146102a6578063ad5c4648146102bb5761011f565b80632d0335ab116100e75780632d0335ab146101bc5780634a3afe70146101e95780636281133d146101fc57806366d382031461021c578063715018a61461023c5761011f565b8063092ae4dc146101245780630c53c51c1461014657806318a00d8e1461016f5780631af42c0f1461018f5761011f565b3661011f57005b600080fd5b34801561013057600080fd5b5061014461013f3660046114e2565b61034f565b005b61015961015436600461151d565b6103eb565b6040516101669190611d59565b60405180910390f35b34801561017b57600080fd5b5061014461018a3660046114c1565b610541565b34801561019b57600080fd5b506101af6101aa3660046114c1565b6105fe565b6040516101669190611d30565b3480156101c857600080fd5b506101dc6101d73660046114c1565b610613565b6040516101669190612107565b6101446101f73660046117be565b61062e565b34801561020857600080fd5b506101af61021736600461158d565b610787565b34801561022857600080fd5b506101446102373660046114c1565b610857565b34801561024857600080fd5b506101446108de565b34801561025d57600080fd5b5061014461026c3660046114c1565b610967565b34801561027d57600080fd5b50610286610a03565b6040516101669190611aff565b6101446102a1366004611610565b610a13565b3480156102b257600080fd5b506101dc610d58565b3480156102c757600080fd5b50610286610d5e565b3480156102dc57600080fd5b50610286610d76565b3480156102f157600080fd5b506101446103003660046114c1565b610d9a565b34801561031157600080fd5b50610286610e32565b34801561032657600080fd5b50610286610e41565b34801561033b57600080fd5b5061014461034a3660046114c1565b610e50565b610357610f10565b6001600160a01b0316610368610a03565b6001600160a01b0316146103975760405162461bcd60e51b815260040161038e90611f65565b60405180910390fd5b6103a2838383610f14565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf246103cb611001565b8385846040516103de9493929190611b62565b60405180910390a1505050565b6001600160a01b0385166000908152600160205260409020546060906104179087904688888888610787565b6104335760405162461bcd60e51b815260040161038e90611fd1565b6001600160a01b0386166000908152600160208190526040822080549192909161045e90849061215e565b90915550506040516000908190309061047d9089908b90602001611a51565b60408051601f198184030181529082905261049791611a35565b6000604051808303816000865af19150503d80600081146104d4576040519150601f19603f3d011682016040523d82523d6000602084013e6104d9565b606091505b5091509150816104fb5760405162461bcd60e51b815260040161038e90611db2565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b88338960405161052e93929190611b2d565b60405180910390a1979650505050505050565b610549610f10565b6001600160a01b031661055a610a03565b6001600160a01b0316146105805760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b0381166105a65760405162461bcd60e51b815260040161038e90612094565b600480546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb6906105f39033908490611b13565b60405180910390a150565b60036020526000908152604090205460ff1681565b6001600160a01b031660009081526001602052604090205490565b6001600160a01b03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461066a5760405162461bcd60e51b815260040161038e90611f11565b8534101561068a5760405162461bcd60e51b815260040161038e9061205d565b60006106968734612176565b11156106b6576106b66106a7611001565b6106b18834612176565b61105f565b6005546001600160a01b031663ddeb2d4e878d8d8d8d6106d4611001565b8e8e8e8e8e8e8e6040518e63ffffffff1660e01b81526004016107029c9b9a99989796959493929190611c54565b6000604051808303818588803b15801561071b57600080fd5b505af115801561072f573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8b61075e611001565b8a8b8a604051610772959493929190611c13565b60405180910390a15050505050505050505050565b6000806107bf883089896040516020016107a49493929190611ab9565b604051602081830303815290604052805190602001206110f1565b90506000600182858888604051600081526020016040526040516107e69493929190611d3b565b6020604051602081039080840390855afa158015610808573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661083b5760405162461bcd60e51b815260040161038e90611ea3565b6001600160a01b038a8116911614915050979650505050505050565b61085f610f10565b6001600160a01b0316610870610a03565b6001600160a01b0316146108965760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b0381166108bc5760405162461bcd60e51b815260040161038e90611f48565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6108e6610f10565b6001600160a01b03166108f7610a03565b6001600160a01b03161461091d5760405162461bcd60e51b815260040161038e90611f65565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61096f610f10565b6001600160a01b0316610980610a03565b6001600160a01b0316146109a65760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b03811660009081526003602052604090205460ff16156109df5760405162461bcd60e51b815260040161038e90611eda565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b6000546001600160a01b03165b90565b60006001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610ac4576004805460405163ba560ed960e01b81526001600160a01b039091169163ba560ed991610a6b918d918c9101611bd9565b602060405180830381600087803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abd9190611945565b9050610b4c565b60048054604051631a44cdf360e11b81526001600160a01b03909116916334899be691610af7918d918f918d9101611b8c565b602060405180830381600087803b158015610b1157600080fd5b505af1158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b499190611945565b90505b610b5f89610b58611001565b3084611122565b600454610b77908a906001600160a01b031683611212565b6001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610c0657600480546040516303790ccd60e21b81526001600160a01b0390911691630de4333491610bcf918d9186918d9101611bf2565b600060405180830381600087803b158015610be957600080fd5b505af1158015610bfd573d6000803e3d6000fd5b50505050610c85565b6004805460405163406e622b60e11b81526001600160a01b03909116916380dcc45691610c3b918d918f9187918e9101611bb0565b600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b5050600554610c8592508c91506001600160a01b031689611212565b6005546001600160a01b031663ddeb2d4e888f8f8f8f610ca3611001565b8f8f8f8f8f8f8f6040518e63ffffffff1660e01b8152600401610cd19c9b9a99989796959493929190611c54565b6000604051808303818588803b158015610cea57600080fd5b505af1158015610cfe573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8d610d2d611001565b8c8c8b604051610d41959493929190611c13565b60405180910390a150505050505050505050505050565b60025481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b7f000000000000000000000000000000000000000000000000000000000000000081565b610da2610f10565b6001600160a01b0316610db3610a03565b6001600160a01b031614610dd95760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b03811660009081526003602052604090205460ff16610e115760405162461bcd60e51b815260040161038e90611f9a565b6001600160a01b03166000908152600360205260409020805460ff19169055565b6005546001600160a01b031681565b6004546001600160a01b031681565b610e58610f10565b6001600160a01b0316610e69610a03565b6001600160a01b031614610e8f5760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b038116610eb55760405162461bcd60e51b815260040161038e90611d6c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600080846001600160a01b031663a9059cbb8585604051602401610f39929190611bd9565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610f729190611a35565b6000604051808303816000865af19150503d8060008114610faf576040519150601f19603f3d011682016040523d82523d6000602084013e610fb4565b606091505b5091509150818015610fde575080511580610fde575080806020019051810190610fde9190611925565b610ffa5760405162461bcd60e51b815260040161038e906120ba565b5050505050565b60003330141561105857600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610a109050565b5033610a10565b604080516000808252602082019092526001600160a01b0384169083906040516110899190611a35565b60006040518083038185875af1925050503d80600081146110c6576040519150601f19603f3d011682016040523d82523d6000602084013e6110cb565b606091505b50509050806110ec5760405162461bcd60e51b815260040161038e90611e46565b505050565b6000816040516020016111049190611a88565b6040516020818303038152906040528051906020012090505b919050565b600080856001600160a01b03166323b872dd86868660405160240161114993929190611b8c565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516111829190611a35565b6000604051808303816000865af19150503d80600081146111bf576040519150601f19603f3d011682016040523d82523d6000602084013e6111c4565b606091505b50915091508180156111ee5750805115806111ee5750808060200190518101906111ee9190611925565b61120a5760405162461bcd60e51b815260040161038e90611de9565b505050505050565b600080846001600160a01b031663095ea7b38585604051602401611237929190611bd9565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516112709190611a35565b6000604051808303816000865af19150503d80600081146112ad576040519150601f19603f3d011682016040523d82523d6000602084013e6112b2565b606091505b50915091508180156112dc5750805115806112dc5750808060200190518101906112dc9190611925565b610ffa5760405162461bcd60e51b815260040161038e90612012565b80356001600160a01b038116811461111d57600080fd5b600082601f83011261131f578081fd5b8135602061133461132f8361213a565b612110565b8281528181019085830183850287018401881015611350578586fd5b855b8581101561136e57813584529284019290840190600101611352565b5090979650505050505050565b600082601f83011261138b578081fd5b8135602061139b61132f8361213a565b82815281810190858301838502870184018810156113b7578586fd5b855b8581101561136e57813561ffff811681146113d2578788fd5b845292840192908401906001016113b9565b600082601f8301126113f4578081fd5b8135602061140461132f8361213a565b8281528181019085830183850287018401881015611420578586fd5b855b8581101561136e57611433826114b0565b84529284019290840190600101611422565b600082601f830112611455578081fd5b813567ffffffffffffffff81111561146f5761146f6121d3565b611482601f8201601f1916602001612110565b818152846020838601011115611496578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461111d57600080fd5b6000602082840312156114d2578081fd5b6114db826112f8565b9392505050565b6000806000606084860312156114f6578182fd5b6114ff846112f8565b925061150d602085016112f8565b9150604084013590509250925092565b600080600080600060a08688031215611534578081fd5b61153d866112f8565b9450602086013567ffffffffffffffff811115611558578182fd5b61156488828901611445565b9450506040860135925060608601359150611581608087016114b0565b90509295509295909350565b600080600080600080600060e0888a0312156115a7578182fd5b6115b0886112f8565b96506020880135955060408801359450606088013567ffffffffffffffff8111156115d9578283fd5b6115e58a828b01611445565b9450506080880135925060a0880135915061160260c089016114b0565b905092959891949750929550565b6000806000806000806000806000806000806101808d8f031215611632578586fd5b67ffffffffffffffff8d351115611647578586fd5b6116548e8e358f0161137b565b9b5067ffffffffffffffff60208e0135111561166e578586fd5b61167e8e60208f01358f0161137b565b9a5067ffffffffffffffff60408e01351115611698578586fd5b6116a88e60408f01358f0161130f565b99506116b660608e016112f8565b98506116c460808e016112f8565b975060a08d0135965060c08d0135955067ffffffffffffffff60e08e013511156116ec578485fd5b6116fc8e60e08f01358f0161130f565b945067ffffffffffffffff6101008e01351115611717578384fd5b6117288e6101008f01358f0161130f565b935067ffffffffffffffff6101208e01351115611743578283fd5b6117548e6101208f01358f016113e4565b925067ffffffffffffffff6101408e0135111561176f578081fd5b6117808e6101408f01358f0161130f565b915067ffffffffffffffff6101608e0135111561179b578081fd5b6117ac8e6101608f01358f0161130f565b90509295989b509295989b509295989b565b60008060008060008060008060008060006101608c8e0312156117df578485fd5b67ffffffffffffffff808d3511156117f5578586fd5b6118028e8e358f0161137b565b9b508060208e01351115611814578586fd5b6118248e60208f01358f0161137b565b9a508060408e01351115611836578586fd5b6118468e60408f01358f0161130f565b995061185460608e016112f8565b985060808d0135975060a08d013596508060c08e01351115611874578586fd5b6118848e60c08f01358f0161130f565b95508060e08e01351115611896578485fd5b6118a68e60e08f01358f0161130f565b9450806101008e013511156118b9578182fd5b6118ca8e6101008f01358f016113e4565b9350806101208e013511156118dd578182fd5b6118ee8e6101208f01358f0161130f565b9250806101408e01351115611901578182fd5b506119138d6101408e01358e0161130f565b90509295989b509295989b9093969950565b600060208284031215611936578081fd5b815180151581146114db578182fd5b600060208284031215611956578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156119995781518752958201959082019060010161197d565b509495945050505050565b6000815180845260208085019450808401835b8381101561199957815161ffff16875295820195908201906001016119b7565b6000815180845260208085019450808401835b8381101561199957815160ff16875295820195908201906001016119ea565b60008151808452611a2181602086016020860161218d565b601f01601f19169290920160200192915050565b60008251611a4781846020870161218d565b9190910192915050565b60008351611a6381846020880161218d565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60008582526bffffffffffffffffffffffff198560601b1660208301528360348301528251611aef81605485016020870161218d565b9190910160540195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b03808616835280851660208401525060606040830152611b596060830184611a09565b95945050505050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060a08252611c2660a08301886119a4565b6001600160a01b03968716602084015294861660408301525091909316606082015260800191909152919050565b60006101808252611c6961018083018f6119a4565b8281036020840152611c7b818f6119a4565b90508281036040840152611c8f818e61196a565b9050611c9e606084018d61195d565b611cab608084018c61195d565b8960a08401528860c084015282810360e0840152611cc9818961196a565b9050828103610100840152611cde818861196a565b9050828103610120840152611cf381876119d7565b9050828103610140840152611d08818661196a565b9050828103610160840152611d1d818561196a565b9f9e505050505050505050505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526114db6020830184611a09565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f496e76616c6964207369676e6174757265000000000000000000000000000000604082015260600190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e6f74204554482070726f647563740000000000000000000000000000000000604082015260600190565b602080825260039082015262533a3160e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612132576121326121d3565b604052919050565b600067ffffffffffffffff821115612154576121546121d3565b5060209081020190565b60008219821115612171576121716121bd565b500190565b600082821015612188576121886121bd565b500390565b60005b838110156121a8578181015183820152602001612190565b838111156121b7576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212202d0cec81a13db7d1e575264d982efa131960979602b6504797acc6fa127f14e264736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c80638ab234b6116100a0578063b7160dee11610064578063b7160dee146102d0578063c5d3a107146102e5578063d5f4479c14610305578063d9203b911461031a578063f2fde38b1461032f5761011f565b80638ab234b6146102515780638da5cb5b1461027157806393a32fb114610293578063aa57511d146102a6578063ad5c4648146102bb5761011f565b80632d0335ab116100e75780632d0335ab146101bc5780634a3afe70146101e95780636281133d146101fc57806366d382031461021c578063715018a61461023c5761011f565b8063092ae4dc146101245780630c53c51c1461014657806318a00d8e1461016f5780631af42c0f1461018f5761011f565b3661011f57005b600080fd5b34801561013057600080fd5b5061014461013f3660046114e2565b61034f565b005b61015961015436600461151d565b6103eb565b6040516101669190611d59565b60405180910390f35b34801561017b57600080fd5b5061014461018a3660046114c1565b610541565b34801561019b57600080fd5b506101af6101aa3660046114c1565b6105fe565b6040516101669190611d30565b3480156101c857600080fd5b506101dc6101d73660046114c1565b610613565b6040516101669190612107565b6101446101f73660046117be565b61062e565b34801561020857600080fd5b506101af61021736600461158d565b610787565b34801561022857600080fd5b506101446102373660046114c1565b610857565b34801561024857600080fd5b506101446108de565b34801561025d57600080fd5b5061014461026c3660046114c1565b610967565b34801561027d57600080fd5b50610286610a03565b6040516101669190611aff565b6101446102a1366004611610565b610a13565b3480156102b257600080fd5b506101dc610d58565b3480156102c757600080fd5b50610286610d5e565b3480156102dc57600080fd5b50610286610d76565b3480156102f157600080fd5b506101446103003660046114c1565b610d9a565b34801561031157600080fd5b50610286610e32565b34801561032657600080fd5b50610286610e41565b34801561033b57600080fd5b5061014461034a3660046114c1565b610e50565b610357610f10565b6001600160a01b0316610368610a03565b6001600160a01b0316146103975760405162461bcd60e51b815260040161038e90611f65565b60405180910390fd5b6103a2838383610f14565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf246103cb611001565b8385846040516103de9493929190611b62565b60405180910390a1505050565b6001600160a01b0385166000908152600160205260409020546060906104179087904688888888610787565b6104335760405162461bcd60e51b815260040161038e90611fd1565b6001600160a01b0386166000908152600160208190526040822080549192909161045e90849061215e565b90915550506040516000908190309061047d9089908b90602001611a51565b60408051601f198184030181529082905261049791611a35565b6000604051808303816000865af19150503d80600081146104d4576040519150601f19603f3d011682016040523d82523d6000602084013e6104d9565b606091505b5091509150816104fb5760405162461bcd60e51b815260040161038e90611db2565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b88338960405161052e93929190611b2d565b60405180910390a1979650505050505050565b610549610f10565b6001600160a01b031661055a610a03565b6001600160a01b0316146105805760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b0381166105a65760405162461bcd60e51b815260040161038e90612094565b600480546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb6906105f39033908490611b13565b60405180910390a150565b60036020526000908152604090205460ff1681565b6001600160a01b031660009081526001602052604090205490565b6001600160a01b03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461066a5760405162461bcd60e51b815260040161038e90611f11565b8534101561068a5760405162461bcd60e51b815260040161038e9061205d565b60006106968734612176565b11156106b6576106b66106a7611001565b6106b18834612176565b61105f565b6005546001600160a01b031663ddeb2d4e878d8d8d8d6106d4611001565b8e8e8e8e8e8e8e6040518e63ffffffff1660e01b81526004016107029c9b9a99989796959493929190611c54565b6000604051808303818588803b15801561071b57600080fd5b505af115801561072f573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8b61075e611001565b8a8b8a604051610772959493929190611c13565b60405180910390a15050505050505050505050565b6000806107bf883089896040516020016107a49493929190611ab9565b604051602081830303815290604052805190602001206110f1565b90506000600182858888604051600081526020016040526040516107e69493929190611d3b565b6020604051602081039080840390855afa158015610808573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661083b5760405162461bcd60e51b815260040161038e90611ea3565b6001600160a01b038a8116911614915050979650505050505050565b61085f610f10565b6001600160a01b0316610870610a03565b6001600160a01b0316146108965760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b0381166108bc5760405162461bcd60e51b815260040161038e90611f48565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6108e6610f10565b6001600160a01b03166108f7610a03565b6001600160a01b03161461091d5760405162461bcd60e51b815260040161038e90611f65565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61096f610f10565b6001600160a01b0316610980610a03565b6001600160a01b0316146109a65760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b03811660009081526003602052604090205460ff16156109df5760405162461bcd60e51b815260040161038e90611eda565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b6000546001600160a01b03165b90565b60006001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610ac4576004805460405163ba560ed960e01b81526001600160a01b039091169163ba560ed991610a6b918d918c9101611bd9565b602060405180830381600087803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abd9190611945565b9050610b4c565b60048054604051631a44cdf360e11b81526001600160a01b03909116916334899be691610af7918d918f918d9101611b8c565b602060405180830381600087803b158015610b1157600080fd5b505af1158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b499190611945565b90505b610b5f89610b58611001565b3084611122565b600454610b77908a906001600160a01b031683611212565b6001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610c0657600480546040516303790ccd60e21b81526001600160a01b0390911691630de4333491610bcf918d9186918d9101611bf2565b600060405180830381600087803b158015610be957600080fd5b505af1158015610bfd573d6000803e3d6000fd5b50505050610c85565b6004805460405163406e622b60e11b81526001600160a01b03909116916380dcc45691610c3b918d918f9187918e9101611bb0565b600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b5050600554610c8592508c91506001600160a01b031689611212565b6005546001600160a01b031663ddeb2d4e888f8f8f8f610ca3611001565b8f8f8f8f8f8f8f6040518e63ffffffff1660e01b8152600401610cd19c9b9a99989796959493929190611c54565b6000604051808303818588803b158015610cea57600080fd5b505af1158015610cfe573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8d610d2d611001565b8c8c8b604051610d41959493929190611c13565b60405180910390a150505050505050505050505050565b60025481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b7f000000000000000000000000000000000000000000000000000000000000000081565b610da2610f10565b6001600160a01b0316610db3610a03565b6001600160a01b031614610dd95760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b03811660009081526003602052604090205460ff16610e115760405162461bcd60e51b815260040161038e90611f9a565b6001600160a01b03166000908152600360205260409020805460ff19169055565b6005546001600160a01b031681565b6004546001600160a01b031681565b610e58610f10565b6001600160a01b0316610e69610a03565b6001600160a01b031614610e8f5760405162461bcd60e51b815260040161038e90611f65565b6001600160a01b038116610eb55760405162461bcd60e51b815260040161038e90611d6c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600080846001600160a01b031663a9059cbb8585604051602401610f39929190611bd9565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610f729190611a35565b6000604051808303816000865af19150503d8060008114610faf576040519150601f19603f3d011682016040523d82523d6000602084013e610fb4565b606091505b5091509150818015610fde575080511580610fde575080806020019051810190610fde9190611925565b610ffa5760405162461bcd60e51b815260040161038e906120ba565b5050505050565b60003330141561105857600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610a109050565b5033610a10565b604080516000808252602082019092526001600160a01b0384169083906040516110899190611a35565b60006040518083038185875af1925050503d80600081146110c6576040519150601f19603f3d011682016040523d82523d6000602084013e6110cb565b606091505b50509050806110ec5760405162461bcd60e51b815260040161038e90611e46565b505050565b6000816040516020016111049190611a88565b6040516020818303038152906040528051906020012090505b919050565b600080856001600160a01b03166323b872dd86868660405160240161114993929190611b8c565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516111829190611a35565b6000604051808303816000865af19150503d80600081146111bf576040519150601f19603f3d011682016040523d82523d6000602084013e6111c4565b606091505b50915091508180156111ee5750805115806111ee5750808060200190518101906111ee9190611925565b61120a5760405162461bcd60e51b815260040161038e90611de9565b505050505050565b600080846001600160a01b031663095ea7b38585604051602401611237929190611bd9565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516112709190611a35565b6000604051808303816000865af19150503d80600081146112ad576040519150601f19603f3d011682016040523d82523d6000602084013e6112b2565b606091505b50915091508180156112dc5750805115806112dc5750808060200190518101906112dc9190611925565b610ffa5760405162461bcd60e51b815260040161038e90612012565b80356001600160a01b038116811461111d57600080fd5b600082601f83011261131f578081fd5b8135602061133461132f8361213a565b612110565b8281528181019085830183850287018401881015611350578586fd5b855b8581101561136e57813584529284019290840190600101611352565b5090979650505050505050565b600082601f83011261138b578081fd5b8135602061139b61132f8361213a565b82815281810190858301838502870184018810156113b7578586fd5b855b8581101561136e57813561ffff811681146113d2578788fd5b845292840192908401906001016113b9565b600082601f8301126113f4578081fd5b8135602061140461132f8361213a565b8281528181019085830183850287018401881015611420578586fd5b855b8581101561136e57611433826114b0565b84529284019290840190600101611422565b600082601f830112611455578081fd5b813567ffffffffffffffff81111561146f5761146f6121d3565b611482601f8201601f1916602001612110565b818152846020838601011115611496578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461111d57600080fd5b6000602082840312156114d2578081fd5b6114db826112f8565b9392505050565b6000806000606084860312156114f6578182fd5b6114ff846112f8565b925061150d602085016112f8565b9150604084013590509250925092565b600080600080600060a08688031215611534578081fd5b61153d866112f8565b9450602086013567ffffffffffffffff811115611558578182fd5b61156488828901611445565b9450506040860135925060608601359150611581608087016114b0565b90509295509295909350565b600080600080600080600060e0888a0312156115a7578182fd5b6115b0886112f8565b96506020880135955060408801359450606088013567ffffffffffffffff8111156115d9578283fd5b6115e58a828b01611445565b9450506080880135925060a0880135915061160260c089016114b0565b905092959891949750929550565b6000806000806000806000806000806000806101808d8f031215611632578586fd5b67ffffffffffffffff8d351115611647578586fd5b6116548e8e358f0161137b565b9b5067ffffffffffffffff60208e0135111561166e578586fd5b61167e8e60208f01358f0161137b565b9a5067ffffffffffffffff60408e01351115611698578586fd5b6116a88e60408f01358f0161130f565b99506116b660608e016112f8565b98506116c460808e016112f8565b975060a08d0135965060c08d0135955067ffffffffffffffff60e08e013511156116ec578485fd5b6116fc8e60e08f01358f0161130f565b945067ffffffffffffffff6101008e01351115611717578384fd5b6117288e6101008f01358f0161130f565b935067ffffffffffffffff6101208e01351115611743578283fd5b6117548e6101208f01358f016113e4565b925067ffffffffffffffff6101408e0135111561176f578081fd5b6117808e6101408f01358f0161130f565b915067ffffffffffffffff6101608e0135111561179b578081fd5b6117ac8e6101608f01358f0161130f565b90509295989b509295989b509295989b565b60008060008060008060008060008060006101608c8e0312156117df578485fd5b67ffffffffffffffff808d3511156117f5578586fd5b6118028e8e358f0161137b565b9b508060208e01351115611814578586fd5b6118248e60208f01358f0161137b565b9a508060408e01351115611836578586fd5b6118468e60408f01358f0161130f565b995061185460608e016112f8565b985060808d0135975060a08d013596508060c08e01351115611874578586fd5b6118848e60c08f01358f0161130f565b95508060e08e01351115611896578485fd5b6118a68e60e08f01358f0161130f565b9450806101008e013511156118b9578182fd5b6118ca8e6101008f01358f016113e4565b9350806101208e013511156118dd578182fd5b6118ee8e6101208f01358f0161130f565b9250806101408e01351115611901578182fd5b506119138d6101408e01358e0161130f565b90509295989b509295989b9093969950565b600060208284031215611936578081fd5b815180151581146114db578182fd5b600060208284031215611956578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156119995781518752958201959082019060010161197d565b509495945050505050565b6000815180845260208085019450808401835b8381101561199957815161ffff16875295820195908201906001016119b7565b6000815180845260208085019450808401835b8381101561199957815160ff16875295820195908201906001016119ea565b60008151808452611a2181602086016020860161218d565b601f01601f19169290920160200192915050565b60008251611a4781846020870161218d565b9190910192915050565b60008351611a6381846020880161218d565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60008582526bffffffffffffffffffffffff198560601b1660208301528360348301528251611aef81605485016020870161218d565b9190910160540195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b03808616835280851660208401525060606040830152611b596060830184611a09565b95945050505050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060a08252611c2660a08301886119a4565b6001600160a01b03968716602084015294861660408301525091909316606082015260800191909152919050565b60006101808252611c6961018083018f6119a4565b8281036020840152611c7b818f6119a4565b90508281036040840152611c8f818e61196a565b9050611c9e606084018d61195d565b611cab608084018c61195d565b8960a08401528860c084015282810360e0840152611cc9818961196a565b9050828103610100840152611cde818861196a565b9050828103610120840152611cf381876119d7565b9050828103610140840152611d08818661196a565b9050828103610160840152611d1d818561196a565b9f9e505050505050505050505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526114db6020830184611a09565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f496e76616c6964207369676e6174757265000000000000000000000000000000604082015260600190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e6f74204554482070726f647563740000000000000000000000000000000000604082015260600190565b602080825260039082015262533a3160e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612132576121326121d3565b604052919050565b600067ffffffffffffffff821115612154576121546121d3565b5060209081020190565b60008219821115612171576121716121bd565b500190565b600082821015612188576121886121bd565b500390565b60005b838110156121a8578181015183820152602001612190565b838111156121b7576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212202d0cec81a13db7d1e575264d982efa131960979602b6504797acc6fa127f14e264736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyCoverByToken(uint16[],uint16[],uint256[],address,address,uint256,uint256,uint256[],uint256[],uint8[],bytes32[],bytes32[])": {
        "details": "Through this function, users can get covers from Insure by some tokens such as CVR... if users want to save gas fee, he shoud reach to this function through MultiSigWallet."
      },
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "params": {
          "functionSignature": "Signature of the actual function to be called via meta transaction",
          "sigR": "R part of the signature",
          "sigS": "S part of the signature",
          "sigV": "V part of the signature",
          "userAddress": "Address of user trying to do meta transaction"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAsset(address,address,uint256)": {
        "details": "For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "notice": "Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method."
      }
    },
    "notice": "We are supporting only CVR for InsureAce",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2543,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4535,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "productIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1476_storage"
      },
      {
        "astId": 4539,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4541,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4703,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "coverContractAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)1476_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1475,
            "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}