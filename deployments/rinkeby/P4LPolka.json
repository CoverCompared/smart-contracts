{
  "address": "0x9eDe625814EE1d422Bab6Ec0089bb590Efb5C639",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_priceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BuyP4L",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "SetExchangeAgent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_device",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_brand",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_purchMonth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durPlan",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "buyProductByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_device",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_brand",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_purchMonth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durPlan",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "buyProductByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prodId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_idx",
          "type": "uint64"
        }
      ],
      "name": "productOf",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceInUSD",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "durPlan",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "purchMonth",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "device",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "brand",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9aed20b9bbbf56f2acc25eeaa589a993e45f336df5025dbdc4a20e8dabe8318f",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x9eDe625814EE1d422Bab6Ec0089bb590Efb5C639",
    "transactionIndex": 1,
    "gasUsed": "1686955",
    "logsBloom": "0x
    "blockHash": "0x1ad7a8aad4b709dc5835bb606f229ac452ba8f80c12063c959f15181d8b799ca",
    "transactionHash": "0x9aed20b9bbbf56f2acc25eeaa589a993e45f336df5025dbdc4a20e8dabe8318f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9710577,
        "transactionHash": "0x9aed20b9bbbf56f2acc25eeaa589a993e45f336df5025dbdc4a20e8dabe8318f",
        "address": "0x9eDe625814EE1d422Bab6Ec0089bb590Efb5C639",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1ad7a8aad4b709dc5835bb606f229ac452ba8f80c12063c959f15181d8b799ca"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 9710577,
        "transactionHash": "0x9aed20b9bbbf56f2acc25eeaa589a993e45f336df5025dbdc4a20e8dabe8318f",
        "address": "0x9eDe625814EE1d422Bab6Ec0089bb590Efb5C639",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b",
          "0x000000000000000000000000c31f8d97b0b9fcd8a30f9aa906335dccdba99bd5"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x1ad7a8aad4b709dc5835bb606f229ac452ba8f80c12063c959f15181d8b799ca"
      }
    ],
    "blockNumber": 9710577,
    "cumulativeGasUsed": "1708979",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc778417e063141139fce010982780140aa0cd5ab",
    "0x1eEF7bF547aC2EFeFd2B0582d208Bef5ae0d92d6",
    "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "0xC31F8d97B0B9fcD8A30F9AA906335dCCdba99bD5"
  ],
  "solcInputHash": "b9f5be885696f0e623502845256d15e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BuyP4L\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"SetExchangeAgent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_device\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_brand\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_purchMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durPlan\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"buyProductByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_device\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_brand\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_purchMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durPlan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"buyProductByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prodId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_idx\",\"type\":\"uint64\"}],\"name\":\"productOf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceInUSD\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"durPlan\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"purchMonth\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"device\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"brand\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyProductByETH(string,string,uint256,uint256,uint256,bytes)\":{\"details\":\"buyProductETH function: this function should be called from user directly\"},\"buyProductByToken(string,string,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"buyProductByToken: Users can buy products using ERC20 tokens such as CVR and without gas fee\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/offchain/P4LPolka.sol\":\"P4LPolka\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeAgent {\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _desiredAmount\\n    ) external returns (uint256);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function swapTokenWithETH(address _token, uint256 _amount) external;\\n\\n    function swapTokenWithToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b3a247450082bf7e12ca27c13685885e56e396192d91ddd24820f9e6562cd6a\",\"license\":\"GPL-3.0\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/offchain/BasePolkaOffChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BasePolkaOffChain is Ownable {\\n    using Counters for Counters.Counter;\\n\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\n    event SetExchangeAgent(address _setter, address _exchangeAgent);\\n\\n    Counters.Counter public productIds;\\n    mapping(uint256 => address) private _ownerOf; // productId => owner\\n    mapping(address => uint64) private _balanceOf; // owner => balance We can think one user can buy max 2**64 products\\n    mapping(address => uint64[]) private _productsOf; // owner => productIds[]\\n\\n    // TODO it should be EnumerableSet\\n    mapping(address => bool) public availableCurrencies;\\n\\n    address public immutable WETH;\\n    // TODO should it be public?\\n    address public exchangeAgent;\\n    address public devWallet;\\n\\n    constructor(\\n        address _WETH,\\n        address _exchangeAgent,\\n        address _devWallet,\\n        address _multiSigWallet\\n    ) {\\n        WETH = _WETH;\\n        exchangeAgent = _exchangeAgent;\\n        devWallet = _devWallet;\\n        transferOwnership(_multiSigWallet);\\n    }\\n\\n    modifier onlyAvailableToken(address _token) {\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\n        require(_exchangeAgent != address(0), \\\"ZERO Address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit SetExchangeAgent(msg.sender, _exchangeAgent);\\n    }\\n\\n    function _setProductOwner(uint256 _prodId, address _owner) internal {\\n        _ownerOf[_prodId] = _owner;\\n    }\\n\\n    function ownerOf(uint256 _prodId) public view returns (address) {\\n        require(_prodId < productIds.current() + 1, \\\"Invalid product ID\\\");\\n        return _ownerOf[_prodId];\\n    }\\n\\n    function _increaseBalance(address _account) internal {\\n        _balanceOf[_account]++;\\n    }\\n\\n    function balanceOf(address _account) public view returns (uint64) {\\n        return _balanceOf[_account];\\n    }\\n\\n    function _buyProduct(address _buyer, uint256 _pid) internal {\\n        _productsOf[_buyer].push(uint64(_pid));\\n        emit BuyProduct(_pid, _buyer);\\n    }\\n\\n    function productOf(address _owner, uint64 _idx) public view returns (uint64) {\\n        return _productsOf[_owner][_idx];\\n    }\\n\\n    function addCurrency(address _currency) external onlyOwner {\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\n        availableCurrencies[_currency] = true;\\n    }\\n\\n    function removeCurrency(address _currency) external onlyOwner {\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\n        availableCurrencies[_currency] = false;\\n    }\\n\\n    function permit(\\n        address _sender,\\n        bytes32 _digest,\\n        bytes memory sig\\n    ) internal pure virtual {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\\n        address recoveredAddress = ecrecover(_digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == _sender, \\\"PolkaCompare: INVALID_SIGNATURE\\\");\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        public\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\\n\",\"keccak256\":\"0xcc4eebd28b96babce9a1d3a3448e6fd910cef9b8ba912cd0750b4247efcd224a\",\"license\":\"MIT\"},\"contracts/offchain/P4LPolka.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\nimport \\\"../libs/TransferHelper.sol\\\";\\nimport \\\"./BasePolkaOffChain.sol\\\";\\n\\ncontract P4LPolka is Ownable, ReentrancyGuard, BasePolkaOffChain {\\n    event BuyP4L(uint256 indexed _productId, address _buyer, address _currency, uint256 _amount, uint256 _priceInUSD);\\n\\n    using Counters for Counters.Counter;\\n\\n    struct Product {\\n        uint256 startTime;\\n        uint128 priceInUSD; // price in USD\\n        uint128 durPlan;\\n        uint64 purchMonth;\\n        string device;\\n        string brand;\\n    }\\n\\n    mapping(uint256 => Product) public products; // productId => product\\n\\n    constructor(\\n        address _WETH,\\n        address _exchangeAgent,\\n        address _devWallet,\\n        address _multiSigWallet\\n    ) BasePolkaOffChain(_WETH, _exchangeAgent, _devWallet, _multiSigWallet) {}\\n\\n    /**\\n     * @dev buyProductETH function:\\n     * this function should be called from user directly\\n     */\\n    function buyProductByETH(\\n        string memory _device,\\n        string memory _brand,\\n        uint256 _value, // price in USD\\n        uint256 _purchMonth,\\n        uint256 _durPlan,\\n        bytes memory sig\\n    ) external payable nonReentrant {\\n        bytes32 digest = getSignedMsgHash(_device, _brand, _value, _purchMonth, _durPlan);\\n        permit(msg.sender, digest, sig);\\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getETHAmountForUSDC(_value);\\n\\n        require(msg.value >= tokenAmount, \\\"Insufficient amount\\\");\\n        if (msg.value > tokenAmount) {\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - tokenAmount);\\n        }\\n        TransferHelper.safeTransferETH(devWallet, tokenAmount);\\n\\n        uint256 _pid = buyProduct(uint128(_value), uint128(_durPlan), uint64(_purchMonth), _device, _brand, msg.sender);\\n        emit BuyP4L(_pid, msg.sender, WETH, tokenAmount, _value);\\n    }\\n\\n    /**\\n     * @dev buyProductByToken: Users can buy products using ERC20 tokens such as CVR and without gas fee\\n     */\\n    function buyProductByToken(\\n        string memory _device,\\n        string memory _brand,\\n        uint256 _value,\\n        uint256 _purchMonth,\\n        uint256 _durPlan,\\n        address _token,\\n        address _sender,\\n        bytes memory sig\\n    ) external nonReentrant onlyAvailableToken(_token) {\\n        bytes32 digest = getSignedMsgHash(_device, _brand, _value, _purchMonth, _durPlan);\\n        permit(_sender, digest, sig);\\n\\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_token, _value);\\n        TransferHelper.safeTransferFrom(_token, _sender, devWallet, tokenAmount);\\n        uint256 _pid = buyProduct(uint128(_value), uint128(_durPlan), uint64(_purchMonth), _device, _brand, _sender);\\n\\n        emit BuyP4L(_pid, _sender, _token, tokenAmount, _value);\\n    }\\n\\n    function buyProduct(\\n        uint128 _value,\\n        uint128 _durPlan,\\n        uint64 _purchMonth,\\n        string memory _device,\\n        string memory _brand,\\n        address _sender\\n    ) private returns (uint256 _pid) {\\n        _pid = productIds.current();\\n        products[_pid] = Product({\\n            priceInUSD: _value, // price in USD\\n            purchMonth: _purchMonth,\\n            durPlan: _durPlan,\\n            startTime: block.timestamp,\\n            device: _device,\\n            brand: _brand\\n        });\\n        _setProductOwner(_pid, _sender);\\n        _increaseBalance(_sender);\\n        _buyProduct(_sender, _pid);\\n        productIds.increment();\\n    }\\n\\n    function getSignedMsgHash(\\n        string memory _device,\\n        string memory _brand,\\n        uint256 _value,\\n        uint256 _purchMonth,\\n        uint256 _durPlan\\n    ) internal pure returns (bytes32) {\\n        bytes32 msgHash = keccak256(abi.encodePacked(_device, _brand, _value, _purchMonth, _durPlan));\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", msgHash));\\n    }\\n}\\n\",\"keccak256\":\"0x53436497428de768e0b34ee76e15f57f93601f0425ffa8f47a7c92468346a1ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001e9838038062001e988339810160408190526200003491620001ce565b83838383600062000044620000dc565b600080546001600160a01b0319166001600160a01b03831690811782556040519293509160008051602062001e78833981519152908290a350600180556001600160601b0319606085901b16608052600780546001600160a01b038581166001600160a01b0319928316179092556008805492851692909116919091179055620000ce81620000e0565b5050505050505050620002a5565b3390565b620000ea620000dc565b6001600160a01b0316620000fd620001a2565b6001600160a01b0316146200012f5760405162461bcd60e51b8152600401620001269062000270565b60405180910390fd5b6001600160a01b038116620001585760405162461bcd60e51b815260040162000126906200022a565b600080546040516001600160a01b038085169392169160008051602062001e7883398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b80516001600160a01b0381168114620001c957600080fd5b919050565b60008060008060808587031215620001e4578384fd5b620001ef85620001b1565b9350620001ff60208601620001b1565b92506200020f60408601620001b1565b91506200021f60608601620001b1565b905092959194509250565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60805160601c611bad620002cb60003960008181610a870152610ad10152611bad6000f3fe60806040526004361061010d5760003560e01c80638ea5220f11610095578063ad5c464811610064578063ad5c4648146102e0578063c5d3a107146102f5578063d9203b9114610315578063f2fde38b1461032a578063f47962871461034a57610114565b80638ea5220f14610267578063a7bb58031461027c578063aa57511d146102ab578063ab07f2c7146102cd57610114565b8063715018a6116100dc578063715018a6146101cb57806374cae655146101e05780637acc0b20146102005780638ab234b6146102325780638da5cb5b1461025257610114565b806318a00d8e146101195780631af42c0f1461013b5780636352211e1461017157806370a082311461019e57610114565b3661011457005b600080fd5b34801561012557600080fd5b5061013961013436600461130c565b61036a565b005b34801561014757600080fd5b5061015b61015636600461130c565b610430565b60405161016891906116ac565b60405180910390f35b34801561017d57600080fd5b5061019161018c36600461152d565b610445565b6040516101689190611618565b3480156101aa57600080fd5b506101be6101b936600461130c565b610499565b6040516101689190611a74565b3480156101d757600080fd5b506101396104be565b3480156101ec57600080fd5b506101396101fb3660046113ca565b610547565b34801561020c57600080fd5b5061022061021b36600461152d565b6106c9565b60405161016896959493929190611a0a565b34801561023e57600080fd5b5061013961024d36600461130c565b610834565b34801561025e57600080fd5b506101916108d0565b34801561027357600080fd5b506101916108df565b34801561028857600080fd5b5061029c61029736600461138f565b6108ee565b604051610168939291906116b7565b3480156102b757600080fd5b506102c0610932565b6040516101689190611a01565b6101396102db36600461148d565b610938565b3480156102ec57600080fd5b50610191610acf565b34801561030157600080fd5b5061013961031036600461130c565b610af3565b34801561032157600080fd5b50610191610b8b565b34801561033657600080fd5b5061013961034536600461130c565b610b9a565b34801561035657600080fd5b506101be61036536600461132d565b610c5a565b610372610cce565b6001600160a01b03166103836108d0565b6001600160a01b0316146103b25760405162461bcd60e51b81526004016103a990611893565b60405180910390fd5b6001600160a01b0381166103d85760405162461bcd60e51b81526004016103a99061196d565b600780546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb690610425903390849061162c565b60405180910390a150565b60066020526000908152604090205460ff1681565b60006104516002610cd2565b61045c906001611a89565b821061047a5760405162461bcd60e51b81526004016103a990611936565b506000818152600360205260409020546001600160a01b03165b919050565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6104c6610cce565b6001600160a01b03166104d76108d0565b6001600160a01b0316146104fd5760405162461bcd60e51b81526004016103a990611893565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002600154141561056a5760405162461bcd60e51b81526004016103a9906119ca565b60026001556001600160a01b038316600090815260066020526040902054839060ff166105a95760405162461bcd60e51b81526004016103a99061176b565b60006105b88a8a8a8a8a610cd6565b90506105c5848285610d3d565b60075460405163a9a12d4360e01b81526000916001600160a01b03169063a9a12d43906105f89089908d90600401611693565b602060405180830381600087803b15801561061257600080fd5b505af1158015610626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064a9190611545565b60085490915061066790879087906001600160a01b031684610df3565b60006106778a898b8f8f8b610ef8565b9050807f39d12e8951d830ef8836319a4450cf10c520dfcbea8db9ed98011efdfa1389a78789858e6040516106af949392919061166a565b60405180910390a250506001805550505050505050505050565b600960205260009081526040902080546001820154600283015460038401805493946fffffffffffffffffffffffffffffffff80851695600160801b909504169367ffffffffffffffff9093169290919061072390611ae8565b80601f016020809104026020016040519081016040528092919081815260200182805461074f90611ae8565b801561079c5780601f106107715761010080835404028352916020019161079c565b820191906000526020600020905b81548152906001019060200180831161077f57829003601f168201915b5050505050908060040180546107b190611ae8565b80601f01602080910402602001604051908101604052809291908181526020018280546107dd90611ae8565b801561082a5780601f106107ff5761010080835404028352916020019161082a565b820191906000526020600020905b81548152906001019060200180831161080d57829003601f168201915b5050505050905086565b61083c610cce565b6001600160a01b031661084d6108d0565b6001600160a01b0316146108735760405162461bcd60e51b81526004016103a990611893565b6001600160a01b03811660009081526006602052604090205460ff16156108ac5760405162461bcd60e51b81526004016103a99061185c565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6000546001600160a01b031690565b6008546001600160a01b031681565b600080600083516041146109145760405162461bcd60e51b81526004016103a990611993565b50505060208101516040820151606090920151909260009190911a90565b60025481565b6002600154141561095b5760405162461bcd60e51b81526004016103a9906119ca565b6002600155600061096f8787878787610cd6565b905061097c338284610d3d565b60075460405163531a221160e01b81526000916001600160a01b03169063531a2211906109ad908990600401611a01565b60206040518083038186803b1580156109c557600080fd5b505afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190611545565b905080341015610a1f5760405162461bcd60e51b81526004016103a9906118ff565b80341115610a3a57610a3a33610a358334611aa1565b611027565b600854610a50906001600160a01b031682611027565b6000610a608786888c8c33610ef8565b9050807f39d12e8951d830ef8836319a4450cf10c520dfcbea8db9ed98011efdfa1389a7337f0000000000000000000000000000000000000000000000000000000000000000858b604051610ab8949392919061166a565b60405180910390a250506001805550505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610afb610cce565b6001600160a01b0316610b0c6108d0565b6001600160a01b031614610b325760405162461bcd60e51b81526004016103a990611893565b6001600160a01b03811660009081526006602052604090205460ff16610b6a5760405162461bcd60e51b81526004016103a9906118c8565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6007546001600160a01b031681565b610ba2610cce565b6001600160a01b0316610bb36108d0565b6001600160a01b031614610bd95760405162461bcd60e51b81526004016103a990611893565b6001600160a01b038116610bff5760405162461bcd60e51b81526004016103a990611725565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600560205260408120805467ffffffffffffffff8416908110610c9c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16905092915050565b3390565b5490565b6000808686868686604051602001610cf29594939291906115a5565b60405160208183030381529060405280519060200120905080604051602001610d1b91906115e7565b6040516020818303038152906040528051906020012091505095945050505050565b6000806000610d4b846108ee565b925092509250600060018683868660405160008152602001604052604051610d7694939291906116d0565b6020604051602081039080840390855afa158015610d98573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610dce5750866001600160a01b0316816001600160a01b0316145b610dea5760405162461bcd60e51b81526004016103a9906116ee565b50505050505050565b600080856001600160a01b03166323b872dd868686604051602401610e1a93929190611646565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e689190611589565b6000604051808303816000865af19150503d8060008114610ea5576040519150601f19603f3d011682016040523d82523d6000602084013e610eaa565b606091505b5091509150818015610ed4575080511580610ed4575080806020019051810190610ed4919061136f565b610ef05760405162461bcd60e51b81526004016103a9906117a2565b505050505050565b6000610f046002610cd2565b6040805160c0810182524281526fffffffffffffffffffffffffffffffff808b1660208084019182528b831684860190815267ffffffffffffffff808d1660608701908152608087018d815260a088018d905260008a8152600986529890982087518155945160018601805494518816600160801b029188166fffffffffffffffffffffffffffffffff19909516949094179096169590951790915592516002830180549190941667ffffffffffffffff1990911617909255925180519495509193610fd692600385019201906111db565b5060a08201518051610ff29160048401916020909101906111db565b5090505061100081836110b9565b611009826110e7565b611013828261113f565b61101d60026111d2565b9695505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516110519190611589565b60006040518083038185875af1925050503d806000811461108e576040519150601f19603f3d011682016040523d82523d6000602084013e611093565b606091505b50509050806110b45760405162461bcd60e51b81526004016103a9906117ff565b505050565b60009182526003602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0381166000908152600460205260408120805467ffffffffffffffff169161111583611b23565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b6001600160a01b03821660009081526005602090815260408083208054600181018255908452919092206004820401805460039092166008026101000a67ffffffffffffffff81810219909316928516029190911790555181907fbe51e9a2a9ea8219cc8ab3194ee452fbdf2fa052f0d88d96a854c8ff2686151e906111c6908590611618565b60405180910390a25050565b80546001019055565b8280546111e790611ae8565b90600052602060002090601f016020900481019282611209576000855561124f565b82601f1061122257805160ff191683800117855561124f565b8280016001018555821561124f579182015b8281111561124f578251825591602001919060010190611234565b5061125b92915061125f565b5090565b5b8082111561125b5760008155600101611260565b80356001600160a01b038116811461049457600080fd5b600082601f83011261129b578081fd5b813567ffffffffffffffff808211156112b6576112b6611b61565b604051601f8301601f1916810160200182811182821017156112da576112da611b61565b6040528281528483016020018610156112f1578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561131d578081fd5b61132682611274565b9392505050565b6000806040838503121561133f578081fd5b61134883611274565b9150602083013567ffffffffffffffff81168114611364578182fd5b809150509250929050565b600060208284031215611380578081fd5b81518015158114611326578182fd5b6000602082840312156113a0578081fd5b813567ffffffffffffffff8111156113b6578182fd5b6113c28482850161128b565b949350505050565b600080600080600080600080610100898b0312156113e6578384fd5b883567ffffffffffffffff808211156113fd578586fd5b6114098c838d0161128b565b995060208b013591508082111561141e578586fd5b61142a8c838d0161128b565b985060408b0135975060608b0135965060808b0135955061144d60a08c01611274565b945061145b60c08c01611274565b935060e08b0135915080821115611470578283fd5b5061147d8b828c0161128b565b9150509295985092959890939650565b60008060008060008060c087890312156114a5578182fd5b863567ffffffffffffffff808211156114bc578384fd5b6114c88a838b0161128b565b975060208901359150808211156114dd578384fd5b6114e98a838b0161128b565b965060408901359550606089013594506080890135935060a0890135915080821115611513578283fd5b5061152089828a0161128b565b9150509295509295509295565b60006020828403121561153e578081fd5b5035919050565b600060208284031215611556578081fd5b5051919050565b60008151808452611575816020860160208601611ab8565b601f01601f19169290920160200192915050565b6000825161159b818460208701611ab8565b9190910192915050565b600086516115b7818460208b01611ab8565b8651908301906115cb818360208b01611ab8565b0194855250506020830191909152604082015260600192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b928352602083019190915260ff16604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b6020808252601f908201527f506f6c6b61436f6d706172653a20494e56414c49445f5349474e415455524500604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b60208082526012908201527f496e76616c69642070726f647563742049440000000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b60208082526018908201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b60008782526fffffffffffffffffffffffffffffffff808816602084015280871660408401525067ffffffffffffffff8516606083015260c06080830152611a5560c083018561155d565b82810360a0840152611a67818561155d565b9998505050505050505050565b67ffffffffffffffff91909116815260200190565b60008219821115611a9c57611a9c611b4b565b500190565b600082821015611ab357611ab3611b4b565b500390565b60005b83811015611ad3578181015183820152602001611abb565b83811115611ae2576000848401525b50505050565b600281046001821680611afc57607f821691505b60208210811415611b1d57634e487b7160e01b600052602260045260246000fd5b50919050565b600067ffffffffffffffff80831681811415611b4157611b41611b4b565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a1995eb85f82bbc3a52ddb085b9fc117ba557a822e8ae7dddaee6557f7f6889564736f6c634300080000338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x60806040526004361061010d5760003560e01c80638ea5220f11610095578063ad5c464811610064578063ad5c4648146102e0578063c5d3a107146102f5578063d9203b9114610315578063f2fde38b1461032a578063f47962871461034a57610114565b80638ea5220f14610267578063a7bb58031461027c578063aa57511d146102ab578063ab07f2c7146102cd57610114565b8063715018a6116100dc578063715018a6146101cb57806374cae655146101e05780637acc0b20146102005780638ab234b6146102325780638da5cb5b1461025257610114565b806318a00d8e146101195780631af42c0f1461013b5780636352211e1461017157806370a082311461019e57610114565b3661011457005b600080fd5b34801561012557600080fd5b5061013961013436600461130c565b61036a565b005b34801561014757600080fd5b5061015b61015636600461130c565b610430565b60405161016891906116ac565b60405180910390f35b34801561017d57600080fd5b5061019161018c36600461152d565b610445565b6040516101689190611618565b3480156101aa57600080fd5b506101be6101b936600461130c565b610499565b6040516101689190611a74565b3480156101d757600080fd5b506101396104be565b3480156101ec57600080fd5b506101396101fb3660046113ca565b610547565b34801561020c57600080fd5b5061022061021b36600461152d565b6106c9565b60405161016896959493929190611a0a565b34801561023e57600080fd5b5061013961024d36600461130c565b610834565b34801561025e57600080fd5b506101916108d0565b34801561027357600080fd5b506101916108df565b34801561028857600080fd5b5061029c61029736600461138f565b6108ee565b604051610168939291906116b7565b3480156102b757600080fd5b506102c0610932565b6040516101689190611a01565b6101396102db36600461148d565b610938565b3480156102ec57600080fd5b50610191610acf565b34801561030157600080fd5b5061013961031036600461130c565b610af3565b34801561032157600080fd5b50610191610b8b565b34801561033657600080fd5b5061013961034536600461130c565b610b9a565b34801561035657600080fd5b506101be61036536600461132d565b610c5a565b610372610cce565b6001600160a01b03166103836108d0565b6001600160a01b0316146103b25760405162461bcd60e51b81526004016103a990611893565b60405180910390fd5b6001600160a01b0381166103d85760405162461bcd60e51b81526004016103a99061196d565b600780546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb690610425903390849061162c565b60405180910390a150565b60066020526000908152604090205460ff1681565b60006104516002610cd2565b61045c906001611a89565b821061047a5760405162461bcd60e51b81526004016103a990611936565b506000818152600360205260409020546001600160a01b03165b919050565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6104c6610cce565b6001600160a01b03166104d76108d0565b6001600160a01b0316146104fd5760405162461bcd60e51b81526004016103a990611893565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002600154141561056a5760405162461bcd60e51b81526004016103a9906119ca565b60026001556001600160a01b038316600090815260066020526040902054839060ff166105a95760405162461bcd60e51b81526004016103a99061176b565b60006105b88a8a8a8a8a610cd6565b90506105c5848285610d3d565b60075460405163a9a12d4360e01b81526000916001600160a01b03169063a9a12d43906105f89089908d90600401611693565b602060405180830381600087803b15801561061257600080fd5b505af1158015610626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064a9190611545565b60085490915061066790879087906001600160a01b031684610df3565b60006106778a898b8f8f8b610ef8565b9050807f39d12e8951d830ef8836319a4450cf10c520dfcbea8db9ed98011efdfa1389a78789858e6040516106af949392919061166a565b60405180910390a250506001805550505050505050505050565b600960205260009081526040902080546001820154600283015460038401805493946fffffffffffffffffffffffffffffffff80851695600160801b909504169367ffffffffffffffff9093169290919061072390611ae8565b80601f016020809104026020016040519081016040528092919081815260200182805461074f90611ae8565b801561079c5780601f106107715761010080835404028352916020019161079c565b820191906000526020600020905b81548152906001019060200180831161077f57829003601f168201915b5050505050908060040180546107b190611ae8565b80601f01602080910402602001604051908101604052809291908181526020018280546107dd90611ae8565b801561082a5780601f106107ff5761010080835404028352916020019161082a565b820191906000526020600020905b81548152906001019060200180831161080d57829003601f168201915b5050505050905086565b61083c610cce565b6001600160a01b031661084d6108d0565b6001600160a01b0316146108735760405162461bcd60e51b81526004016103a990611893565b6001600160a01b03811660009081526006602052604090205460ff16156108ac5760405162461bcd60e51b81526004016103a99061185c565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6000546001600160a01b031690565b6008546001600160a01b031681565b600080600083516041146109145760405162461bcd60e51b81526004016103a990611993565b50505060208101516040820151606090920151909260009190911a90565b60025481565b6002600154141561095b5760405162461bcd60e51b81526004016103a9906119ca565b6002600155600061096f8787878787610cd6565b905061097c338284610d3d565b60075460405163531a221160e01b81526000916001600160a01b03169063531a2211906109ad908990600401611a01565b60206040518083038186803b1580156109c557600080fd5b505afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190611545565b905080341015610a1f5760405162461bcd60e51b81526004016103a9906118ff565b80341115610a3a57610a3a33610a358334611aa1565b611027565b600854610a50906001600160a01b031682611027565b6000610a608786888c8c33610ef8565b9050807f39d12e8951d830ef8836319a4450cf10c520dfcbea8db9ed98011efdfa1389a7337f0000000000000000000000000000000000000000000000000000000000000000858b604051610ab8949392919061166a565b60405180910390a250506001805550505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610afb610cce565b6001600160a01b0316610b0c6108d0565b6001600160a01b031614610b325760405162461bcd60e51b81526004016103a990611893565b6001600160a01b03811660009081526006602052604090205460ff16610b6a5760405162461bcd60e51b81526004016103a9906118c8565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6007546001600160a01b031681565b610ba2610cce565b6001600160a01b0316610bb36108d0565b6001600160a01b031614610bd95760405162461bcd60e51b81526004016103a990611893565b6001600160a01b038116610bff5760405162461bcd60e51b81526004016103a990611725565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600560205260408120805467ffffffffffffffff8416908110610c9c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16905092915050565b3390565b5490565b6000808686868686604051602001610cf29594939291906115a5565b60405160208183030381529060405280519060200120905080604051602001610d1b91906115e7565b6040516020818303038152906040528051906020012091505095945050505050565b6000806000610d4b846108ee565b925092509250600060018683868660405160008152602001604052604051610d7694939291906116d0565b6020604051602081039080840390855afa158015610d98573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610dce5750866001600160a01b0316816001600160a01b0316145b610dea5760405162461bcd60e51b81526004016103a9906116ee565b50505050505050565b600080856001600160a01b03166323b872dd868686604051602401610e1a93929190611646565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e689190611589565b6000604051808303816000865af19150503d8060008114610ea5576040519150601f19603f3d011682016040523d82523d6000602084013e610eaa565b606091505b5091509150818015610ed4575080511580610ed4575080806020019051810190610ed4919061136f565b610ef05760405162461bcd60e51b81526004016103a9906117a2565b505050505050565b6000610f046002610cd2565b6040805160c0810182524281526fffffffffffffffffffffffffffffffff808b1660208084019182528b831684860190815267ffffffffffffffff808d1660608701908152608087018d815260a088018d905260008a8152600986529890982087518155945160018601805494518816600160801b029188166fffffffffffffffffffffffffffffffff19909516949094179096169590951790915592516002830180549190941667ffffffffffffffff1990911617909255925180519495509193610fd692600385019201906111db565b5060a08201518051610ff29160048401916020909101906111db565b5090505061100081836110b9565b611009826110e7565b611013828261113f565b61101d60026111d2565b9695505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516110519190611589565b60006040518083038185875af1925050503d806000811461108e576040519150601f19603f3d011682016040523d82523d6000602084013e611093565b606091505b50509050806110b45760405162461bcd60e51b81526004016103a9906117ff565b505050565b60009182526003602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0381166000908152600460205260408120805467ffffffffffffffff169161111583611b23565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b6001600160a01b03821660009081526005602090815260408083208054600181018255908452919092206004820401805460039092166008026101000a67ffffffffffffffff81810219909316928516029190911790555181907fbe51e9a2a9ea8219cc8ab3194ee452fbdf2fa052f0d88d96a854c8ff2686151e906111c6908590611618565b60405180910390a25050565b80546001019055565b8280546111e790611ae8565b90600052602060002090601f016020900481019282611209576000855561124f565b82601f1061122257805160ff191683800117855561124f565b8280016001018555821561124f579182015b8281111561124f578251825591602001919060010190611234565b5061125b92915061125f565b5090565b5b8082111561125b5760008155600101611260565b80356001600160a01b038116811461049457600080fd5b600082601f83011261129b578081fd5b813567ffffffffffffffff808211156112b6576112b6611b61565b604051601f8301601f1916810160200182811182821017156112da576112da611b61565b6040528281528483016020018610156112f1578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561131d578081fd5b61132682611274565b9392505050565b6000806040838503121561133f578081fd5b61134883611274565b9150602083013567ffffffffffffffff81168114611364578182fd5b809150509250929050565b600060208284031215611380578081fd5b81518015158114611326578182fd5b6000602082840312156113a0578081fd5b813567ffffffffffffffff8111156113b6578182fd5b6113c28482850161128b565b949350505050565b600080600080600080600080610100898b0312156113e6578384fd5b883567ffffffffffffffff808211156113fd578586fd5b6114098c838d0161128b565b995060208b013591508082111561141e578586fd5b61142a8c838d0161128b565b985060408b0135975060608b0135965060808b0135955061144d60a08c01611274565b945061145b60c08c01611274565b935060e08b0135915080821115611470578283fd5b5061147d8b828c0161128b565b9150509295985092959890939650565b60008060008060008060c087890312156114a5578182fd5b863567ffffffffffffffff808211156114bc578384fd5b6114c88a838b0161128b565b975060208901359150808211156114dd578384fd5b6114e98a838b0161128b565b965060408901359550606089013594506080890135935060a0890135915080821115611513578283fd5b5061152089828a0161128b565b9150509295509295509295565b60006020828403121561153e578081fd5b5035919050565b600060208284031215611556578081fd5b5051919050565b60008151808452611575816020860160208601611ab8565b601f01601f19169290920160200192915050565b6000825161159b818460208701611ab8565b9190910192915050565b600086516115b7818460208b01611ab8565b8651908301906115cb818360208b01611ab8565b0194855250506020830191909152604082015260600192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b928352602083019190915260ff16604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b6020808252601f908201527f506f6c6b61436f6d706172653a20494e56414c49445f5349474e415455524500604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b60208082526012908201527f496e76616c69642070726f647563742049440000000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b60208082526018908201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b60008782526fffffffffffffffffffffffffffffffff808816602084015280871660408401525067ffffffffffffffff8516606083015260c06080830152611a5560c083018561155d565b82810360a0840152611a67818561155d565b9998505050505050505050565b67ffffffffffffffff91909116815260200190565b60008219821115611a9c57611a9c611b4b565b500190565b600082821015611ab357611ab3611b4b565b500390565b60005b83811015611ad3578181015183820152602001611abb565b83811115611ae2576000848401525b50505050565b600281046001821680611afc57607f821691505b60208210811415611b1d57634e487b7160e01b600052602260045260246000fd5b50919050565b600067ffffffffffffffff80831681811415611b4157611b41611b4b565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a1995eb85f82bbc3a52ddb085b9fc117ba557a822e8ae7dddaee6557f7f6889564736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyProductByETH(string,string,uint256,uint256,uint256,bytes)": {
        "details": "buyProductETH function: this function should be called from user directly"
      },
      "buyProductByToken(string,string,uint256,uint256,uint256,address,address,bytes)": {
        "details": "buyProductByToken: Users can buy products using ERC20 tokens such as CVR and without gas fee"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 647,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3190,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "productIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1476_storage"
      },
      {
        "astId": 3194,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3198,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 3203,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "_productsOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint64)dyn_storage)"
      },
      {
        "astId": 3207,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3211,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3213,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "devWallet",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3880,
        "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
        "label": "products",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Product)3875_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint64)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint64)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Product)3875_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct P4LPolka.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)3875_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1476_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1475,
            "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Product)3875_storage": {
        "encoding": "inplace",
        "label": "struct P4LPolka.Product",
        "members": [
          {
            "astId": 3864,
            "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3866,
            "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
            "label": "priceInUSD",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 3868,
            "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
            "label": "durPlan",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 3870,
            "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
            "label": "purchMonth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 3872,
            "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
            "label": "device",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3874,
            "contract": "contracts/offchain/P4LPolka.sol:P4LPolka",
            "label": "brand",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}