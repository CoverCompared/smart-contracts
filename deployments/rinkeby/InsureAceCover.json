{
  "address": "0x1977D7A7Ea2E6D1340B37e017e7b335c67e306f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CVR",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coverContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "productIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "BuyInsureAce",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "SetExchangeAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAsset",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CVR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "products",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "durationInDays",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "helperParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "securityParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "buyCoverByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "products",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "durationInDays",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "helperParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "securityParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "buyCoverByToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coverContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coverContractAddress",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5351ca7bb296b0820d03bd7745c6240edb35713393e41d78fc2902cb814c59ff",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x1977D7A7Ea2E6D1340B37e017e7b335c67e306f1",
    "transactionIndex": 2,
    "gasUsed": "1657000",
    "logsBloom": "0x
    "blockHash": "0x9420939fe1fac063040be2d8e7b911f73adadeb454963cef7e4b4871bf59191c",
    "transactionHash": "0x5351ca7bb296b0820d03bd7745c6240edb35713393e41d78fc2902cb814c59ff",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9844936,
        "transactionHash": "0x5351ca7bb296b0820d03bd7745c6240edb35713393e41d78fc2902cb814c59ff",
        "address": "0x1977D7A7Ea2E6D1340B37e017e7b335c67e306f1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x9420939fe1fac063040be2d8e7b911f73adadeb454963cef7e4b4871bf59191c"
      }
    ],
    "blockNumber": 9844936,
    "cumulativeGasUsed": "1731144",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd3e48FAcD30A73609ffA60AE84851e72d10fEa52",
    "0x5640B69a5e1375a95e610052c5eedfea17675996",
    "0x0921f628b8463227615D2199D0D3860E4fBcD411"
  ],
  "solcInputHash": "ef270dec7daaf32e0838cb5bbbe360f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CVR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"productIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyInsureAce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"SetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CVR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyCoverByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyCoverByToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyCoverByToken(uint16[],uint16[],uint256[],address,address,uint256,uint256,uint256[],uint256[],uint8[],bytes32[],bytes32[])\":{\"details\":\"Through this function, users can get covers from Insure by some tokens such as CVR... if users want to save gas fee, he shoud reach to this function through MultiSigWallet.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAsset(address,address,uint256)\":{\"details\":\"For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"We are supporting only CVR for InsureAce\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onchain/InsureAceCover.sol\":\"InsureAceCover\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x603946f0dc2541ff45f4b5cb1424ed1870eb24f3396cd318b1996e7e65278907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeAgent {\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _desiredAmount\\n    ) external returns (uint256);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function swapTokenWithETH(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n\\n    function swapTokenWithToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1aad6c6cae768a559b0c7ed1de81906e327e45f93a1f7a3bdc25c7323a959d0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IInsureAce.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IInsureAce {\\n    function getPremium(\\n        uint256[] memory products,\\n        uint256[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256[] memory rewardPercentages\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256[] memory\\n        );\\n\\n    function buyCover(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters,\\n        uint256[] memory securityParameters,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    ) external payable;\\n\\n    function unlockRewardByController(address owner, address to) external returns (uint256);\\n\\n    function getRewardAmount() external view returns (uint256);\\n\\n    function getCoverOwnerRewardAmount(uint256 premiumAmount2Insur, uint256 overwrittenRewardPctg)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getINSURRewardBalanceDetails() external view returns (uint256, uint256);\\n\\n    function removeINSURRewardBalance(address toAddress, uint256 amount) external;\\n\\n    function setBuyCoverMaxBlkNumLatency(uint256 numOfBlocks) external;\\n\\n    function setBuyCoverSigner(address signer, bool enabled) external;\\n\\n    function data() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3d43fe78b2a5fb29ea38d6432344e9de7a73edf0da1c2618b093f1035b40b3e8\",\"license\":\"GPL-3.0\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/onchain/BaseCoverOnChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libs/TransferHelper.sol\\\";\\n\\ncontract BaseCoverOnChain is Ownable {\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\n    event WithdrawAsset(address _user, address _to, address _token, uint256 _amount);\\n    event SetExchangeAgent(address _setter, address _exchangeAgent);\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter public productIds;\\n    mapping(address => bool) public availableCurrencies;\\n\\n    // address public immutable WETH;\\n    address public exchangeAgent;\\n\\n    constructor(address _CVR, address _exchangeAgent) {\\n        availableCurrencies[_CVR] = true;\\n        exchangeAgent = _exchangeAgent;\\n    }\\n\\n    modifier onlyAvailableToken(address _token) {\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function addCurrency(address _currency) external onlyOwner {\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\n        availableCurrencies[_currency] = true;\\n    }\\n\\n    function removeCurrency(address _currency) external onlyOwner {\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\n        availableCurrencies[_currency] = false;\\n    }\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\n        require(_exchangeAgent != address(0), \\\"ZERO Address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit SetExchangeAgent(msg.sender, _exchangeAgent);\\n    }\\n\\n    /**\\n     * @dev For reflect tokens, we should deposit some tokens at contract directly,\\n     * We will withdraw tokens deposited at contract through this function\\n     */\\n    function withdrawAsset(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, _to, _amount);\\n        WithdrawAsset(msg.sender, _to, _token, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x962f4022fec985c23aa2ee32e80cd77d7719baa8a7d424575bd44d55b3be833f\",\"license\":\"MIT\"},\"contracts/onchain/InsureAceCover.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\nimport {IInsureAce} from \\\"../interfaces/IInsureAce.sol\\\";\\nimport \\\"./BaseCoverOnChain.sol\\\";\\n\\n/**\\n * We are supporting only CVR for InsureAce\\n */\\ncontract InsureAceCover is BaseCoverOnChain {\\n    event BuyInsureAce(uint16[] productIds, address _buyer, address _currency, address _token, uint256 _amount);\\n\\n    address public coverContractAddress;\\n    // This is the WETH address of InsureAce smart contract\\n    address public constant WETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public immutable CVR;\\n\\n    constructor(\\n        address _CVR,\\n        address _exchangeAgent,\\n        address _coverContractAddress\\n    ) BaseCoverOnChain(_CVR, _exchangeAgent) {\\n        require(_coverContractAddress != address(0), \\\"S:1\\\");\\n        CVR = _CVR;\\n        coverContractAddress = _coverContractAddress;\\n    }\\n\\n    function setup(address _coverContractAddress) external onlyOwner {\\n        require(_coverContractAddress != address(0), \\\"S:1\\\");\\n        coverContractAddress = _coverContractAddress;\\n    }\\n\\n    function buyCoverByETH(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        uint256 referralCode,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters,\\n        uint256[] memory securityParameters,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    ) external payable {\\n        require(currency == WETH, \\\"Not ETH product\\\");\\n        require(msg.value >= premiumAmount, \\\"Insufficient amount\\\");\\n        if (msg.value - premiumAmount > 0) {\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - premiumAmount);\\n        }\\n\\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\\n            products,\\n            durationInDays,\\n            amounts,\\n            currency,\\n            msg.sender,\\n            referralCode,\\n            premiumAmount,\\n            helperParameters,\\n            securityParameters,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        emit BuyInsureAce(products, msg.sender, currency, currency, premiumAmount);\\n    }\\n\\n    /**\\n     * @dev Through this function, users can get covers from Insure by some tokens such as CVR...\\n     * if users want to save gas fee, he shoud reach to this function through MultiSigWallet.\\n     */\\n    function buyCoverByToken(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address _token,\\n        uint256 referralCode,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters,\\n        uint256[] memory securityParameters,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    ) external payable {\\n        uint256 amount;\\n        if (currency == WETH) {\\n            amount = IExchangeAgent(exchangeAgent).getTokenAmountForETH(_token, premiumAmount);\\n        } else {\\n            amount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(_token, currency, premiumAmount);\\n        }\\n\\n        TransferHelper.safeTransferFrom(_token, msg.sender, address(this), amount);\\n        TransferHelper.safeApprove(_token, exchangeAgent, amount);\\n\\n        if (currency == WETH) {\\n            IExchangeAgent(exchangeAgent).swapTokenWithETH(_token, amount, premiumAmount);\\n        } else {\\n            IExchangeAgent(exchangeAgent).swapTokenWithToken(_token, currency, amount, premiumAmount);\\n            TransferHelper.safeApprove(currency, coverContractAddress, premiumAmount);\\n        }\\n\\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\\n            products,\\n            durationInDays,\\n            amounts,\\n            currency,\\n            msg.sender,\\n            referralCode,\\n            premiumAmount,\\n            helperParameters,\\n            securityParameters,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        emit BuyInsureAce(products, msg.sender, currency, _token, premiumAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x25fe4b3cb3ef6862b58b09ee718f73c94f8c4bb1ec81ac6fb570e8b2d85764de\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001d1138038062001d1183398101604081905262000034916200014d565b82826000620000426200012c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b039182166000908152600260205260409020805460ff19166001179055600380549183166001600160a01b03199092169190911790558116620000f35760405162461bcd60e51b8152600401620000ea9062000196565b60405180910390fd5b60609290921b6001600160601b03191660805250600480546001600160a01b0319166001600160a01b03909216919091179055620001b3565b3390565b80516001600160a01b03811681146200014857600080fd5b919050565b60008060006060848603121562000162578283fd5b6200016d8462000130565b92506200017d6020850162000130565b91506200018d6040850162000130565b90509250925092565b602080825260039082015262533a3160e81b604082015260600190565b60805160601c611b3f620001d26000396000610aae0152611b3f6000f3fe6080604052600436106100f75760003560e01c806393a32fb11161008a578063c5d3a10711610059578063c5d3a10714610264578063d5f4479c14610284578063d9203b9114610299578063f2fde38b146102ae576100fe565b806393a32fb114610205578063aa57511d14610218578063ad5c46481461023a578063b7160dee1461024f576100fe565b806366d38203116100c657806366d382031461018e578063715018a6146101ae5780638ab234b6146101c35780638da5cb5b146101e3576100fe565b8063092ae4dc1461010357806318a00d8e146101255780631af42c0f146101455780634a3afe701461017b576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e366004611119565b6102ce565b005b34801561013157600080fd5b506101236101403660046110f8565b610363565b34801561015157600080fd5b506101656101603660046110f8565b610420565b6040516101729190611782565b60405180910390f35b610123610189366004611302565b610435565b34801561019a57600080fd5b506101236101a93660046110f8565b61058c565b3480156101ba57600080fd5b50610123610613565b3480156101cf57600080fd5b506101236101de3660046110f8565b61069c565b3480156101ef57600080fd5b506101f8610738565b6040516101729190611586565b610123610213366004611154565b610747565b34801561022457600080fd5b5061022d610a8e565b6040516101729190611a79565b34801561024657600080fd5b506101f8610a94565b34801561025b57600080fd5b506101f8610aac565b34801561027057600080fd5b5061012361027f3660046110f8565b610ad0565b34801561029057600080fd5b506101f8610b68565b3480156102a557600080fd5b506101f8610b77565b3480156102ba57600080fd5b506101236102c93660046110f8565b610b86565b6102d6610c46565b6001600160a01b03166102e7610738565b6001600160a01b0316146103165760405162461bcd60e51b815260040161030d90611918565b60405180910390fd5b610321838383610c4a565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf243383858460405161035694939291906115b4565b60405180910390a1505050565b61036b610c46565b6001600160a01b031661037c610738565b6001600160a01b0316146103a25760405162461bcd60e51b815260040161030d90611918565b6001600160a01b0381166103c85760405162461bcd60e51b815260040161030d90611a06565b600380546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb690610415903390849061159a565b60405180910390a150565b60026020526000908152604090205460ff1681565b6001600160a01b03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146104715760405162461bcd60e51b815260040161030d906118c4565b853410156104915760405162461bcd60e51b815260040161030d906119cf565b600061049d8734611ad0565b11156104b6576104b6336104b18834611ad0565b610d37565b600460009054906101000a90046001600160a01b03166001600160a01b031663ddeb2d4e878d8d8d8d338e8e8e8e8e8e8e6040518e63ffffffff1660e01b815260040161050e9c9b9a999897969594939291906116a6565b6000604051808303818588803b15801561052757600080fd5b505af115801561053b573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8b338a8b8a604051610577959493929190611665565b60405180910390a15050505050505050505050565b610594610c46565b6001600160a01b03166105a5610738565b6001600160a01b0316146105cb5760405162461bcd60e51b815260040161030d90611918565b6001600160a01b0381166105f15760405162461bcd60e51b815260040161030d906118fb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61061b610c46565b6001600160a01b031661062c610738565b6001600160a01b0316146106525760405162461bcd60e51b815260040161030d90611918565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6106a4610c46565b6001600160a01b03166106b5610738565b6001600160a01b0316146106db5760405162461bcd60e51b815260040161030d90611918565b6001600160a01b03811660009081526002602052604090205460ff16156107145760405162461bcd60e51b815260040161030d9061188d565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000546001600160a01b031690565b60006001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156107f95760035460405163ba560ed960e01b81526001600160a01b039091169063ba560ed9906107a0908c908b9060040161162b565b602060405180830381600087803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190611489565b9050610882565b600354604051631a44cdf360e11b81526001600160a01b03909116906334899be69061082d908c908e908c906004016115de565b602060405180830381600087803b15801561084757600080fd5b505af115801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f9190611489565b90505b61088e89333084610dc9565b6003546108a6908a906001600160a01b031683610eb9565b6001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610936576003546040516303790ccd60e21b81526001600160a01b0390911690630de43334906108ff908c9085908c90600401611644565b600060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b505050506109b6565b60035460405163406e622b60e11b81526001600160a01b03909116906380dcc4569061096c908c908e9086908d90600401611602565b600060405180830381600087803b15801561098657600080fd5b505af115801561099a573d6000803e3d6000fd5b50506004546109b692508c91506001600160a01b031689610eb9565b600460009054906101000a90046001600160a01b03166001600160a01b031663ddeb2d4e888f8f8f8f338f8f8f8f8f8f8f6040518e63ffffffff1660e01b8152600401610a0e9c9b9a999897969594939291906116a6565b6000604051808303818588803b158015610a2757600080fd5b505af1158015610a3b573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8d338c8c8b604051610a77959493929190611665565b60405180910390a150505050505050505050505050565b60015481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ad8610c46565b6001600160a01b0316610ae9610738565b6001600160a01b031614610b0f5760405162461bcd60e51b815260040161030d90611918565b6001600160a01b03811660009081526002602052604090205460ff16610b475760405162461bcd60e51b815260040161030d9061194d565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6004546001600160a01b031681565b6003546001600160a01b031681565b610b8e610c46565b6001600160a01b0316610b9f610738565b6001600160a01b031614610bc55760405162461bcd60e51b815260040161030d90611918565b6001600160a01b038116610beb5760405162461bcd60e51b815260040161030d9061178d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600080846001600160a01b031663a9059cbb8585604051602401610c6f92919061162b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610ca8919061154d565b6000604051808303816000865af19150503d8060008114610ce5576040519150601f19603f3d011682016040523d82523d6000602084013e610cea565b606091505b5091509150818015610d14575080511580610d14575080806020019051810190610d149190611469565b610d305760405162461bcd60e51b815260040161030d90611a2c565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051610d61919061154d565b60006040518083038185875af1925050503d8060008114610d9e576040519150601f19603f3d011682016040523d82523d6000602084013e610da3565b606091505b5050905080610dc45760405162461bcd60e51b815260040161030d90611830565b505050565b600080856001600160a01b03166323b872dd868686604051602401610df0939291906115de565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610e29919061154d565b6000604051808303816000865af19150503d8060008114610e66576040519150601f19603f3d011682016040523d82523d6000602084013e610e6b565b606091505b5091509150818015610e95575080511580610e95575080806020019051810190610e959190611469565b610eb15760405162461bcd60e51b815260040161030d906117d3565b505050505050565b600080846001600160a01b031663095ea7b38585604051602401610ede92919061162b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610f17919061154d565b6000604051808303816000865af19150503d8060008114610f54576040519150601f19603f3d011682016040523d82523d6000602084013e610f59565b606091505b5091509150818015610f83575080511580610f83575080806020019051810190610f839190611469565b610d305760405162461bcd60e51b815260040161030d90611984565b80356001600160a01b0381168114610fb657600080fd5b919050565b600082601f830112610fcb578081fd5b81356020610fe0610fdb83611aac565b611a82565b8281528181019085830183850287018401881015610ffc578586fd5b855b8581101561101a57813584529284019290840190600101610ffe565b5090979650505050505050565b600082601f830112611037578081fd5b81356020611047610fdb83611aac565b8281528181019085830183850287018401881015611063578586fd5b855b8581101561101a57813561ffff8116811461107e578788fd5b84529284019290840190600101611065565b600082601f8301126110a0578081fd5b813560206110b0610fdb83611aac565b82815281810190858301838502870184018810156110cc578586fd5b855b8581101561101a57813560ff811681146110e6578788fd5b845292840192908401906001016110ce565b600060208284031215611109578081fd5b61111282610f9f565b9392505050565b60008060006060848603121561112d578182fd5b61113684610f9f565b925061114460208501610f9f565b9150604084013590509250925092565b6000806000806000806000806000806000806101808d8f031215611176578788fd5b67ffffffffffffffff8d35111561118b578788fd5b6111988e8e358f01611027565b9b5067ffffffffffffffff60208e013511156111b2578788fd5b6111c28e60208f01358f01611027565b9a5067ffffffffffffffff60408e013511156111dc578788fd5b6111ec8e60408f01358f01610fbb565b99506111fa60608e01610f9f565b985061120860808e01610f9f565b975060a08d0135965060c08d0135955067ffffffffffffffff60e08e01351115611230578485fd5b6112408e60e08f01358f01610fbb565b945067ffffffffffffffff6101008e0135111561125b578384fd5b61126c8e6101008f01358f01610fbb565b935067ffffffffffffffff6101208e01351115611287578283fd5b6112988e6101208f01358f01611090565b925067ffffffffffffffff6101408e013511156112b3578081fd5b6112c48e6101408f01358f01610fbb565b915067ffffffffffffffff6101608e013511156112df578081fd5b6112f08e6101608f01358f01610fbb565b90509295989b509295989b509295989b565b60008060008060008060008060008060006101608c8e031215611323578081fd5b67ffffffffffffffff808d351115611339578182fd5b6113468e8e358f01611027565b9b508060208e01351115611358578182fd5b6113688e60208f01358f01611027565b9a508060408e0135111561137a578182fd5b61138a8e60408f01358f01610fbb565b995061139860608e01610f9f565b985060808d0135975060a08d013596508060c08e013511156113b8578182fd5b6113c88e60c08f01358f01610fbb565b95508060e08e013511156113da578182fd5b6113ea8e60e08f01358f01610fbb565b9450806101008e013511156113fd578182fd5b61140e8e6101008f01358f01611090565b9350806101208e01351115611421578182fd5b6114328e6101208f01358f01610fbb565b9250806101408e01351115611445578182fd5b506114578d6101408e01358e01610fbb565b90509295989b509295989b9093969950565b60006020828403121561147a578081fd5b81518015158114611112578182fd5b60006020828403121561149a578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156114dd578151875295820195908201906001016114c1565b509495945050505050565b6000815180845260208085019450808401835b838110156114dd57815161ffff16875295820195908201906001016114fb565b6000815180845260208085019450808401835b838110156114dd57815160ff168752958201959082019060010161152e565b60008251815b8181101561156d5760208186018101518583015201611553565b8181111561157b5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060a0825261167860a08301886114e8565b6001600160a01b03968716602084015294861660408301525091909316606082015260800191909152919050565b600061018082526116bb61018083018f6114e8565b82810360208401526116cd818f6114e8565b905082810360408401526116e1818e6114ae565b90506116f0606084018d6114a1565b6116fd608084018c6114a1565b8960a08401528860c084015282810360e084015261171b81896114ae565b905082810361010084015261173081886114ae565b9050828103610120840152611745818761151b565b905082810361014084015261175a81866114ae565b905082810361016084015261176f81856114ae565b9f9e505050505050505050505050505050565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e6f74204554482070726f647563740000000000000000000000000000000000604082015260600190565b602080825260039082015262533a3160e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611aa457611aa4611af3565b604052919050565b600067ffffffffffffffff821115611ac657611ac6611af3565b5060209081020190565b600082821015611aee57634e487b7160e01b81526011600452602481fd5b500390565b634e487b7160e01b600052604160045260246000fdfea26469706673582212203e8c8682d0488d51da6a2dbc8f73a851aeb412abb7a19f1ca6fde8a9f56b586f64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c806393a32fb11161008a578063c5d3a10711610059578063c5d3a10714610264578063d5f4479c14610284578063d9203b9114610299578063f2fde38b146102ae576100fe565b806393a32fb114610205578063aa57511d14610218578063ad5c46481461023a578063b7160dee1461024f576100fe565b806366d38203116100c657806366d382031461018e578063715018a6146101ae5780638ab234b6146101c35780638da5cb5b146101e3576100fe565b8063092ae4dc1461010357806318a00d8e146101255780631af42c0f146101455780634a3afe701461017b576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e366004611119565b6102ce565b005b34801561013157600080fd5b506101236101403660046110f8565b610363565b34801561015157600080fd5b506101656101603660046110f8565b610420565b6040516101729190611782565b60405180910390f35b610123610189366004611302565b610435565b34801561019a57600080fd5b506101236101a93660046110f8565b61058c565b3480156101ba57600080fd5b50610123610613565b3480156101cf57600080fd5b506101236101de3660046110f8565b61069c565b3480156101ef57600080fd5b506101f8610738565b6040516101729190611586565b610123610213366004611154565b610747565b34801561022457600080fd5b5061022d610a8e565b6040516101729190611a79565b34801561024657600080fd5b506101f8610a94565b34801561025b57600080fd5b506101f8610aac565b34801561027057600080fd5b5061012361027f3660046110f8565b610ad0565b34801561029057600080fd5b506101f8610b68565b3480156102a557600080fd5b506101f8610b77565b3480156102ba57600080fd5b506101236102c93660046110f8565b610b86565b6102d6610c46565b6001600160a01b03166102e7610738565b6001600160a01b0316146103165760405162461bcd60e51b815260040161030d90611918565b60405180910390fd5b610321838383610c4a565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf243383858460405161035694939291906115b4565b60405180910390a1505050565b61036b610c46565b6001600160a01b031661037c610738565b6001600160a01b0316146103a25760405162461bcd60e51b815260040161030d90611918565b6001600160a01b0381166103c85760405162461bcd60e51b815260040161030d90611a06565b600380546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb690610415903390849061159a565b60405180910390a150565b60026020526000908152604090205460ff1681565b6001600160a01b03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146104715760405162461bcd60e51b815260040161030d906118c4565b853410156104915760405162461bcd60e51b815260040161030d906119cf565b600061049d8734611ad0565b11156104b6576104b6336104b18834611ad0565b610d37565b600460009054906101000a90046001600160a01b03166001600160a01b031663ddeb2d4e878d8d8d8d338e8e8e8e8e8e8e6040518e63ffffffff1660e01b815260040161050e9c9b9a999897969594939291906116a6565b6000604051808303818588803b15801561052757600080fd5b505af115801561053b573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8b338a8b8a604051610577959493929190611665565b60405180910390a15050505050505050505050565b610594610c46565b6001600160a01b03166105a5610738565b6001600160a01b0316146105cb5760405162461bcd60e51b815260040161030d90611918565b6001600160a01b0381166105f15760405162461bcd60e51b815260040161030d906118fb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61061b610c46565b6001600160a01b031661062c610738565b6001600160a01b0316146106525760405162461bcd60e51b815260040161030d90611918565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6106a4610c46565b6001600160a01b03166106b5610738565b6001600160a01b0316146106db5760405162461bcd60e51b815260040161030d90611918565b6001600160a01b03811660009081526002602052604090205460ff16156107145760405162461bcd60e51b815260040161030d9061188d565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000546001600160a01b031690565b60006001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156107f95760035460405163ba560ed960e01b81526001600160a01b039091169063ba560ed9906107a0908c908b9060040161162b565b602060405180830381600087803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190611489565b9050610882565b600354604051631a44cdf360e11b81526001600160a01b03909116906334899be69061082d908c908e908c906004016115de565b602060405180830381600087803b15801561084757600080fd5b505af115801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f9190611489565b90505b61088e89333084610dc9565b6003546108a6908a906001600160a01b031683610eb9565b6001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610936576003546040516303790ccd60e21b81526001600160a01b0390911690630de43334906108ff908c9085908c90600401611644565b600060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b505050506109b6565b60035460405163406e622b60e11b81526001600160a01b03909116906380dcc4569061096c908c908e9086908d90600401611602565b600060405180830381600087803b15801561098657600080fd5b505af115801561099a573d6000803e3d6000fd5b50506004546109b692508c91506001600160a01b031689610eb9565b600460009054906101000a90046001600160a01b03166001600160a01b031663ddeb2d4e888f8f8f8f338f8f8f8f8f8f8f6040518e63ffffffff1660e01b8152600401610a0e9c9b9a999897969594939291906116a6565b6000604051808303818588803b158015610a2757600080fd5b505af1158015610a3b573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8d338c8c8b604051610a77959493929190611665565b60405180910390a150505050505050505050505050565b60015481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ad8610c46565b6001600160a01b0316610ae9610738565b6001600160a01b031614610b0f5760405162461bcd60e51b815260040161030d90611918565b6001600160a01b03811660009081526002602052604090205460ff16610b475760405162461bcd60e51b815260040161030d9061194d565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6004546001600160a01b031681565b6003546001600160a01b031681565b610b8e610c46565b6001600160a01b0316610b9f610738565b6001600160a01b031614610bc55760405162461bcd60e51b815260040161030d90611918565b6001600160a01b038116610beb5760405162461bcd60e51b815260040161030d9061178d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600080846001600160a01b031663a9059cbb8585604051602401610c6f92919061162b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610ca8919061154d565b6000604051808303816000865af19150503d8060008114610ce5576040519150601f19603f3d011682016040523d82523d6000602084013e610cea565b606091505b5091509150818015610d14575080511580610d14575080806020019051810190610d149190611469565b610d305760405162461bcd60e51b815260040161030d90611a2c565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051610d61919061154d565b60006040518083038185875af1925050503d8060008114610d9e576040519150601f19603f3d011682016040523d82523d6000602084013e610da3565b606091505b5050905080610dc45760405162461bcd60e51b815260040161030d90611830565b505050565b600080856001600160a01b03166323b872dd868686604051602401610df0939291906115de565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610e29919061154d565b6000604051808303816000865af19150503d8060008114610e66576040519150601f19603f3d011682016040523d82523d6000602084013e610e6b565b606091505b5091509150818015610e95575080511580610e95575080806020019051810190610e959190611469565b610eb15760405162461bcd60e51b815260040161030d906117d3565b505050505050565b600080846001600160a01b031663095ea7b38585604051602401610ede92919061162b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610f17919061154d565b6000604051808303816000865af19150503d8060008114610f54576040519150601f19603f3d011682016040523d82523d6000602084013e610f59565b606091505b5091509150818015610f83575080511580610f83575080806020019051810190610f839190611469565b610d305760405162461bcd60e51b815260040161030d90611984565b80356001600160a01b0381168114610fb657600080fd5b919050565b600082601f830112610fcb578081fd5b81356020610fe0610fdb83611aac565b611a82565b8281528181019085830183850287018401881015610ffc578586fd5b855b8581101561101a57813584529284019290840190600101610ffe565b5090979650505050505050565b600082601f830112611037578081fd5b81356020611047610fdb83611aac565b8281528181019085830183850287018401881015611063578586fd5b855b8581101561101a57813561ffff8116811461107e578788fd5b84529284019290840190600101611065565b600082601f8301126110a0578081fd5b813560206110b0610fdb83611aac565b82815281810190858301838502870184018810156110cc578586fd5b855b8581101561101a57813560ff811681146110e6578788fd5b845292840192908401906001016110ce565b600060208284031215611109578081fd5b61111282610f9f565b9392505050565b60008060006060848603121561112d578182fd5b61113684610f9f565b925061114460208501610f9f565b9150604084013590509250925092565b6000806000806000806000806000806000806101808d8f031215611176578788fd5b67ffffffffffffffff8d35111561118b578788fd5b6111988e8e358f01611027565b9b5067ffffffffffffffff60208e013511156111b2578788fd5b6111c28e60208f01358f01611027565b9a5067ffffffffffffffff60408e013511156111dc578788fd5b6111ec8e60408f01358f01610fbb565b99506111fa60608e01610f9f565b985061120860808e01610f9f565b975060a08d0135965060c08d0135955067ffffffffffffffff60e08e01351115611230578485fd5b6112408e60e08f01358f01610fbb565b945067ffffffffffffffff6101008e0135111561125b578384fd5b61126c8e6101008f01358f01610fbb565b935067ffffffffffffffff6101208e01351115611287578283fd5b6112988e6101208f01358f01611090565b925067ffffffffffffffff6101408e013511156112b3578081fd5b6112c48e6101408f01358f01610fbb565b915067ffffffffffffffff6101608e013511156112df578081fd5b6112f08e6101608f01358f01610fbb565b90509295989b509295989b509295989b565b60008060008060008060008060008060006101608c8e031215611323578081fd5b67ffffffffffffffff808d351115611339578182fd5b6113468e8e358f01611027565b9b508060208e01351115611358578182fd5b6113688e60208f01358f01611027565b9a508060408e0135111561137a578182fd5b61138a8e60408f01358f01610fbb565b995061139860608e01610f9f565b985060808d0135975060a08d013596508060c08e013511156113b8578182fd5b6113c88e60c08f01358f01610fbb565b95508060e08e013511156113da578182fd5b6113ea8e60e08f01358f01610fbb565b9450806101008e013511156113fd578182fd5b61140e8e6101008f01358f01611090565b9350806101208e01351115611421578182fd5b6114328e6101208f01358f01610fbb565b9250806101408e01351115611445578182fd5b506114578d6101408e01358e01610fbb565b90509295989b509295989b9093969950565b60006020828403121561147a578081fd5b81518015158114611112578182fd5b60006020828403121561149a578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156114dd578151875295820195908201906001016114c1565b509495945050505050565b6000815180845260208085019450808401835b838110156114dd57815161ffff16875295820195908201906001016114fb565b6000815180845260208085019450808401835b838110156114dd57815160ff168752958201959082019060010161152e565b60008251815b8181101561156d5760208186018101518583015201611553565b8181111561157b5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060a0825261167860a08301886114e8565b6001600160a01b03968716602084015294861660408301525091909316606082015260800191909152919050565b600061018082526116bb61018083018f6114e8565b82810360208401526116cd818f6114e8565b905082810360408401526116e1818e6114ae565b90506116f0606084018d6114a1565b6116fd608084018c6114a1565b8960a08401528860c084015282810360e084015261171b81896114ae565b905082810361010084015261173081886114ae565b9050828103610120840152611745818761151b565b905082810361014084015261175a81866114ae565b905082810361016084015261176f81856114ae565b9f9e505050505050505050505050505050565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e6f74204554482070726f647563740000000000000000000000000000000000604082015260600190565b602080825260039082015262533a3160e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611aa457611aa4611af3565b604052919050565b600067ffffffffffffffff821115611ac657611ac6611af3565b5060209081020190565b600082821015611aee57634e487b7160e01b81526011600452602481fd5b500390565b634e487b7160e01b600052604160045260246000fdfea26469706673582212203e8c8682d0488d51da6a2dbc8f73a851aeb412abb7a19f1ca6fde8a9f56b586f64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyCoverByToken(uint16[],uint16[],uint256[],address,address,uint256,uint256,uint256[],uint256[],uint8[],bytes32[],bytes32[])": {
        "details": "Through this function, users can get covers from Insure by some tokens such as CVR... if users want to save gas fee, he shoud reach to this function through MultiSigWallet."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAsset(address,address,uint256)": {
        "details": "For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "We are supporting only CVR for InsureAce",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3751,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "productIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1476_storage"
      },
      {
        "astId": 3755,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3757,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3919,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "coverContractAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Counter)1476_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1475,
            "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}