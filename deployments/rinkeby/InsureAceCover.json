{
  "address": "0x98b9F6a9E25e497b135a4751C6ad291912f3c2BE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CVR",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coverContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "productIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "BuyInsureAce",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "SetExchangeAgent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAsset",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "products",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "durationInDays",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "helperParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "securityParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "buyCoverByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "products",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "durationInDays",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "helperParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "securityParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "buyCoverByToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coverContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coverContractAddress",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xab71e4bd0c27fc54bc17a75cbb8a49e7bfa37310bd845e42ac4077b3649ef3b5",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x98b9F6a9E25e497b135a4751C6ad291912f3c2BE",
    "transactionIndex": 2,
    "gasUsed": "2219579",
    "logsBloom": "0x
    "blockHash": "0xa5619f6c987b49fb02fd6afa2d4f75912b898c1916396d0188862fec906ef423",
    "transactionHash": "0xab71e4bd0c27fc54bc17a75cbb8a49e7bfa37310bd845e42ac4077b3649ef3b5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9895177,
        "transactionHash": "0xab71e4bd0c27fc54bc17a75cbb8a49e7bfa37310bd845e42ac4077b3649ef3b5",
        "address": "0x98b9F6a9E25e497b135a4751C6ad291912f3c2BE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xa5619f6c987b49fb02fd6afa2d4f75912b898c1916396d0188862fec906ef423"
      }
    ],
    "blockNumber": 9895177,
    "cumulativeGasUsed": "2274123",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd3e48FAcD30A73609ffA60AE84851e72d10fEa52",
    "0x9717cA3f6b5E560d244D41791D5760316d2b7bFE",
    "0x0921f628b8463227615D2199D0D3860E4fBcD411"
  ],
  "solcInputHash": "402f1543afb350be708cd1fbe1e6e8a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CVR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"productIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyInsureAce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"SetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyCoverByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyCoverByToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyCoverByToken(uint16[],uint16[],uint256[],address,address,uint256,uint256,uint256[],uint256[],uint8[],bytes32[],bytes32[])\":{\"details\":\"Through this function, users can get covers from Insure by some tokens such as CVR...\"},\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"params\":{\"functionSignature\":\"Signature of the actual function to be called via meta transaction\",\"sigR\":\"R part of the signature\",\"sigS\":\"S part of the signature\",\"sigV\":\"V part of the signature\",\"userAddress\":\"Address of user trying to do meta transaction\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAsset(address,address,uint256)\":{\"details\":\"For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)\":{\"notice\":\"Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.\"}},\"notice\":\"We are supporting only CVR for InsureAce\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onchain/InsureAceCover.sol\":\"InsureAceCover\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeAgent {\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _desiredAmount\\n    ) external returns (uint256);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function swapTokenWithETH(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n\\n    function swapTokenWithToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1aad6c6cae768a559b0c7ed1de81906e327e45f93a1f7a3bdc25c7323a959d0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IInsureAce.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IInsureAce {\\n    function getPremium(\\n        uint256[] memory products,\\n        uint256[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256[] memory rewardPercentages\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256[] memory\\n        );\\n\\n    function buyCover(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters,\\n        uint256[] memory securityParameters,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    ) external payable;\\n\\n    function unlockRewardByController(address owner, address to) external returns (uint256);\\n\\n    function getRewardAmount() external view returns (uint256);\\n\\n    function getCoverOwnerRewardAmount(uint256 premiumAmount2Insur, uint256 overwrittenRewardPctg)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getINSURRewardBalanceDetails() external view returns (uint256, uint256);\\n\\n    function removeINSURRewardBalance(address toAddress, uint256 amount) external;\\n\\n    function setBuyCoverMaxBlkNumLatency(uint256 numOfBlocks) external;\\n\\n    function setBuyCoverSigner(address signer, bool enabled) external;\\n\\n    function data() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3d43fe78b2a5fb29ea38d6432344e9de7a73edf0da1c2618b093f1035b40b3e8\",\"license\":\"GPL-3.0\"},\"contracts/libs/BasicMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract BasicMetaTransaction {\\r\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\r\\n\\r\\n    mapping(address => uint256) private nonces;\\r\\n\\r\\n    /**\\r\\n     * Main function to be called when user wants to execute meta transaction.\\r\\n     * The actual function to be called should be passed as param with name functionSignature\\r\\n     * Here the basic signature recovery is being used. Signature is expected to be generated using\\r\\n     * personal_sign method.\\r\\n     * @param userAddress Address of user trying to do meta transaction\\r\\n     * @param functionSignature Signature of the actual function to be called via meta transaction\\r\\n     * @param sigR R part of the signature\\r\\n     * @param sigS S part of the signature\\r\\n     * @param sigV V part of the signature\\r\\n     */\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public payable returns (bytes memory) {\\r\\n        require(\\r\\n            verify(userAddress, nonces[userAddress], block.chainid, functionSignature, sigR, sigS, sigV),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n        nonces[userAddress] += 1;\\r\\n\\r\\n        // Append userAddress at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\r\\n\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function getNonce(address user) external view returns (uint256 nonce) {\\r\\n        nonce = nonces[user];\\r\\n    }\\r\\n\\r\\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\\r\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address owner,\\r\\n        uint256 nonce,\\r\\n        uint256 chainID,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 hash = prefixed(keccak256(abi.encodePacked(nonce, this, chainID, functionSignature)));\\r\\n        address signer = ecrecover(hash, sigV, sigR, sigS);\\r\\n        require(signer != address(0), \\\"Invalid signature\\\");\\r\\n        return (owner == signer);\\r\\n    }\\r\\n\\r\\n    function msgSender() internal view returns (address sender) {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\r\\n            }\\r\\n        } else {\\r\\n            return msg.sender;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x039006f9bcbc41d558b9b397bf9e0649fc2a46b2c335a8f6066cb23605e43fdf\",\"license\":\"MIT\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/onchain/BaseCoverOnChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"../libs/TransferHelper.sol\\\";\\r\\nimport \\\"../libs/BasicMetaTransaction.sol\\\";\\r\\n\\r\\ncontract BaseCoverOnChain is Ownable, Pausable, BasicMetaTransaction {\\r\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\r\\n    event WithdrawAsset(address _user, address _to, address _token, uint256 _amount);\\r\\n    event SetExchangeAgent(address _setter, address _exchangeAgent);\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter public productIds;\\r\\n    mapping(address => bool) public availableCurrencies;\\r\\n\\r\\n    // address public immutable WETH;\\r\\n    address public exchangeAgent;\\r\\n\\r\\n    constructor(address _CVR, address _exchangeAgent) {\\r\\n        availableCurrencies[_CVR] = true;\\r\\n        exchangeAgent = _exchangeAgent;\\r\\n    }\\r\\n\\r\\n    modifier onlyAvailableToken(address _token) {\\r\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function addCurrency(address _currency) external onlyOwner {\\r\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\r\\n        availableCurrencies[_currency] = true;\\r\\n    }\\r\\n\\r\\n    function removeCurrency(address _currency) external onlyOwner {\\r\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\r\\n        availableCurrencies[_currency] = false;\\r\\n    }\\r\\n\\r\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\r\\n        require(_exchangeAgent != address(0), \\\"ZERO Address\\\");\\r\\n        exchangeAgent = _exchangeAgent;\\r\\n        emit SetExchangeAgent(msg.sender, _exchangeAgent);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev For reflect tokens, we should deposit some tokens at contract directly,\\r\\n     * We will withdraw tokens deposited at contract through this function\\r\\n     */\\r\\n    function withdrawAsset(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        TransferHelper.safeTransfer(_token, _to, _amount);\\r\\n        emit WithdrawAsset(msgSender(), _to, _token, _amount);\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x388ea1c5a19bc25cfdde0430ec4950f242b6784c73ec1bfd00625c8065aac268\",\"license\":\"MIT\"},\"contracts/onchain/InsureAceCover.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\r\\nimport {IInsureAce} from \\\"../interfaces/IInsureAce.sol\\\";\\r\\nimport \\\"./BaseCoverOnChain.sol\\\";\\r\\n\\r\\n/**\\r\\n * We are supporting only CVR for InsureAce\\r\\n */\\r\\ncontract InsureAceCover is BaseCoverOnChain, ReentrancyGuard {\\r\\n    event BuyInsureAce(uint16[] productIds, address _buyer, address _currency, address _token, uint256 _amount);\\r\\n\\r\\n    address public coverContractAddress;\\r\\n    // This is the WETH address of InsureAce smart contract\\r\\n    address public constant WETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    constructor(\\r\\n        address _CVR,\\r\\n        address _exchangeAgent,\\r\\n        address _coverContractAddress\\r\\n    ) BaseCoverOnChain(_CVR, _exchangeAgent) {\\r\\n        require(_coverContractAddress != address(0), \\\"S:1\\\");\\r\\n        coverContractAddress = _coverContractAddress;\\r\\n    }\\r\\n\\r\\n    function setup(address _coverContractAddress) external onlyOwner {\\r\\n        require(_coverContractAddress != address(0), \\\"S:1\\\");\\r\\n        coverContractAddress = _coverContractAddress;\\r\\n    }\\r\\n\\r\\n    function buyCoverByETH(\\r\\n        uint16[] memory products,\\r\\n        uint16[] memory durationInDays,\\r\\n        uint256[] memory amounts,\\r\\n        address currency,\\r\\n        uint256 referralCode,\\r\\n        uint256 premiumAmount,\\r\\n        uint256[] memory helperParameters,\\r\\n        uint256[] memory securityParameters,\\r\\n        uint8[] memory v,\\r\\n        bytes32[] memory r,\\r\\n        bytes32[] memory s\\r\\n    ) external payable nonReentrant whenNotPaused {\\r\\n        require(currency == WETH, \\\"Not ETH product\\\");\\r\\n        require(msg.value >= premiumAmount, \\\"Insufficient amount\\\");\\r\\n        if (msg.value - premiumAmount > 0) {\\r\\n            TransferHelper.safeTransferETH(msgSender(), msg.value - premiumAmount);\\r\\n        }\\r\\n\\r\\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\\r\\n            products,\\r\\n            durationInDays,\\r\\n            amounts,\\r\\n            currency,\\r\\n            msgSender(),\\r\\n            referralCode,\\r\\n            premiumAmount,\\r\\n            helperParameters,\\r\\n            securityParameters,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n\\r\\n        emit BuyInsureAce(products, msgSender(), currency, currency, premiumAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Through this function, users can get covers from Insure by some tokens such as CVR...\\r\\n     */\\r\\n    function buyCoverByToken(\\r\\n        uint16[] memory products,\\r\\n        uint16[] memory durationInDays,\\r\\n        uint256[] memory amounts,\\r\\n        address currency,\\r\\n        address _token,\\r\\n        uint256 referralCode,\\r\\n        uint256 premiumAmount,\\r\\n        uint256[] memory helperParameters,\\r\\n        uint256[] memory securityParameters,\\r\\n        uint8[] memory v,\\r\\n        bytes32[] memory r,\\r\\n        bytes32[] memory s\\r\\n    ) external payable nonReentrant whenNotPaused {\\r\\n        uint256 amount;\\r\\n        if (currency == WETH) {\\r\\n            amount = IExchangeAgent(exchangeAgent).getTokenAmountForETH(_token, premiumAmount);\\r\\n        } else {\\r\\n            amount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(_token, currency, premiumAmount);\\r\\n        }\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_token, msgSender(), address(this), amount);\\r\\n        TransferHelper.safeApprove(_token, exchangeAgent, amount);\\r\\n\\r\\n        if (currency == WETH) {\\r\\n            IExchangeAgent(exchangeAgent).swapTokenWithETH(_token, amount, premiumAmount);\\r\\n        } else {\\r\\n            IExchangeAgent(exchangeAgent).swapTokenWithToken(_token, currency, amount, premiumAmount);\\r\\n            TransferHelper.safeApprove(currency, coverContractAddress, premiumAmount);\\r\\n        }\\r\\n\\r\\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\\r\\n            products,\\r\\n            durationInDays,\\r\\n            amounts,\\r\\n            currency,\\r\\n            msgSender(),\\r\\n            referralCode,\\r\\n            premiumAmount,\\r\\n            helperParameters,\\r\\n            securityParameters,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n\\r\\n        emit BuyInsureAce(products, msgSender(), currency, _token, premiumAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x59236e96db4c95ad02e1efcd96b73395bff93264eb86468eeee1355d5efb025d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061013e5760003560e01c8063715018a6116100bb578063aa57511d1161007f578063d5f4479c11610059578063d5f4479c14610355578063d9203b911461036a578063f2fde38b1461037f57610145565b8063aa57511d1461030b578063ad5c464814610320578063c5d3a1071461033557610145565b8063715018a61461028c5780638456cb59146102a15780638ab234b6146102b65780638da5cb5b146102d657806393a32fb1146102f857610145565b80633f4ba83a116101025780633f4ba83a1461020f5780634a3afe70146102245780635c975abb146102375780636281133d1461024c57806366d382031461026c57610145565b8063092ae4dc1461014a5780630c53c51c1461016c57806318a00d8e146101955780631af42c0f146101b55780632d0335ab146101e257610145565b3661014557005b600080fd5b34801561015657600080fd5b5061016a610165366004611724565b61039f565b005b61017f61017a36600461175f565b61043b565b60405161018c9190611f9b565b60405180910390f35b3480156101a157600080fd5b5061016a6101b0366004611703565b610591565b3480156101c157600080fd5b506101d56101d0366004611703565b61064e565b60405161018c9190611f72565b3480156101ee57600080fd5b506102026101fd366004611703565b610663565b60405161018c91906123ee565b34801561021b57600080fd5b5061016a61067e565b61016a610232366004611a00565b6106c7565b34801561024357600080fd5b506101d5610872565b34801561025857600080fd5b506101d56102673660046117cf565b610883565b34801561027857600080fd5b5061016a610287366004611703565b610953565b34801561029857600080fd5b5061016a6109da565b3480156102ad57600080fd5b5061016a610a63565b3480156102c257600080fd5b5061016a6102d1366004611703565b610aaa565b3480156102e257600080fd5b506102eb610b46565b60405161018c9190611d41565b61016a610306366004611852565b610b55565b34801561031757600080fd5b50610202610eec565b34801561032c57600080fd5b506102eb610ef2565b34801561034157600080fd5b5061016a610350366004611703565b610f0a565b34801561036157600080fd5b506102eb610fa2565b34801561037657600080fd5b506102eb610fb1565b34801561038b57600080fd5b5061016a61039a366004611703565b610fc0565b6103a7611080565b6001600160a01b03166103b8610b46565b6001600160a01b0316146103e75760405162461bcd60e51b81526004016103de90612215565b60405180910390fd5b6103f2838383611084565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf2461041b611171565b83858460405161042e9493929190611da4565b60405180910390a1505050565b6001600160a01b0385166000908152600160205260409020546060906104679087904688888888610883565b6104835760405162461bcd60e51b81526004016103de90612281565b6001600160a01b038616600090815260016020819052604082208054919290916104ae908490612445565b9091555050604051600090819030906104cd9089908b90602001611c93565b60408051601f19818403018152908290526104e791611c77565b6000604051808303816000865af19150503d8060008114610524576040519150601f19603f3d011682016040523d82523d6000602084013e610529565b606091505b50915091508161054b5760405162461bcd60e51b81526004016103de9061202b565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b88338960405161057e93929190611d6f565b60405180910390a1979650505050505050565b610599611080565b6001600160a01b03166105aa610b46565b6001600160a01b0316146105d05760405162461bcd60e51b81526004016103de90612215565b6001600160a01b0381166105f65760405162461bcd60e51b81526004016103de90612344565b600480546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb6906106439033908490611d55565b60405180910390a150565b60036020526000908152604090205460ff1681565b6001600160a01b031660009081526001602052604090205490565b610686611080565b6001600160a01b0316610697610b46565b6001600160a01b0316146106bd5760405162461bcd60e51b81526004016103de90612215565b6106c56111cf565b565b600260055414156106ea5760405162461bcd60e51b81526004016103de906123b7565b60026005556106f7610872565b156107145760405162461bcd60e51b81526004016103de9061218a565b6001600160a01b03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146107505760405162461bcd60e51b81526004016103de906121c1565b853410156107705760405162461bcd60e51b81526004016103de9061230d565b600061077c873461245d565b111561079c5761079c61078d611171565b610797883461245d565b611240565b6006546001600160a01b031663ddeb2d4e878d8d8d8d6107ba611171565b8e8e8e8e8e8e8e6040518e63ffffffff1660e01b81526004016107e89c9b9a99989796959493929190611e96565b6000604051808303818588803b15801561080157600080fd5b505af1158015610815573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8b610844611171565b8a8b8a604051610858959493929190611e55565b60405180910390a150506001600555505050505050505050565b600054600160a01b900460ff165b90565b6000806108bb883089896040516020016108a09493929190611cfb565b604051602081830303815290604052805190602001206112d2565b90506000600182858888604051600081526020016040526040516108e29493929190611f7d565b6020604051602081039080840390855afa158015610904573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109375760405162461bcd60e51b81526004016103de9061211c565b6001600160a01b038a8116911614915050979650505050505050565b61095b611080565b6001600160a01b031661096c610b46565b6001600160a01b0316146109925760405162461bcd60e51b81526004016103de90612215565b6001600160a01b0381166109b85760405162461bcd60e51b81526004016103de906121f8565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6109e2611080565b6001600160a01b03166109f3610b46565b6001600160a01b031614610a195760405162461bcd60e51b81526004016103de90612215565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610a6b611080565b6001600160a01b0316610a7c610b46565b6001600160a01b031614610aa25760405162461bcd60e51b81526004016103de90612215565b6106c5611303565b610ab2611080565b6001600160a01b0316610ac3610b46565b6001600160a01b031614610ae95760405162461bcd60e51b81526004016103de90612215565b6001600160a01b03811660009081526003602052604090205460ff1615610b225760405162461bcd60e51b81526004016103de90612153565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b6000546001600160a01b031690565b60026005541415610b785760405162461bcd60e51b81526004016103de906123b7565b6002600555610b85610872565b15610ba25760405162461bcd60e51b81526004016103de9061218a565b60006001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610c53576004805460405163ba560ed960e01b81526001600160a01b039091169163ba560ed991610bfa918d918c9101611e1b565b602060405180830381600087803b158015610c1457600080fd5b505af1158015610c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c9190611b87565b9050610cdb565b60048054604051631a44cdf360e11b81526001600160a01b03909116916334899be691610c86918d918f918d9101611dce565b602060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd89190611b87565b90505b610cee89610ce7611171565b3084611364565b600454610d06908a906001600160a01b031683611454565b6001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610d9557600480546040516303790ccd60e21b81526001600160a01b0390911691630de4333491610d5e918d9186918d9101611e34565b600060405180830381600087803b158015610d7857600080fd5b505af1158015610d8c573d6000803e3d6000fd5b50505050610e14565b6004805460405163406e622b60e11b81526001600160a01b03909116916380dcc45691610dca918d918f9187918e9101611df2565b600060405180830381600087803b158015610de457600080fd5b505af1158015610df8573d6000803e3d6000fd5b5050600654610e1492508c91506001600160a01b031689611454565b6006546001600160a01b031663ddeb2d4e888f8f8f8f610e32611171565b8f8f8f8f8f8f8f6040518e63ffffffff1660e01b8152600401610e609c9b9a99989796959493929190611e96565b6000604051808303818588803b158015610e7957600080fd5b505af1158015610e8d573d6000803e3d6000fd5b50505050507f59d66a3b6cbfa0745bc5ae77069c99fa61fbed2fe228b2c21a3fdd416bd5badf8d610ebc611171565b8c8c8b604051610ed0959493929190611e55565b60405180910390a1505060016005555050505050505050505050565b60025481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b610f12611080565b6001600160a01b0316610f23610b46565b6001600160a01b031614610f495760405162461bcd60e51b81526004016103de90612215565b6001600160a01b03811660009081526003602052604090205460ff16610f815760405162461bcd60e51b81526004016103de9061224a565b6001600160a01b03166000908152600360205260409020805460ff19169055565b6006546001600160a01b031681565b6004546001600160a01b031681565b610fc8611080565b6001600160a01b0316610fd9610b46565b6001600160a01b031614610fff5760405162461bcd60e51b81526004016103de90612215565b6001600160a01b0381166110255760405162461bcd60e51b81526004016103de90611fe5565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600080846001600160a01b031663a9059cbb85856040516024016110a9929190611e1b565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516110e29190611c77565b6000604051808303816000865af19150503d806000811461111f576040519150601f19603f3d011682016040523d82523d6000602084013e611124565b606091505b509150915081801561114e57508051158061114e57508080602001905181019061114e9190611b67565b61116a5760405162461bcd60e51b81526004016103de9061236a565b5050505050565b6000333014156111c857600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506108809050565b5033610880565b6111d7610872565b6111f35760405162461bcd60e51b81526004016103de90611fae565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611229611080565b6040516112369190611d41565b60405180910390a1565b604080516000808252602082019092526001600160a01b03841690839060405161126a9190611c77565b60006040518083038185875af1925050503d80600081146112a7576040519150601f19603f3d011682016040523d82523d6000602084013e6112ac565b606091505b50509050806112cd5760405162461bcd60e51b81526004016103de906120bf565b505050565b6000816040516020016112e59190611cca565b6040516020818303038152906040528051906020012090505b919050565b61130b610872565b156113285760405162461bcd60e51b81526004016103de9061218a565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611229611080565b600080856001600160a01b03166323b872dd86868660405160240161138b93929190611dce565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516113c49190611c77565b6000604051808303816000865af19150503d8060008114611401576040519150601f19603f3d011682016040523d82523d6000602084013e611406565b606091505b50915091508180156114305750805115806114305750808060200190518101906114309190611b67565b61144c5760405162461bcd60e51b81526004016103de90612062565b505050505050565b600080846001600160a01b031663095ea7b38585604051602401611479929190611e1b565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516114b29190611c77565b6000604051808303816000865af19150503d80600081146114ef576040519150601f19603f3d011682016040523d82523d6000602084013e6114f4565b606091505b509150915081801561151e57508051158061151e57508080602001905181019061151e9190611b67565b61116a5760405162461bcd60e51b81526004016103de906122c2565b80356001600160a01b03811681146112fe57600080fd5b600082601f830112611561578081fd5b8135602061157661157183612421565b6123f7565b8281528181019085830183850287018401881015611592578586fd5b855b858110156115b057813584529284019290840190600101611594565b5090979650505050505050565b600082601f8301126115cd578081fd5b813560206115dd61157183612421565b82815281810190858301838502870184018810156115f9578586fd5b855b858110156115b057813561ffff81168114611614578788fd5b845292840192908401906001016115fb565b600082601f830112611636578081fd5b8135602061164661157183612421565b8281528181019085830183850287018401881015611662578586fd5b855b858110156115b057611675826116f2565b84529284019290840190600101611664565b600082601f830112611697578081fd5b813567ffffffffffffffff8111156116b1576116b16124ba565b6116c4601f8201601f19166020016123f7565b8181528460208386010111156116d8578283fd5b816020850160208301379081016020019190915292915050565b803560ff811681146112fe57600080fd5b600060208284031215611714578081fd5b61171d8261153a565b9392505050565b600080600060608486031215611738578182fd5b6117418461153a565b925061174f6020850161153a565b9150604084013590509250925092565b600080600080600060a08688031215611776578081fd5b61177f8661153a565b9450602086013567ffffffffffffffff81111561179a578182fd5b6117a688828901611687565b94505060408601359250606086013591506117c3608087016116f2565b90509295509295909350565b600080600080600080600060e0888a0312156117e9578182fd5b6117f28861153a565b96506020880135955060408801359450606088013567ffffffffffffffff81111561181b578283fd5b6118278a828b01611687565b9450506080880135925060a0880135915061184460c089016116f2565b905092959891949750929550565b6000806000806000806000806000806000806101808d8f031215611874578586fd5b67ffffffffffffffff8d351115611889578586fd5b6118968e8e358f016115bd565b9b5067ffffffffffffffff60208e013511156118b0578586fd5b6118c08e60208f01358f016115bd565b9a5067ffffffffffffffff60408e013511156118da578586fd5b6118ea8e60408f01358f01611551565b99506118f860608e0161153a565b985061190660808e0161153a565b975060a08d0135965060c08d0135955067ffffffffffffffff60e08e0135111561192e578485fd5b61193e8e60e08f01358f01611551565b945067ffffffffffffffff6101008e01351115611959578384fd5b61196a8e6101008f01358f01611551565b935067ffffffffffffffff6101208e01351115611985578283fd5b6119968e6101208f01358f01611626565b925067ffffffffffffffff6101408e013511156119b1578081fd5b6119c28e6101408f01358f01611551565b915067ffffffffffffffff6101608e013511156119dd578081fd5b6119ee8e6101608f01358f01611551565b90509295989b509295989b509295989b565b60008060008060008060008060008060006101608c8e031215611a21578485fd5b67ffffffffffffffff808d351115611a37578586fd5b611a448e8e358f016115bd565b9b508060208e01351115611a56578586fd5b611a668e60208f01358f016115bd565b9a508060408e01351115611a78578586fd5b611a888e60408f01358f01611551565b9950611a9660608e0161153a565b985060808d0135975060a08d013596508060c08e01351115611ab6578586fd5b611ac68e60c08f01358f01611551565b95508060e08e01351115611ad8578485fd5b611ae88e60e08f01358f01611551565b9450806101008e01351115611afb578182fd5b611b0c8e6101008f01358f01611626565b9350806101208e01351115611b1f578182fd5b611b308e6101208f01358f01611551565b9250806101408e01351115611b43578182fd5b50611b558d6101408e01358e01611551565b90509295989b509295989b9093969950565b600060208284031215611b78578081fd5b8151801515811461171d578182fd5b600060208284031215611b98578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015611bdb57815187529582019590820190600101611bbf565b509495945050505050565b6000815180845260208085019450808401835b83811015611bdb57815161ffff1687529582019590820190600101611bf9565b6000815180845260208085019450808401835b83811015611bdb57815160ff1687529582019590820190600101611c2c565b60008151808452611c63816020860160208601612474565b601f01601f19169290920160200192915050565b60008251611c89818460208701612474565b9190910192915050565b60008351611ca5818460208801612474565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60008582526bffffffffffffffffffffffff198560601b1660208301528360348301528251611d31816054850160208701612474565b9190910160540195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60006001600160a01b03808616835280851660208401525060606040830152611d9b6060830184611c4b565b95945050505050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060a08252611e6860a0830188611be6565b6001600160a01b03968716602084015294861660408301525091909316606082015260800191909152919050565b60006101808252611eab61018083018f611be6565b8281036020840152611ebd818f611be6565b90508281036040840152611ed1818e611bac565b9050611ee0606084018d611b9f565b611eed608084018c611b9f565b8960a08401528860c084015282810360e0840152611f0b8189611bac565b9050828103610100840152611f208188611bac565b9050828103610120840152611f358187611c19565b9050828103610140840152611f4a8186611bac565b9050828103610160840152611f5f8185611bac565b9f9e505050505050505050505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261171d6020830184611c4b565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f496e76616c6964207369676e6174757265000000000000000000000000000000604082015260600190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e6f74204554482070726f647563740000000000000000000000000000000000604082015260600190565b602080825260039082015262533a3160e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612419576124196124ba565b604052919050565b600067ffffffffffffffff82111561243b5761243b6124ba565b5060209081020190565b60008219821115612458576124586124a4565b500190565b60008282101561246f5761246f6124a4565b500390565b60005b8381101561248f578181015183820152602001612477565b8381111561249e576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220777bdd33c56a8a7021323fca3e8604f2fb488de9fc3fb19d239ffb398457ef2564736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyCoverByToken(uint16[],uint16[],uint256[],address,address,uint256,uint256,uint256[],uint256[],uint8[],bytes32[],bytes32[])": {
        "details": "Through this function, users can get covers from Insure by some tokens such as CVR..."
      },
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "params": {
          "functionSignature": "Signature of the actual function to be called via meta transaction",
          "sigR": "R part of the signature",
          "sigS": "S part of the signature",
          "sigV": "V part of the signature",
          "userAddress": "Address of user trying to do meta transaction"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAsset(address,address,uint256)": {
        "details": "For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
        "notice": "Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method."
      }
    },
    "notice": "We are supporting only CVR for InsureAce",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 127,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2117,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4141,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "productIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1041_storage"
      },
      {
        "astId": 4145,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4147,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 212,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4328,
        "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
        "label": "coverContractAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)1041_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1040,
            "contract": "contracts/onchain/InsureAceCover.sol:InsureAceCover",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}