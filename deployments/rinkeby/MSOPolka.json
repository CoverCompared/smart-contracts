{
  "address": "0x5321C2f7dD289786E63592De491F1B824A8fDafC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_priceInUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_conciergePrice",
          "type": "uint256"
        }
      ],
      "name": "BuyMSO",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "SetExchangeAgent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conciergePrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "buyProductByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "conciergePrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "buyProductByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prodId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_idx",
          "type": "uint64"
        }
      ],
      "name": "productOf",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "string",
          "name": "productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conciergePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb35758db6ce781c74233eb927414422e2cb71f82029b2ebdc8fa42107a425c59",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x5321C2f7dD289786E63592De491F1B824A8fDafC",
    "transactionIndex": 0,
    "gasUsed": "1585089",
    "logsBloom": "0x
    "blockHash": "0x0c50449c706fca89c62ede5b05ebf5e3981a8f74ac89ab2ccf30cfcb647ee0d8",
    "transactionHash": "0xb35758db6ce781c74233eb927414422e2cb71f82029b2ebdc8fa42107a425c59",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9827587,
        "transactionHash": "0xb35758db6ce781c74233eb927414422e2cb71f82029b2ebdc8fa42107a425c59",
        "address": "0x5321C2f7dD289786E63592De491F1B824A8fDafC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0c50449c706fca89c62ede5b05ebf5e3981a8f74ac89ab2ccf30cfcb647ee0d8"
      }
    ],
    "blockNumber": 9827587,
    "cumulativeGasUsed": "1585089",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc778417e063141139fce010982780140aa0cd5ab",
    "0xed698505e496B0c39Eb42B9696f141C5526DdF24",
    "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b"
  ],
  "solcInputHash": "a0d2d55f2bbc857784c2a47512b06797",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_conciergePrice\",\"type\":\"uint256\"}],\"name\":\"BuyMSO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"SetExchangeAgent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conciergePrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"buyProductByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"conciergePrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"buyProductByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prodId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_idx\",\"type\":\"uint64\"}],\"name\":\"productOf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conciergePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyProductByETH(string,uint256,uint256,uint256,bytes)\":{\"details\":\"buyProductByETH function:\"},\"buyProductByToken(string,uint256,uint256,address,address,uint256,bytes)\":{\"details\":\"buyProductByToken function: TODO check if this should be onlyOwner or not. If it is not onlyOwner, users can call this function directly.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/offchain/MSOPolka.sol\":\"MSOPolka\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IExchangeAgent {\\r\\n    function getNeededTokenAmount(\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        uint256 _desiredAmount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\r\\n\\r\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\r\\n\\r\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\r\\n\\r\\n    function swapTokenWithETH(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _desiredAmount\\r\\n    ) external;\\r\\n\\r\\n    function swapTokenWithToken(\\r\\n        address _token0,\\r\\n        address _token1,\\r\\n        uint256 _amount,\\r\\n        uint256 _desiredAmount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x16315e58912ba87b97eb1c4208cc6da085af319ba9ac6342d6f9787e55a3ea54\",\"license\":\"GPL-3.0\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/offchain/BasePolkaOffChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract BasePolkaOffChain is Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\r\\n    event SetExchangeAgent(address _setter, address _exchangeAgent);\\r\\n\\r\\n    Counters.Counter public productIds;\\r\\n    mapping(uint256 => address) private _ownerOf; // productId => owner\\r\\n    mapping(address => uint64) private _balanceOf; // owner => balance We can think one user can buy max 2**64 products\\r\\n    mapping(address => uint64[]) private _productsOf; // owner => productIds[]\\r\\n\\r\\n    // TODO it should be EnumerableSet\\r\\n    mapping(address => bool) public availableCurrencies;\\r\\n\\r\\n    address public immutable WETH;\\r\\n    // TODO should it be public?\\r\\n    address public exchangeAgent;\\r\\n    address public devWallet;\\r\\n\\r\\n    constructor(\\r\\n        address _WETH,\\r\\n        address _exchangeAgent,\\r\\n        address _devWallet\\r\\n    ) {\\r\\n        WETH = _WETH;\\r\\n        exchangeAgent = _exchangeAgent;\\r\\n        devWallet = _devWallet;\\r\\n    }\\r\\n\\r\\n    modifier onlyAvailableToken(address _token) {\\r\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\r\\n        require(_exchangeAgent != address(0), \\\"ZERO Address\\\");\\r\\n        exchangeAgent = _exchangeAgent;\\r\\n        emit SetExchangeAgent(msg.sender, _exchangeAgent);\\r\\n    }\\r\\n\\r\\n    function _setProductOwner(uint256 _prodId, address _owner) internal {\\r\\n        _ownerOf[_prodId] = _owner;\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 _prodId) public view returns (address) {\\r\\n        require(_prodId < productIds.current() + 1, \\\"Invalid product ID\\\");\\r\\n        return _ownerOf[_prodId];\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(address _account) internal {\\r\\n        _balanceOf[_account]++;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _account) public view returns (uint64) {\\r\\n        return _balanceOf[_account];\\r\\n    }\\r\\n\\r\\n    function _buyProduct(address _buyer, uint256 _pid) internal {\\r\\n        _productsOf[_buyer].push(uint64(_pid));\\r\\n        emit BuyProduct(_pid, _buyer);\\r\\n    }\\r\\n\\r\\n    function productOf(address _owner, uint64 _idx) public view returns (uint64) {\\r\\n        return _productsOf[_owner][_idx];\\r\\n    }\\r\\n\\r\\n    function addCurrency(address _currency) external onlyOwner {\\r\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\r\\n        availableCurrencies[_currency] = true;\\r\\n    }\\r\\n\\r\\n    function removeCurrency(address _currency) external onlyOwner {\\r\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\r\\n        availableCurrencies[_currency] = false;\\r\\n    }\\r\\n\\r\\n    function permit(\\r\\n        address _sender,\\r\\n        bytes32 _digest,\\r\\n        bytes memory sig\\r\\n    ) internal pure virtual {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\\r\\n        address recoveredAddress = ecrecover(_digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == _sender, \\\"PolkaCompare: INVALID_SIGNATURE\\\");\\r\\n    }\\r\\n\\r\\n    function splitSignature(bytes memory sig)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\r\\n\\r\\n        assembly {\\r\\n            // first 32 bytes, after the length prefix\\r\\n            r := mload(add(sig, 32))\\r\\n            // second 32 bytes\\r\\n            s := mload(add(sig, 64))\\r\\n            // final byte (first byte of the next 32 bytes)\\r\\n            v := byte(0, mload(add(sig, 96)))\\r\\n        }\\r\\n\\r\\n        // implicitly return (r, s, v)\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x065424a2224e5f85a0548d2f24046413c105002afc406ca20bbbe7d96ff0b77e\",\"license\":\"MIT\"},\"contracts/offchain/MSOPolka.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\r\\nimport \\\"../libs/TransferHelper.sol\\\";\\r\\nimport \\\"./BasePolkaOffChain.sol\\\";\\r\\n\\r\\ncontract MSOPolka is Ownable, ReentrancyGuard, BasePolkaOffChain {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    event BuyMSO(\\r\\n        uint256 indexed _productId,\\r\\n        address _buyer,\\r\\n        address _currency,\\r\\n        uint256 _amount,\\r\\n        uint256 _priceInUSD,\\r\\n        uint256 _conciergePrice\\r\\n    );\\r\\n\\r\\n    struct Product {\\r\\n        string productName;\\r\\n        uint256 priceInUSD;\\r\\n        uint256 period;\\r\\n        uint256 startTime;\\r\\n        uint256 conciergePrice;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Product) public products; // productId => product\\r\\n\\r\\n    constructor(\\r\\n        address _WETH,\\r\\n        address _exchangeAgent,\\r\\n        address _devWallet\\r\\n    ) BasePolkaOffChain(_WETH, _exchangeAgent, _devWallet) {}\\r\\n\\r\\n    /**\\r\\n     * @dev buyProductByETH function:\\r\\n     */\\r\\n    function buyProductByETH(\\r\\n        string memory productName,\\r\\n        uint256 priceInUSD,\\r\\n        uint256 period,\\r\\n        uint256 conciergePrice,\\r\\n        bytes memory sig\\r\\n    ) external payable nonReentrant {\\r\\n        uint256 usdPrice = priceInUSD + conciergePrice;\\r\\n\\r\\n        bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\\r\\n        permit(msg.sender, digest, sig);\\r\\n\\r\\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getETHAmountForUSDC(usdPrice);\\r\\n        require(msg.value >= tokenAmount, \\\"Insufficient amount\\\");\\r\\n        if (msg.value > tokenAmount) {\\r\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - tokenAmount);\\r\\n        }\\r\\n        TransferHelper.safeTransferETH(devWallet, tokenAmount);\\r\\n\\r\\n        uint256 _pid = buyProduct(productName, priceInUSD, period, conciergePrice, msg.sender);\\r\\n\\r\\n        emit BuyMSO(_pid, msg.sender, WETH, tokenAmount, priceInUSD, conciergePrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev buyProductByToken function:\\r\\n     * TODO check if this should be onlyOwner or not. If it is not onlyOwner, users can call this function directly.\\r\\n     */\\r\\n    function buyProductByToken(\\r\\n        string memory productName,\\r\\n        uint256 priceInUSD,\\r\\n        uint256 period,\\r\\n        address _token,\\r\\n        address _sender,\\r\\n        uint256 conciergePrice,\\r\\n        bytes memory sig\\r\\n    ) external nonReentrant onlyAvailableToken(_token) {\\r\\n        uint256 usdPrice = priceInUSD + conciergePrice;\\r\\n\\r\\n        bytes32 digest = getSignedMsgHash(productName, priceInUSD, period, conciergePrice);\\r\\n        permit(_sender, digest, sig);\\r\\n\\r\\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_token, usdPrice);\\r\\n        TransferHelper.safeTransferFrom(_token, _sender, devWallet, tokenAmount);\\r\\n\\r\\n        uint256 _pid = buyProduct(productName, priceInUSD, period, conciergePrice, _sender);\\r\\n        emit BuyMSO(_pid, _sender, _token, tokenAmount, priceInUSD, conciergePrice);\\r\\n    }\\r\\n\\r\\n    function buyProduct(\\r\\n        string memory productName,\\r\\n        uint256 priceInUSD,\\r\\n        uint256 period,\\r\\n        uint256 conciergePrice,\\r\\n        address _sender\\r\\n    ) private returns (uint256 _pid) {\\r\\n        _pid = productIds.current();\\r\\n        products[_pid] = Product({\\r\\n            productName: productName,\\r\\n            priceInUSD: priceInUSD,\\r\\n            period: period,\\r\\n            startTime: block.timestamp,\\r\\n            conciergePrice: conciergePrice\\r\\n        });\\r\\n\\r\\n        _setProductOwner(_pid, _sender);\\r\\n        _increaseBalance(_sender);\\r\\n        _buyProduct(_sender, _pid);\\r\\n        productIds.increment();\\r\\n    }\\r\\n\\r\\n    function getSignedMsgHash(\\r\\n        string memory productName,\\r\\n        uint256 priceInUSD,\\r\\n        uint256 period,\\r\\n        uint256 conciergePrice\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 msgHash = keccak256(abi.encodePacked(productName, priceInUSD, period, conciergePrice));\\r\\n        /*\\r\\n        Signature is produced by signing a keccak256 hash with the following format:\\r\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\r\\n        */\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", msgHash));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa573e3f5b6acbbaff64dee1ca226c4bcbbfd8ac5aa522b6c8217c5b882cb37a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061010d5760003560e01c8063a7bb580311610095578063c58284ab11610064578063c58284ab146102d4578063c5d3a107146102f4578063d9203b9114610314578063f2fde38b14610329578063f47962871461034957610114565b8063a7bb58031461025b578063aa57511d1461028a578063ad5c4648146102ac578063c0bddef2146102c157610114565b8063715018a6116100dc578063715018a6146101cb5780637acc0b20146101e05780638ab234b6146102115780638da5cb5b146102315780638ea5220f1461024657610114565b806318a00d8e146101195780631af42c0f1461013b5780636352211e1461017157806370a082311461019e57610114565b3661011457005b600080fd5b34801561012557600080fd5b506101396101343660046111f5565b610369565b005b34801561014757600080fd5b5061015b6101563660046111f5565b61042f565b6040516101689190611518565b60405180910390f35b34801561017d57600080fd5b5061019161018c3660046113d0565b610444565b604051610168919061147c565b3480156101aa57600080fd5b506101be6101b93660046111f5565b610498565b60405161016891906118c5565b3480156101d757600080fd5b506101396104bd565b3480156101ec57600080fd5b506102006101fb3660046113d0565b610546565b60405161016895949392919061155a565b34801561021d57600080fd5b5061013961022c3660046111f5565b6105fc565b34801561023d57600080fd5b50610191610698565b34801561025257600080fd5b506101916106a7565b34801561026757600080fd5b5061027b610276366004611278565b6106b6565b60405161016893929190611523565b34801561029657600080fd5b5061029f6106fa565b60405161016891906118bc565b3480156102b857600080fd5b50610191610700565b6101396102cf366004611352565b610724565b3480156102e057600080fd5b506101396102ef3660046112b3565b6108c9565b34801561030057600080fd5b5061013961030f3660046111f5565b610a59565b34801561032057600080fd5b50610191610af1565b34801561033557600080fd5b506101396103443660046111f5565b610b00565b34801561035557600080fd5b506101be610364366004611216565b610bc0565b610371610c34565b6001600160a01b0316610382610698565b6001600160a01b0316146103b15760405162461bcd60e51b81526004016103a89061174e565b60405180910390fd5b6001600160a01b0381166103d75760405162461bcd60e51b81526004016103a890611828565b600780546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb6906104249033908490611490565b60405180910390a150565b60066020526000908152604090205460ff1681565b60006104506002610c38565b61045b9060016118da565b82106104795760405162461bcd60e51b81526004016103a8906117f1565b506000818152600360205260409020546001600160a01b03165b919050565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6104c5610c34565b6001600160a01b03166104d6610698565b6001600160a01b0316146104fc5760405162461bcd60e51b81526004016103a89061174e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60096020526000908152604090208054819061056190611939565b80601f016020809104026020016040519081016040528092919081815260200182805461058d90611939565b80156105da5780601f106105af576101008083540402835291602001916105da565b820191906000526020600020905b8154815290600101906020018083116105bd57829003601f168201915b5050505050908060010154908060020154908060030154908060040154905085565b610604610c34565b6001600160a01b0316610615610698565b6001600160a01b03161461063b5760405162461bcd60e51b81526004016103a89061174e565b6001600160a01b03811660009081526006602052604090205460ff16156106745760405162461bcd60e51b81526004016103a890611717565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6000546001600160a01b031690565b6008546001600160a01b031681565b600080600083516041146106dc5760405162461bcd60e51b81526004016103a89061184e565b50505060208101516040820151606090920151909260009190911a90565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260015414156107475760405162461bcd60e51b81526004016103a890611885565b6002600155600061075883866118da565b9050600061076887878787610c3c565b9050610775338285610ca0565b60075460405163531a221160e01b81526000916001600160a01b03169063531a2211906107a69086906004016118bc565b60206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f691906113e8565b9050803410156108185760405162461bcd60e51b81526004016103a8906117ba565b80341115610833576108333361082e83346118f2565b610d56565b600854610849906001600160a01b031682610d56565b60006108588989898933610de8565b9050807f948b502f5a059386f0abaddbadd52ec597d1e73fc4f8e25131924f2ad871b027337f0000000000000000000000000000000000000000000000000000000000000000858c8b6040516108b29594939291906114ce565b60405180910390a250506001805550505050505050565b600260015414156108ec5760405162461bcd60e51b81526004016103a890611885565b60026001556001600160a01b038416600090815260066020526040902054849060ff1661092b5760405162461bcd60e51b81526004016103a890611626565b600061093784896118da565b905060006109478a8a8a88610c3c565b9050610954868286610ca0565b60075460405163a9a12d4360e01b81526000916001600160a01b03169063a9a12d4390610987908b9087906004016114ff565b602060405180830381600087803b1580156109a157600080fd5b505af11580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d991906113e8565b6008549091506109f690899089906001600160a01b031684610e9d565b6000610a058c8c8c8a8c610de8565b9050807f948b502f5a059386f0abaddbadd52ec597d1e73fc4f8e25131924f2ad871b027898b858f8c604051610a3f9594939291906114ce565b60405180910390a250506001805550505050505050505050565b610a61610c34565b6001600160a01b0316610a72610698565b6001600160a01b031614610a985760405162461bcd60e51b81526004016103a89061174e565b6001600160a01b03811660009081526006602052604090205460ff16610ad05760405162461bcd60e51b81526004016103a890611783565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6007546001600160a01b031681565b610b08610c34565b6001600160a01b0316610b19610698565b6001600160a01b031614610b3f5760405162461bcd60e51b81526004016103a89061174e565b6001600160a01b038116610b655760405162461bcd60e51b81526004016103a8906115e0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600560205260408120805467ffffffffffffffff8416908110610c0257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16905092915050565b3390565b5490565b60008085858585604051602001610c56949392919061141c565b60405160208183030381529060405280519060200120905080604051602001610c7f919061144b565b60405160208183030381529060405280519060200120915050949350505050565b6000806000610cae846106b6565b925092509250600060018683868660405160008152602001604052604051610cd9949392919061153c565b6020604051602081039080840390855afa158015610cfb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610d315750866001600160a01b0316816001600160a01b0316145b610d4d5760405162461bcd60e51b81526004016103a8906115a9565b50505050505050565b604080516000808252602082019092526001600160a01b038416908390604051610d809190611400565b60006040518083038185875af1925050503d8060008114610dbd576040519150601f19603f3d011682016040523d82523d6000602084013e610dc2565b606091505b5050905080610de35760405162461bcd60e51b81526004016103a8906116ba565b505050565b6000610df46002610c38565b6040805160a081018252888152602080820189905281830188905242606083015260808201879052600084815260098252929092208151805194955091939092610e429284929101906110c4565b50602082015160018201556040820151600282015560608201516003820155608090910151600490910155610e778183610fa2565b610e8082610fd0565b610e8a8282611028565b610e9460026110bb565b95945050505050565b600080856001600160a01b03166323b872dd868686604051602401610ec4939291906114aa565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f129190611400565b6000604051808303816000865af19150503d8060008114610f4f576040519150601f19603f3d011682016040523d82523d6000602084013e610f54565b606091505b5091509150818015610f7e575080511580610f7e575080806020019051810190610f7e9190611258565b610f9a5760405162461bcd60e51b81526004016103a89061165d565b505050505050565b60009182526003602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0381166000908152600460205260408120805467ffffffffffffffff1691610ffe83611974565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b6001600160a01b03821660009081526005602090815260408083208054600181018255908452919092206004820401805460039092166008026101000a67ffffffffffffffff81810219909316928516029190911790555181907fbe51e9a2a9ea8219cc8ab3194ee452fbdf2fa052f0d88d96a854c8ff2686151e906110af90859061147c565b60405180910390a25050565b80546001019055565b8280546110d090611939565b90600052602060002090601f0160209004810192826110f25760008555611138565b82601f1061110b57805160ff1916838001178555611138565b82800160010185558215611138579182015b8281111561113857825182559160200191906001019061111d565b50611144929150611148565b5090565b5b808211156111445760008155600101611149565b80356001600160a01b038116811461049357600080fd5b600082601f830112611184578081fd5b813567ffffffffffffffff8082111561119f5761119f6119b2565b604051601f8301601f1916810160200182811182821017156111c3576111c36119b2565b6040528281528483016020018610156111da578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215611206578081fd5b61120f8261115d565b9392505050565b60008060408385031215611228578081fd5b6112318361115d565b9150602083013567ffffffffffffffff8116811461124d578182fd5b809150509250929050565b600060208284031215611269578081fd5b8151801515811461120f578182fd5b600060208284031215611289578081fd5b813567ffffffffffffffff81111561129f578182fd5b6112ab84828501611174565b949350505050565b600080600080600080600060e0888a0312156112cd578283fd5b873567ffffffffffffffff808211156112e4578485fd5b6112f08b838c01611174565b985060208a0135975060408a0135965061130c60608b0161115d565b955061131a60808b0161115d565b945060a08a0135935060c08a0135915080821115611336578283fd5b506113438a828b01611174565b91505092959891949750929550565b600080600080600060a08688031215611369578081fd5b853567ffffffffffffffff80821115611380578283fd5b61138c89838a01611174565b965060208801359550604088013594506060880135935060808801359150808211156113b6578283fd5b506113c388828901611174565b9150509295509295909350565b6000602082840312156113e1578081fd5b5035919050565b6000602082840312156113f9578081fd5b5051919050565b60008251611412818460208701611909565b9190910192915050565b6000855161142e818460208a01611909565b919091019384525060208301919091526040820152606001919050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b928352602083019190915260ff16604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b600060a0825286518060a08401526115798160c0850160208b01611909565b60208301969096525060408101939093526060830191909152608082015260c0601f909201601f19160101919050565b6020808252601f908201527f506f6c6b61436f6d706172653a20494e56414c49445f5349474e415455524500604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b60208082526012908201527f496e76616c69642070726f647563742049440000000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b60208082526018908201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b67ffffffffffffffff91909116815260200190565b600082198211156118ed576118ed61199c565b500190565b6000828210156119045761190461199c565b500390565b60005b8381101561192457818101518382015260200161190c565b83811115611933576000848401525b50505050565b60028104600182168061194d57607f821691505b6020821081141561196e57634e487b7160e01b600052602260045260246000fd5b50919050565b600067ffffffffffffffff808316818114156119925761199261199c565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e7055b0936dd69244a8e23685adc189df1042b09b5d06361888cbaa3e763ccbc64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyProductByETH(string,uint256,uint256,uint256,bytes)": {
        "details": "buyProductByETH function:"
      },
      "buyProductByToken(string,uint256,uint256,address,address,uint256,bytes)": {
        "details": "buyProductByToken function: TODO check if this should be onlyOwner or not. If it is not onlyOwner, users can call this function directly."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 647,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3292,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "productIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1476_storage"
      },
      {
        "astId": 3296,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3300,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 3305,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "_productsOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint64)dyn_storage)"
      },
      {
        "astId": 3309,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3313,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3315,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "devWallet",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3637,
        "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
        "label": "products",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Product)3632_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint64)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint64)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Product)3632_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MSOPolka.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)3632_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1476_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1475,
            "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Product)3632_storage": {
        "encoding": "inplace",
        "label": "struct MSOPolka.Product",
        "members": [
          {
            "astId": 3623,
            "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
            "label": "productName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3625,
            "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
            "label": "priceInUSD",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3627,
            "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
            "label": "period",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3629,
            "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3631,
            "contract": "contracts/offchain/MSOPolka.sol:MSOPolka",
            "label": "conciergePrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}