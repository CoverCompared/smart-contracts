{
  "address": "0x622e542017045C41abF955bED720B32540e965F0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_priceInUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_conciergePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "BuyMSO",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "SetExchangeAgent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "policyId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conciergePrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "buyProductByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "policyId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "conciergePrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "buyProductByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prodId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_idx",
          "type": "uint64"
        }
      ],
      "name": "productOf",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "string",
          "name": "policyId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conciergePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        }
      ],
      "name": "setExchangeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xec450acc8d658d115635ef2eabbaf508297e3e4d0286c0391e55c0d32892ecf6",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x622e542017045C41abF955bED720B32540e965F0",
    "transactionIndex": 0,
    "gasUsed": "1622690",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000200000010000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000800000000000000000000000000000000000020000000000000000000000000400000000000000000000000000000000000000000",
    "blockHash": "0xc5eb0c0210efbc2fc504117e0e89bad1c8d1f51c75eca414e6bb0c7d6e896722",
    "transactionHash": "0xec450acc8d658d115635ef2eabbaf508297e3e4d0286c0391e55c0d32892ecf6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9843413,
        "transactionHash": "0xec450acc8d658d115635ef2eabbaf508297e3e4d0286c0391e55c0d32892ecf6",
        "address": "0x622e542017045C41abF955bED720B32540e965F0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc5eb0c0210efbc2fc504117e0e89bad1c8d1f51c75eca414e6bb0c7d6e896722"
      }
    ],
    "blockNumber": 9843413,
    "cumulativeGasUsed": "1622690",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc778417e063141139fce010982780140aa0cd5ab",
    "0x5640B69a5e1375a95e610052c5eedfea17675996",
    "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b"
  ],
  "solcInputHash": "dabe86c12d6adcaa1b3be01b1090c0a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_conciergePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"BuyMSO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"SetExchangeAgent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"policyId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conciergePrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"buyProductByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"policyId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"conciergePrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"buyProductByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prodId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_idx\",\"type\":\"uint64\"}],\"name\":\"productOf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"policyId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conciergePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyProductByETH(string,uint256,uint256,uint256,bytes)\":{\"details\":\"buyProductByETH function:\"},\"buyProductByToken(string,uint256,uint256,address,uint256,bytes)\":{\"details\":\"buyProductByToken function:\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/offchain/MSOCover.sol\":\"MSOCover\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeAgent {\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _desiredAmount\\n    ) external returns (uint256);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function swapTokenWithETH(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n\\n    function swapTokenWithToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount,\\n        uint256 _desiredAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1aad6c6cae768a559b0c7ed1de81906e327e45f93a1f7a3bdc25c7323a959d0d\",\"license\":\"GPL-3.0\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/offchain/BaseCoverOffChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BaseCoverOffChain is Ownable {\\n    using Counters for Counters.Counter;\\n\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\n    event SetExchangeAgent(address _setter, address _exchangeAgent);\\n\\n    Counters.Counter public productIds;\\n    mapping(uint256 => address) private _ownerOf; // productId => owner\\n    mapping(address => uint64) private _balanceOf; // owner => balance We can think one user can buy max 2**64 products\\n    mapping(address => uint64[]) private _productsOf; // owner => productIds[]\\n\\n    mapping(address => bool) public availableCurrencies;\\n\\n    address public immutable WETH;\\n    address public exchangeAgent;\\n    address public devWallet;\\n\\n    constructor(\\n        address _WETH,\\n        address _exchangeAgent,\\n        address _devWallet\\n    ) {\\n        WETH = _WETH;\\n        exchangeAgent = _exchangeAgent;\\n        devWallet = _devWallet;\\n    }\\n\\n    modifier onlyAvailableToken(address _token) {\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\\n        require(_exchangeAgent != address(0), \\\"ZERO Address\\\");\\n        exchangeAgent = _exchangeAgent;\\n        emit SetExchangeAgent(msg.sender, _exchangeAgent);\\n    }\\n\\n    function _setProductOwner(uint256 _prodId, address _owner) internal {\\n        _ownerOf[_prodId] = _owner;\\n    }\\n\\n    function ownerOf(uint256 _prodId) public view returns (address) {\\n        require(_prodId < productIds.current() + 1, \\\"Invalid product ID\\\");\\n        return _ownerOf[_prodId];\\n    }\\n\\n    function _increaseBalance(address _account) internal {\\n        _balanceOf[_account]++;\\n    }\\n\\n    function balanceOf(address _account) public view returns (uint64) {\\n        return _balanceOf[_account];\\n    }\\n\\n    function _buyProduct(address _buyer, uint256 _pid) internal {\\n        _productsOf[_buyer].push(uint64(_pid));\\n        emit BuyProduct(_pid, _buyer);\\n    }\\n\\n    function productOf(address _owner, uint64 _idx) public view returns (uint64) {\\n        return _productsOf[_owner][_idx];\\n    }\\n\\n    function addCurrency(address _currency) external onlyOwner {\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\n        availableCurrencies[_currency] = true;\\n    }\\n\\n    function removeCurrency(address _currency) external onlyOwner {\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\n        availableCurrencies[_currency] = false;\\n    }\\n\\n    function permit(\\n        address _sender,\\n        bytes32 _digest,\\n        bytes memory sig\\n    ) internal pure virtual {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\\n        address recoveredAddress = ecrecover(_digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == _sender, \\\"CoverCompared: INVALID_SIGNATURE\\\");\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        public\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\\n\",\"keccak256\":\"0xe48361e56ce1b8edf2ed05ad16e0edb1eab0023466b14d9440f976a113b19f01\",\"license\":\"MIT\"},\"contracts/offchain/MSOCover.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\nimport \\\"../libs/TransferHelper.sol\\\";\\nimport \\\"./BaseCoverOffChain.sol\\\";\\n\\ncontract MSOCover is Ownable, ReentrancyGuard, BaseCoverOffChain {\\n    using Counters for Counters.Counter;\\n\\n    event BuyMSO(\\n        uint256 indexed _productId,\\n        uint256 _amount,\\n        uint256 _priceInUSD,\\n        uint256 _conciergePrice,\\n        address _buyer,\\n        address _currency\\n    );\\n\\n    struct Product {\\n        string policyId;\\n        uint256 priceInUSD;\\n        uint256 period;\\n        uint256 startTime;\\n        uint256 conciergePrice;\\n    }\\n\\n    mapping(uint256 => Product) public products; // productId => product\\n\\n    constructor(\\n        address _WETH,\\n        address _exchangeAgent,\\n        address _devWallet\\n    ) BaseCoverOffChain(_WETH, _exchangeAgent, _devWallet) {}\\n\\n    /**\\n     * @dev buyProductByETH function:\\n     */\\n    function buyProductByETH(\\n        string memory policyId,\\n        uint256 priceInUSD,\\n        uint256 period,\\n        uint256 conciergePrice,\\n        bytes memory sig\\n    ) external payable nonReentrant {\\n        uint256 usdPrice = priceInUSD + conciergePrice;\\n\\n        bytes32 digest = getSignedMsgHash(policyId, priceInUSD, period, conciergePrice);\\n        permit(msg.sender, digest, sig);\\n\\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getETHAmountForUSDC(usdPrice);\\n        require(msg.value >= tokenAmount, \\\"Insufficient amount\\\");\\n        if (msg.value > tokenAmount) {\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - tokenAmount);\\n        }\\n        TransferHelper.safeTransferETH(devWallet, tokenAmount);\\n\\n        uint256 _pid = buyProduct(policyId, priceInUSD, period, conciergePrice, msg.sender);\\n\\n        emit BuyMSO(_pid, tokenAmount, priceInUSD, conciergePrice, msg.sender, WETH);\\n    }\\n\\n    /**\\n     * @dev buyProductByToken function:\\n     */\\n    function buyProductByToken(\\n        string calldata policyId,\\n        uint256 priceInUSD,\\n        uint256 period,\\n        address _token,\\n        uint256 conciergePrice,\\n        bytes memory sig\\n    ) external nonReentrant onlyAvailableToken(_token) {\\n        uint256 usdPrice = priceInUSD + conciergePrice;\\n\\n        bytes32 digest = getSignedMsgHash(policyId, priceInUSD, period, conciergePrice);\\n        permit(msg.sender, digest, sig);\\n\\n        uint256 tokenAmount = IExchangeAgent(exchangeAgent).getTokenAmountForUSDC(_token, usdPrice);\\n        TransferHelper.safeTransferFrom(_token, msg.sender, devWallet, tokenAmount);\\n\\n        uint256 _pid = buyProduct(policyId, priceInUSD, period, conciergePrice, msg.sender);\\n        emit BuyMSO(_pid, tokenAmount, priceInUSD, conciergePrice, msg.sender, _token);\\n    }\\n\\n    function buyProduct(\\n        string memory _policyId,\\n        uint256 priceInUSD,\\n        uint256 period,\\n        uint256 conciergePrice,\\n        address _sender\\n    ) private returns (uint256 _pid) {\\n        _pid = productIds.current();\\n        products[_pid] = Product({\\n            policyId: _policyId,\\n            priceInUSD: priceInUSD,\\n            period: period,\\n            startTime: block.timestamp,\\n            conciergePrice: conciergePrice\\n        });\\n\\n        _setProductOwner(_pid, _sender);\\n        _increaseBalance(_sender);\\n        _buyProduct(_sender, _pid);\\n        productIds.increment();\\n    }\\n\\n    function getSignedMsgHash(\\n        string memory productName,\\n        uint256 priceInUSD,\\n        uint256 period,\\n        uint256 conciergePrice\\n    ) internal pure returns (bytes32) {\\n        bytes32 msgHash = keccak256(abi.encodePacked(productName, priceInUSD, period, conciergePrice));\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", msgHash));\\n    }\\n}\\n\",\"keccak256\":\"0x7734405fc4904fca6bef0719588e4382ae2530ae66c2e60e6452259634a39bed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001c1738038062001c178339810160408190526200003491620000fc565b828282600062000043620000db565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001805560609290921b6001600160601b031916608052600780546001600160a01b03199081166001600160a01b039384161790915560088054909116919092161790555062000145915050565b3390565b80516001600160a01b0381168114620000f757600080fd5b919050565b60008060006060848603121562000111578283fd5b6200011c84620000df565b92506200012c60208501620000df565b91506200013c60408501620000df565b90509250925092565b60805160601c611aac6200016b6000396000818161070201526108820152611aac6000f3fe60806040526004361061010d5760003560e01c8063a7bb580311610095578063c5d3a10711610064578063c5d3a107146102d4578063d9203b91146102f4578063f2fde38b14610309578063f479628714610329578063fdc815661461034957610114565b8063a7bb58031461025b578063aa57511d1461028a578063ad5c4648146102ac578063c0bddef2146102c157610114565b8063715018a6116100dc578063715018a6146101cb5780637acc0b20146101e05780638ab234b6146102115780638da5cb5b146102315780638ea5220f1461024657610114565b806318a00d8e146101195780631af42c0f1461013b5780636352211e1461017157806370a082311461019e57610114565b3661011457005b600080fd5b34801561012557600080fd5b5061013961013436600461127a565b610369565b005b34801561014757600080fd5b5061015b61015636600461127a565b61042f565b6040516101689190611599565b60405180910390f35b34801561017d57600080fd5b5061019161018c366004611482565b610444565b604051610168919061152e565b3480156101aa57600080fd5b506101be6101b936600461127a565b610498565b6040516101689190611973565b3480156101d757600080fd5b506101396104bd565b3480156101ec57600080fd5b506102006101fb366004611482565b610546565b6040516101689594939291906115db565b34801561021d57600080fd5b5061013961022c36600461127a565b6105fc565b34801561023d57600080fd5b50610191610698565b34801561025257600080fd5b506101916106a7565b34801561026757600080fd5b5061027b6102763660046112f6565b6106b6565b604051610168939291906115a4565b34801561029657600080fd5b5061029f6106fa565b604051610168919061193b565b3480156102b857600080fd5b50610191610700565b6101396102cf3660046113ee565b610724565b3480156102e057600080fd5b506101396102ef36600461127a565b6108c9565b34801561030057600080fd5b50610191610961565b34801561031557600080fd5b5061013961032436600461127a565b610970565b34801561033557600080fd5b506101be610344366004611294565b610a30565b34801561035557600080fd5b50610139610364366004611331565b610aa4565b610371610ca4565b6001600160a01b0316610382610698565b6001600160a01b0316146103b15760405162461bcd60e51b81526004016103a8906117cd565b60405180910390fd5b6001600160a01b0381166103d75760405162461bcd60e51b81526004016103a8906118a7565b600780546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb6906104249033908490611542565b60405180910390a150565b60066020526000908152604090205460ff1681565b60006104506002610ca8565b61045b906001611988565b82106104795760405162461bcd60e51b81526004016103a890611870565b506000818152600360205260409020546001600160a01b03165b919050565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6104c5610ca4565b6001600160a01b03166104d6610698565b6001600160a01b0316146104fc5760405162461bcd60e51b81526004016103a8906117cd565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600960205260009081526040902080548190610561906119e7565b80601f016020809104026020016040519081016040528092919081815260200182805461058d906119e7565b80156105da5780601f106105af576101008083540402835291602001916105da565b820191906000526020600020905b8154815290600101906020018083116105bd57829003601f168201915b5050505050908060010154908060020154908060030154908060040154905085565b610604610ca4565b6001600160a01b0316610615610698565b6001600160a01b03161461063b5760405162461bcd60e51b81526004016103a8906117cd565b6001600160a01b03811660009081526006602052604090205460ff16156106745760405162461bcd60e51b81526004016103a890611796565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6000546001600160a01b031690565b6008546001600160a01b031681565b600080600083516041146106dc5760405162461bcd60e51b81526004016103a8906118cd565b50505060208101516040820151606090920151909260009190911a90565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260015414156107475760405162461bcd60e51b81526004016103a890611904565b600260015560006107588386611988565b9050600061076887878787610cac565b9050610775338285610d10565b60075460405163531a221160e01b81526000916001600160a01b03169063531a2211906107a690869060040161193b565b60206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f6919061149a565b9050803410156108185760405162461bcd60e51b81526004016103a890611839565b80341115610833576108333361082e83346119a0565b610dc6565b600854610849906001600160a01b031682610dc6565b60006108588989898933610e58565b9050807f1927ed64f868245dda652d1823bd0fbd30faf077622861a5b0b147775a37a17e838a89337f00000000000000000000000000000000000000000000000000000000000000006040516108b2959493929190611944565b60405180910390a250506001805550505050505050565b6108d1610ca4565b6001600160a01b03166108e2610698565b6001600160a01b0316146109085760405162461bcd60e51b81526004016103a8906117cd565b6001600160a01b03811660009081526006602052604090205460ff166109405760405162461bcd60e51b81526004016103a890611802565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6007546001600160a01b031681565b610978610ca4565b6001600160a01b0316610989610698565b6001600160a01b0316146109af5760405162461bcd60e51b81526004016103a8906117cd565b6001600160a01b0381166109d55760405162461bcd60e51b81526004016103a89061165f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600560205260408120805467ffffffffffffffff8416908110610a7257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16905092915050565b60026001541415610ac75760405162461bcd60e51b81526004016103a890611904565b60026001556001600160a01b038316600090815260066020526040902054839060ff16610b065760405162461bcd60e51b81526004016103a8906116a5565b6000610b128488611988565b90506000610b5a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b9150899050610cac565b9050610b67338286610d10565b60075460405163a9a12d4360e01b81526000916001600160a01b03169063a9a12d4390610b9a908a908790600401611580565b602060405180830381600087803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec919061149a565b600854909150610c0990889033906001600160a01b031684610f0d565b6000610c508c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e92508d91508b905033610e58565b9050807f1927ed64f868245dda652d1823bd0fbd30faf077622861a5b0b147775a37a17e838c8a338d604051610c8a959493929190611944565b60405180910390a250506001805550505050505050505050565b3390565b5490565b60008085858585604051602001610cc694939291906114ce565b60405160208183030381529060405280519060200120905080604051602001610cef91906114fd565b60405160208183030381529060405280519060200120915050949350505050565b6000806000610d1e846106b6565b925092509250600060018683868660405160008152602001604052604051610d4994939291906115bd565b6020604051602081039080840390855afa158015610d6b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610da15750866001600160a01b0316816001600160a01b0316145b610dbd5760405162461bcd60e51b81526004016103a89061162a565b50505050505050565b604080516000808252602082019092526001600160a01b038416908390604051610df091906114b2565b60006040518083038185875af1925050503d8060008114610e2d576040519150601f19603f3d011682016040523d82523d6000602084013e610e32565b606091505b5050905080610e535760405162461bcd60e51b81526004016103a890611739565b505050565b6000610e646002610ca8565b6040805160a081018252888152602080820189905281830188905242606083015260808201879052600084815260098252929092208151805194955091939092610eb2928492910190611134565b50602082015160018201556040820151600282015560608201516003820155608090910151600490910155610ee78183611012565b610ef082611040565b610efa8282611098565b610f04600261112b565b95945050505050565b600080856001600160a01b03166323b872dd868686604051602401610f349392919061155c565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f8291906114b2565b6000604051808303816000865af19150503d8060008114610fbf576040519150601f19603f3d011682016040523d82523d6000602084013e610fc4565b606091505b5091509150818015610fee575080511580610fee575080806020019051810190610fee91906112d6565b61100a5760405162461bcd60e51b81526004016103a8906116dc565b505050505050565b60009182526003602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0381166000908152600460205260408120805467ffffffffffffffff169161106e83611a22565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b6001600160a01b03821660009081526005602090815260408083208054600181018255908452919092206004820401805460039092166008026101000a67ffffffffffffffff81810219909316928516029190911790555181907fbe51e9a2a9ea8219cc8ab3194ee452fbdf2fa052f0d88d96a854c8ff2686151e9061111f90859061152e565b60405180910390a25050565b80546001019055565b828054611140906119e7565b90600052602060002090601f01602090048101928261116257600085556111a8565b82601f1061117b57805160ff19168380011785556111a8565b828001600101855582156111a8579182015b828111156111a857825182559160200191906001019061118d565b506111b49291506111b8565b5090565b5b808211156111b457600081556001016111b9565b600067ffffffffffffffff808411156111e8576111e8611a60565b604051601f8501601f19168101602001828111828210171561120c5761120c611a60565b60405284815291508183850186101561122457600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461049357600080fd5b600082601f830112611264578081fd5b611273838335602085016111cd565b9392505050565b60006020828403121561128b578081fd5b6112738261123d565b600080604083850312156112a6578081fd5b6112af8361123d565b9150602083013567ffffffffffffffff811681146112cb578182fd5b809150509250929050565b6000602082840312156112e7578081fd5b81518015158114611273578182fd5b600060208284031215611307578081fd5b813567ffffffffffffffff81111561131d578182fd5b61132984828501611254565b949350505050565b600080600080600080600060c0888a03121561134b578283fd5b873567ffffffffffffffff80821115611362578485fd5b818a0191508a601f830112611375578485fd5b813581811115611383578586fd5b8b6020828501011115611394578586fd5b60208381019a509098508a0135965060408a013595506113b660608b0161123d565b945060808a0135935060a08a01359150808211156113d2578283fd5b506113df8a828b01611254565b91505092959891949750929550565b600080600080600060a08688031215611405578081fd5b853567ffffffffffffffff8082111561141c578283fd5b818801915088601f83011261142f578283fd5b61143e898335602085016111cd565b96506020880135955060408801359450606088013593506080880135915080821115611468578283fd5b5061147588828901611254565b9150509295509295909350565b600060208284031215611493578081fd5b5035919050565b6000602082840312156114ab578081fd5b5051919050565b600082516114c48184602087016119b7565b9190910192915050565b600085516114e0818460208a016119b7565b919091019384525060208301919091526040820152606001919050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b928352602083019190915260ff16604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b600060a0825286518060a08401526115fa8160c0850160208b016119b7565b60208301969096525060408101939093526060830191909152608082015260c0601f909201601f19160101919050565b6020808252818101527f436f766572436f6d70617265643a20494e56414c49445f5349474e4154555245604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b60208082526012908201527f496e76616c69642070726f647563742049440000000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b60208082526018908201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b948552602085019390935260408401919091526001600160a01b03908116606084015216608082015260a00190565b67ffffffffffffffff91909116815260200190565b6000821982111561199b5761199b611a4a565b500190565b6000828210156119b2576119b2611a4a565b500390565b60005b838110156119d25781810151838201526020016119ba565b838111156119e1576000848401525b50505050565b6002810460018216806119fb57607f821691505b60208210811415611a1c57634e487b7160e01b600052602260045260246000fd5b50919050565b600067ffffffffffffffff80831681811415611a4057611a40611a4a565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122069949a812c96b17581908f2dacdaa4d3f57c54127cf1e70ab3a29046dce0e22a64736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061010d5760003560e01c8063a7bb580311610095578063c5d3a10711610064578063c5d3a107146102d4578063d9203b91146102f4578063f2fde38b14610309578063f479628714610329578063fdc815661461034957610114565b8063a7bb58031461025b578063aa57511d1461028a578063ad5c4648146102ac578063c0bddef2146102c157610114565b8063715018a6116100dc578063715018a6146101cb5780637acc0b20146101e05780638ab234b6146102115780638da5cb5b146102315780638ea5220f1461024657610114565b806318a00d8e146101195780631af42c0f1461013b5780636352211e1461017157806370a082311461019e57610114565b3661011457005b600080fd5b34801561012557600080fd5b5061013961013436600461127a565b610369565b005b34801561014757600080fd5b5061015b61015636600461127a565b61042f565b6040516101689190611599565b60405180910390f35b34801561017d57600080fd5b5061019161018c366004611482565b610444565b604051610168919061152e565b3480156101aa57600080fd5b506101be6101b936600461127a565b610498565b6040516101689190611973565b3480156101d757600080fd5b506101396104bd565b3480156101ec57600080fd5b506102006101fb366004611482565b610546565b6040516101689594939291906115db565b34801561021d57600080fd5b5061013961022c36600461127a565b6105fc565b34801561023d57600080fd5b50610191610698565b34801561025257600080fd5b506101916106a7565b34801561026757600080fd5b5061027b6102763660046112f6565b6106b6565b604051610168939291906115a4565b34801561029657600080fd5b5061029f6106fa565b604051610168919061193b565b3480156102b857600080fd5b50610191610700565b6101396102cf3660046113ee565b610724565b3480156102e057600080fd5b506101396102ef36600461127a565b6108c9565b34801561030057600080fd5b50610191610961565b34801561031557600080fd5b5061013961032436600461127a565b610970565b34801561033557600080fd5b506101be610344366004611294565b610a30565b34801561035557600080fd5b50610139610364366004611331565b610aa4565b610371610ca4565b6001600160a01b0316610382610698565b6001600160a01b0316146103b15760405162461bcd60e51b81526004016103a8906117cd565b60405180910390fd5b6001600160a01b0381166103d75760405162461bcd60e51b81526004016103a8906118a7565b600780546001600160a01b0319166001600160a01b0383161790556040517f0143625ceac80b2452760213c6b6f5a22eb63bc46e17d129c30fffefb4679eb6906104249033908490611542565b60405180910390a150565b60066020526000908152604090205460ff1681565b60006104506002610ca8565b61045b906001611988565b82106104795760405162461bcd60e51b81526004016103a890611870565b506000818152600360205260409020546001600160a01b03165b919050565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b6104c5610ca4565b6001600160a01b03166104d6610698565b6001600160a01b0316146104fc5760405162461bcd60e51b81526004016103a8906117cd565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600960205260009081526040902080548190610561906119e7565b80601f016020809104026020016040519081016040528092919081815260200182805461058d906119e7565b80156105da5780601f106105af576101008083540402835291602001916105da565b820191906000526020600020905b8154815290600101906020018083116105bd57829003601f168201915b5050505050908060010154908060020154908060030154908060040154905085565b610604610ca4565b6001600160a01b0316610615610698565b6001600160a01b03161461063b5760405162461bcd60e51b81526004016103a8906117cd565b6001600160a01b03811660009081526006602052604090205460ff16156106745760405162461bcd60e51b81526004016103a890611796565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6000546001600160a01b031690565b6008546001600160a01b031681565b600080600083516041146106dc5760405162461bcd60e51b81526004016103a8906118cd565b50505060208101516040820151606090920151909260009190911a90565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260015414156107475760405162461bcd60e51b81526004016103a890611904565b600260015560006107588386611988565b9050600061076887878787610cac565b9050610775338285610d10565b60075460405163531a221160e01b81526000916001600160a01b03169063531a2211906107a690869060040161193b565b60206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f6919061149a565b9050803410156108185760405162461bcd60e51b81526004016103a890611839565b80341115610833576108333361082e83346119a0565b610dc6565b600854610849906001600160a01b031682610dc6565b60006108588989898933610e58565b9050807f1927ed64f868245dda652d1823bd0fbd30faf077622861a5b0b147775a37a17e838a89337f00000000000000000000000000000000000000000000000000000000000000006040516108b2959493929190611944565b60405180910390a250506001805550505050505050565b6108d1610ca4565b6001600160a01b03166108e2610698565b6001600160a01b0316146109085760405162461bcd60e51b81526004016103a8906117cd565b6001600160a01b03811660009081526006602052604090205460ff166109405760405162461bcd60e51b81526004016103a890611802565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6007546001600160a01b031681565b610978610ca4565b6001600160a01b0316610989610698565b6001600160a01b0316146109af5760405162461bcd60e51b81526004016103a8906117cd565b6001600160a01b0381166109d55760405162461bcd60e51b81526004016103a89061165f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600560205260408120805467ffffffffffffffff8416908110610a7257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16905092915050565b60026001541415610ac75760405162461bcd60e51b81526004016103a890611904565b60026001556001600160a01b038316600090815260066020526040902054839060ff16610b065760405162461bcd60e51b81526004016103a8906116a5565b6000610b128488611988565b90506000610b5a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b9150899050610cac565b9050610b67338286610d10565b60075460405163a9a12d4360e01b81526000916001600160a01b03169063a9a12d4390610b9a908a908790600401611580565b602060405180830381600087803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec919061149a565b600854909150610c0990889033906001600160a01b031684610f0d565b6000610c508c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e92508d91508b905033610e58565b9050807f1927ed64f868245dda652d1823bd0fbd30faf077622861a5b0b147775a37a17e838c8a338d604051610c8a959493929190611944565b60405180910390a250506001805550505050505050505050565b3390565b5490565b60008085858585604051602001610cc694939291906114ce565b60405160208183030381529060405280519060200120905080604051602001610cef91906114fd565b60405160208183030381529060405280519060200120915050949350505050565b6000806000610d1e846106b6565b925092509250600060018683868660405160008152602001604052604051610d4994939291906115bd565b6020604051602081039080840390855afa158015610d6b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610da15750866001600160a01b0316816001600160a01b0316145b610dbd5760405162461bcd60e51b81526004016103a89061162a565b50505050505050565b604080516000808252602082019092526001600160a01b038416908390604051610df091906114b2565b60006040518083038185875af1925050503d8060008114610e2d576040519150601f19603f3d011682016040523d82523d6000602084013e610e32565b606091505b5050905080610e535760405162461bcd60e51b81526004016103a890611739565b505050565b6000610e646002610ca8565b6040805160a081018252888152602080820189905281830188905242606083015260808201879052600084815260098252929092208151805194955091939092610eb2928492910190611134565b50602082015160018201556040820151600282015560608201516003820155608090910151600490910155610ee78183611012565b610ef082611040565b610efa8282611098565b610f04600261112b565b95945050505050565b600080856001600160a01b03166323b872dd868686604051602401610f349392919061155c565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f8291906114b2565b6000604051808303816000865af19150503d8060008114610fbf576040519150601f19603f3d011682016040523d82523d6000602084013e610fc4565b606091505b5091509150818015610fee575080511580610fee575080806020019051810190610fee91906112d6565b61100a5760405162461bcd60e51b81526004016103a8906116dc565b505050505050565b60009182526003602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0381166000908152600460205260408120805467ffffffffffffffff169161106e83611a22565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b6001600160a01b03821660009081526005602090815260408083208054600181018255908452919092206004820401805460039092166008026101000a67ffffffffffffffff81810219909316928516029190911790555181907fbe51e9a2a9ea8219cc8ab3194ee452fbdf2fa052f0d88d96a854c8ff2686151e9061111f90859061152e565b60405180910390a25050565b80546001019055565b828054611140906119e7565b90600052602060002090601f01602090048101928261116257600085556111a8565b82601f1061117b57805160ff19168380011785556111a8565b828001600101855582156111a8579182015b828111156111a857825182559160200191906001019061118d565b506111b49291506111b8565b5090565b5b808211156111b457600081556001016111b9565b600067ffffffffffffffff808411156111e8576111e8611a60565b604051601f8501601f19168101602001828111828210171561120c5761120c611a60565b60405284815291508183850186101561122457600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461049357600080fd5b600082601f830112611264578081fd5b611273838335602085016111cd565b9392505050565b60006020828403121561128b578081fd5b6112738261123d565b600080604083850312156112a6578081fd5b6112af8361123d565b9150602083013567ffffffffffffffff811681146112cb578182fd5b809150509250929050565b6000602082840312156112e7578081fd5b81518015158114611273578182fd5b600060208284031215611307578081fd5b813567ffffffffffffffff81111561131d578182fd5b61132984828501611254565b949350505050565b600080600080600080600060c0888a03121561134b578283fd5b873567ffffffffffffffff80821115611362578485fd5b818a0191508a601f830112611375578485fd5b813581811115611383578586fd5b8b6020828501011115611394578586fd5b60208381019a509098508a0135965060408a013595506113b660608b0161123d565b945060808a0135935060a08a01359150808211156113d2578283fd5b506113df8a828b01611254565b91505092959891949750929550565b600080600080600060a08688031215611405578081fd5b853567ffffffffffffffff8082111561141c578283fd5b818801915088601f83011261142f578283fd5b61143e898335602085016111cd565b96506020880135955060408801359450606088013593506080880135915080821115611468578283fd5b5061147588828901611254565b9150509295509295909350565b600060208284031215611493578081fd5b5035919050565b6000602082840312156114ab578081fd5b5051919050565b600082516114c48184602087016119b7565b9190910192915050565b600085516114e0818460208a016119b7565b919091019384525060208301919091526040820152606001919050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b928352602083019190915260ff16604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b600060a0825286518060a08401526115fa8160c0850160208b016119b7565b60208301969096525060408101939093526060830191909152608082015260c0601f909201601f19160101919050565b6020808252818101527f436f766572436f6d70617265643a20494e56414c49445f5349474e4154555245604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526011908201527f4e6f7420616c6c6f77656420746f6b656e000000000000000000000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b60208082526012908201527f496e76616c69642070726f647563742049440000000000000000000000000000604082015260600190565b6020808252600c908201526b5a45524f204164647265737360a01b604082015260600190565b60208082526018908201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b948552602085019390935260408401919091526001600160a01b03908116606084015216608082015260a00190565b67ffffffffffffffff91909116815260200190565b6000821982111561199b5761199b611a4a565b500190565b6000828210156119b2576119b2611a4a565b500390565b60005b838110156119d25781810151838201526020016119ba565b838111156119e1576000848401525b50505050565b6002810460018216806119fb57607f821691505b60208210811415611a1c57634e487b7160e01b600052602260045260246000fd5b50919050565b600067ffffffffffffffff80831681811415611a4057611a40611a4a565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122069949a812c96b17581908f2dacdaa4d3f57c54127cf1e70ab3a29046dce0e22a64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyProductByETH(string,uint256,uint256,uint256,bytes)": {
        "details": "buyProductByETH function:"
      },
      "buyProductByToken(string,uint256,uint256,address,uint256,bytes)": {
        "details": "buyProductByToken function:"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 647,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2748,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "productIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1476_storage"
      },
      {
        "astId": 2752,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2756,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 2761,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "_productsOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint64)dyn_storage)"
      },
      {
        "astId": 2765,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2769,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2771,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "devWallet",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3093,
        "contract": "contracts/offchain/MSOCover.sol:MSOCover",
        "label": "products",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Product)3088_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint64)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint64)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Product)3088_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MSOCover.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)3088_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1476_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1475,
            "contract": "contracts/offchain/MSOCover.sol:MSOCover",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Product)3088_storage": {
        "encoding": "inplace",
        "label": "struct MSOCover.Product",
        "members": [
          {
            "astId": 3079,
            "contract": "contracts/offchain/MSOCover.sol:MSOCover",
            "label": "policyId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3081,
            "contract": "contracts/offchain/MSOCover.sol:MSOCover",
            "label": "priceInUSD",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3083,
            "contract": "contracts/offchain/MSOCover.sol:MSOCover",
            "label": "period",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3085,
            "contract": "contracts/offchain/MSOCover.sol:MSOCover",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3087,
            "contract": "contracts/offchain/MSOCover.sol:MSOCover",
            "label": "conciergePrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}