{
  "address": "0x423B0e4Ba1afa83E9f6416F0D7A28454BC9e2636",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CVR",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coverContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "productIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "BuyInsureAce",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "BuyProduct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAsset",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CVR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "products",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "durationInDays",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "helperParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "securityParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "buyCoverByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "products",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "durationInDays",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralCode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "helperParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "securityParameters",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "buyCoverByToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coverContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coverContractAddress",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x66827f3a18f410c182e13e023141b540e1c0e9c000f207a0c8e40b2b5dc3c885",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0x423B0e4Ba1afa83E9f6416F0D7A28454BC9e2636",
    "transactionIndex": 32,
    "gasUsed": "1538942",
    "logsBloom": "0x
    "blockHash": "0xb10004ea5b6404dd8a12bf7223dfa1e3cdc95a7e3f14d0048936c546389ea0c0",
    "transactionHash": "0x66827f3a18f410c182e13e023141b540e1c0e9c000f207a0c8e40b2b5dc3c885",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 9737088,
        "transactionHash": "0x66827f3a18f410c182e13e023141b540e1c0e9c000f207a0c8e40b2b5dc3c885",
        "address": "0x423B0e4Ba1afa83E9f6416F0D7A28454BC9e2636",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005569bdf4e02cec3fe459796e3d0e741616029fa4"
        ],
        "data": "0x",
        "logIndex": 146,
        "blockHash": "0xb10004ea5b6404dd8a12bf7223dfa1e3cdc95a7e3f14d0048936c546389ea0c0"
      }
    ],
    "blockNumber": 9737088,
    "cumulativeGasUsed": "6184633",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd3e48FAcD30A73609ffA60AE84851e72d10fEa52",
    "0x5A198C9f43FB5E74b167aCE6aDeD3c7BD4d1eaA8",
    "0x0921f628b8463227615D2199D0D3860E4fBcD411"
  ],
  "solcInputHash": "dfa6136c7b9c50f121f112f3ea535364",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CVR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"productIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyInsureAce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CVR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyCoverByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyCoverByToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyCoverByToken(uint16[],uint16[],uint256[],address,address,uint256,uint256,uint256[],uint256[],uint8[],bytes32[],bytes32[])\":{\"details\":\"Through this function, users can get covers from Insure by some tokens such as CVR... if users want to save gas fee, he shoud reach to this function through MultiSigWallet.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAsset(address,address,uint256)\":{\"details\":\"For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"We are supporting only CVR for InsureAce\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onchain/InsureAcePolka.sol\":\"InsureAcePolka\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd538585761dd8cecaf7c71eea15b7c8e3d767495bf7db44b9087aaca808ba7d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23ee0c2d7bcce5d09d40f3a14c91f29000d3a83b8a9c26440cd1b3748a93ea47\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x74f630d2664c1581a1cbd0730d4ba119b3a184ef90c65f3a934be4d16d0e58a1\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeAgent {\\n    function getNeededTokenAmount(\\n        address _token0,\\n        address _token1,\\n        uint256 _desiredAmount\\n    ) external returns (uint256);\\n\\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\\n\\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\\n\\n    function swapTokenWithETH(address _token, uint256 _amount) external;\\n\\n    function swapTokenWithToken(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b3a247450082bf7e12ca27c13685885e56e396192d91ddd24820f9e6562cd6a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IInsureAce.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IInsureAce {\\n    function getPremium(\\n        uint256[] memory products,\\n        uint256[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256[] memory rewardPercentages\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256[] memory\\n        );\\n\\n    function buyCover(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters,\\n        uint256[] memory securityParameters,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    ) external payable;\\n\\n    function unlockRewardByController(address owner, address to) external returns (uint256);\\n\\n    function getRewardAmount() external view returns (uint256);\\n\\n    function getCoverOwnerRewardAmount(uint256 premiumAmount2Insur, uint256 overwrittenRewardPctg)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getINSURRewardBalanceDetails() external view returns (uint256, uint256);\\n\\n    function removeINSURRewardBalance(address toAddress, uint256 amount) external;\\n\\n    function setBuyCoverMaxBlkNumLatency(uint256 numOfBlocks) external;\\n\\n    function setBuyCoverSigner(address signer, bool enabled) external;\\n\\n    function data() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3d43fe78b2a5fb29ea38d6432344e9de7a73edf0da1c2618b093f1035b40b3e8\",\"license\":\"GPL-3.0\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2005ff7c65cd1282b2b470ea7b11782c9abaae62fbeacd100b8840d653c5f8e6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/onchain/BasePolkaOnChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libs/TransferHelper.sol\\\";\\n\\ncontract BasePolkaOnChain is Ownable {\\n    event BuyProduct(uint256 indexed _productId, address _buyer);\\n    event WithdrawAsset(address _user, address _to, address _token, uint256 _amount);\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter public productIds;\\n    mapping(address => bool) public availableCurrencies;\\n\\n    // address public immutable WETH;\\n    // TODO should it be public?\\n    address public exchangeAgent;\\n\\n    constructor(address _CVR, address _exchangeAgent) {\\n        availableCurrencies[_CVR] = true;\\n        exchangeAgent = _exchangeAgent;\\n    }\\n\\n    modifier onlyAvailableToken(address _token) {\\n        require(availableCurrencies[_token], \\\"Not allowed token\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function addCurrency(address _currency) external onlyOwner {\\n        require(!availableCurrencies[_currency], \\\"Already available\\\");\\n        availableCurrencies[_currency] = true;\\n    }\\n\\n    function removeCurrency(address _currency) external onlyOwner {\\n        require(availableCurrencies[_currency], \\\"Not available yet\\\");\\n        availableCurrencies[_currency] = false;\\n    }\\n\\n    /**\\n     * @dev For reflect tokens, we should deposit some tokens at contract directly,\\n     * We will withdraw tokens deposited at contract through this function\\n     */\\n    function withdrawAsset(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, _to, _amount);\\n        WithdrawAsset(msg.sender, _to, _token, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x611a7ec4c27da33e90237d4862284ecc1f2cdf3e2a2e5d3fbc293fd5c9e2d946\",\"license\":\"MIT\"},\"contracts/onchain/InsureAcePolka.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../interfaces/IExchangeAgent.sol\\\";\\nimport {IInsureAce} from \\\"../interfaces/IInsureAce.sol\\\";\\nimport \\\"./BasePolkaOnChain.sol\\\";\\n\\n/**\\n * We are supporting only CVR for InsureAce\\n */\\ncontract InsureAcePolka is BasePolkaOnChain {\\n    event BuyInsureAce(uint16[] productIds, address _buyer, address _currency, uint256 _amount);\\n\\n    address public coverContractAddress;\\n    address public constant WETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public immutable CVR;\\n\\n    constructor(\\n        address _CVR,\\n        address _exchangeAgent,\\n        address _coverContractAddress\\n    ) BasePolkaOnChain(_CVR, _exchangeAgent) {\\n        require(_coverContractAddress != address(0), \\\"S:1\\\");\\n        CVR = _CVR;\\n        coverContractAddress = _coverContractAddress;\\n    }\\n\\n    function setup(address _coverContractAddress) external onlyOwner {\\n        require(_coverContractAddress != address(0), \\\"S:1\\\");\\n        coverContractAddress = _coverContractAddress;\\n    }\\n\\n    function buyCoverByETH(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters,\\n        uint256[] memory securityParameters,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    ) external payable {\\n        require(currency == WETH, \\\"Not ETH product\\\");\\n        require(msg.value >= premiumAmount, \\\"Insufficient amount\\\");\\n        if (msg.value - premiumAmount > 0) {\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - premiumAmount);\\n        }\\n\\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\\n            products,\\n            durationInDays,\\n            amounts,\\n            currency,\\n            owner,\\n            referralCode,\\n            premiumAmount,\\n            helperParameters,\\n            securityParameters,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        emit BuyInsureAce(products, owner, currency, premiumAmount);\\n    }\\n\\n    /**\\n     * @dev Through this function, users can get covers from Insure by some tokens such as CVR...\\n     * if users want to save gas fee, he shoud reach to this function through MultiSigWallet.\\n     */\\n    function buyCoverByToken(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters,\\n        uint256[] memory securityParameters,\\n        uint8[] memory v,\\n        bytes32[] memory r,\\n        bytes32[] memory s\\n    ) external payable {\\n        uint256 amount;\\n        if (currency == WETH) {\\n            amount = IExchangeAgent(exchangeAgent).getTokenAmountForETH(CVR, premiumAmount + 1);\\n        } else {\\n            amount = IExchangeAgent(exchangeAgent).getNeededTokenAmount(CVR, currency, premiumAmount + 1);\\n        }\\n\\n        TransferHelper.safeTransferFrom(CVR, msg.sender, address(this), amount);\\n        TransferHelper.safeApprove(CVR, exchangeAgent, amount);\\n\\n        if (currency == WETH) {\\n            IExchangeAgent(exchangeAgent).swapTokenWithETH(CVR, amount);\\n        } else {\\n            IExchangeAgent(exchangeAgent).swapTokenWithToken(CVR, currency, amount);\\n            TransferHelper.safeApprove(currency, coverContractAddress, premiumAmount);\\n        }\\n\\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\\n            products,\\n            durationInDays,\\n            amounts,\\n            currency,\\n            owner,\\n            referralCode,\\n            premiumAmount,\\n            helperParameters,\\n            securityParameters,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        emit BuyInsureAce(products, owner, currency, premiumAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x35e440855327fb9d9c72d8106982b1fa88efe30369474be37fc6802f71d53021\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001b2d38038062001b2d83398101604081905262000034916200015b565b82826200004a62000044620000ea565b620000ee565b6001600160a01b039182166000908152600260205260409020805460ff19166001179055600380549183166001600160a01b03199092169190911790558116620000b15760405162461bcd60e51b8152600401620000a890620001a4565b60405180910390fd5b60609290921b6001600160601b03191660805250600480546001600160a01b0319166001600160a01b03909216919091179055620001c1565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200015657600080fd5b919050565b60008060006060848603121562000170578283fd5b6200017b846200013e565b92506200018b602085016200013e565b91506200019b604085016200013e565b90509250925092565b602080825260039082015262533a3160e81b604082015260600190565b60805160601c6119236200020a60003960008181610511015281816105c40152818161066701528181610697015281816107130152818161079c0152610a5e01526119236000f3fe6080604052600436106100ec5760003560e01c8063a3d05bed1161008a578063c5d3a10711610059578063c5d3a10714610239578063d5f4479c14610259578063d9203b911461026e578063f2fde38b14610283576100f3565b8063a3d05bed146101da578063aa57511d146101ed578063ad5c46481461020f578063b7160dee14610224576100f3565b8063715018a6116100c6578063715018a6146101705780638ab234b6146101855780638da5cb5b146101a557806393a32fb1146101c7576100f3565b8063092ae4dc146100f85780631af42c0f1461011a57806366d3820314610150576100f3565b366100f357005b600080fd5b34801561010457600080fd5b506101186101133660046110d7565b6102a3565b005b34801561012657600080fd5b5061013a6101353660046110b6565b610338565b604051610147919061156a565b60405180910390f35b34801561015c57600080fd5b5061011861016b3660046110b6565b61034d565b34801561017c57600080fd5b506101186103e1565b34801561019157600080fd5b506101186101a03660046110b6565b61042c565b3480156101b157600080fd5b506101ba6104c8565b60405161014791906113dd565b6101186101d5366004611112565b6104d7565b6101186101e8366004611112565b6108e8565b3480156101f957600080fd5b50610202610a3e565b604051610147919061183b565b34801561021b57600080fd5b506101ba610a44565b34801561023057600080fd5b506101ba610a5c565b34801561024557600080fd5b506101186102543660046110b6565b610a80565b34801561026557600080fd5b506101ba610b18565b34801561027a57600080fd5b506101ba610b27565b34801561028f57600080fd5b5061011861029e3660046110b6565b610b36565b6102ab610ba7565b6001600160a01b03166102bc6104c8565b6001600160a01b0316146102eb5760405162461bcd60e51b81526004016102e290611700565b60405180910390fd5b6102f6838383610bab565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf243383858460405161032b94939291906113f1565b60405180910390a1505050565b60026020526000908152604090205460ff1681565b610355610ba7565b6001600160a01b03166103666104c8565b6001600160a01b03161461038c5760405162461bcd60e51b81526004016102e290611700565b6001600160a01b0381166103b25760405162461bcd60e51b81526004016102e2906116e3565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6103e9610ba7565b6001600160a01b03166103fa6104c8565b6001600160a01b0316146104205760405162461bcd60e51b81526004016102e290611700565b61042a6000610c98565b565b610434610ba7565b6001600160a01b03166104456104c8565b6001600160a01b03161461046b5760405162461bcd60e51b81526004016102e290611700565b6001600160a01b03811660009081526002602052604090205460ff16156104a45760405162461bcd60e51b81526004016102e290611675565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000546001600160a01b031690565b60006001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156105b1576003546001600160a01b031663ba560ed97f000000000000000000000000000000000000000000000000000000000000000061053b8a6001611892565b6040518363ffffffff1660e01b815260040161055892919061143f565b602060405180830381600087803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa91906112e0565b9050610662565b6003546001600160a01b03166334899be67f00000000000000000000000000000000000000000000000000000000000000008c6105ef8b6001611892565b6040518463ffffffff1660e01b815260040161060d9392919061141b565b602060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906112e0565b90505b61068e7f0000000000000000000000000000000000000000000000000000000000000000333084610cf5565b6003546106c6907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031683610de5565b6001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610774576003546040516378cb717160e01b81526001600160a01b03909116906378cb71719061073d907f000000000000000000000000000000000000000000000000000000000000000090859060040161143f565b600060405180830381600087803b15801561075757600080fd5b505af115801561076b573d6000803e3d6000fd5b50505050610812565b600354604051636e85a5ab60e01b81526001600160a01b0390911690636e85a5ab906107c8907f0000000000000000000000000000000000000000000000000000000000000000908e90869060040161141b565b600060405180830381600087803b1580156107e257600080fd5b505af11580156107f6573d6000803e3d6000fd5b505060045461081292508c91506001600160a01b031689610de5565b600460009054906101000a90046001600160a01b03166001600160a01b031663ddeb2d4e888f8f8f8f8f8f8f8f8f8f8f8f6040518e63ffffffff1660e01b815260040161086a9c9b9a9998979695949392919061148e565b6000604051808303818588803b15801561088357600080fd5b505af1158015610897573d6000803e3d6000fd5b50505050507f45085eb0f088969322b07998679405e4d60e68eee1902dd7311646dd46afcc2a8d8a8c8a6040516108d19493929190611458565b60405180910390a150505050505050505050505050565b6001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146109245760405162461bcd60e51b81526004016102e2906116ac565b853410156109445760405162461bcd60e51b81526004016102e2906117b7565b600061095087346118aa565b1115610969576109693361096488346118aa565b610ecb565b600460009054906101000a90046001600160a01b03166001600160a01b031663ddeb2d4e878e8e8e8e8e8e8e8e8e8e8e8e6040518e63ffffffff1660e01b81526004016109c19c9b9a9998979695949392919061148e565b6000604051808303818588803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b50505050507f45085eb0f088969322b07998679405e4d60e68eee1902dd7311646dd46afcc2a8c898b89604051610a289493929190611458565b60405180910390a1505050505050505050505050565b60015481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a88610ba7565b6001600160a01b0316610a996104c8565b6001600160a01b031614610abf5760405162461bcd60e51b81526004016102e290611700565b6001600160a01b03811660009081526002602052604090205460ff16610af75760405162461bcd60e51b81526004016102e290611735565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6004546001600160a01b031681565b6003546001600160a01b031681565b610b3e610ba7565b6001600160a01b0316610b4f6104c8565b6001600160a01b031614610b755760405162461bcd60e51b81526004016102e290611700565b6001600160a01b038116610b9b5760405162461bcd60e51b81526004016102e290611575565b610ba481610c98565b50565b3390565b600080846001600160a01b031663a9059cbb8585604051602401610bd092919061143f565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610c0991906113a4565b6000604051808303816000865af19150503d8060008114610c46576040519150601f19603f3d011682016040523d82523d6000602084013e610c4b565b606091505b5091509150818015610c75575080511580610c75575080806020019051810190610c7591906112c0565b610c915760405162461bcd60e51b81526004016102e2906117ee565b5050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080856001600160a01b03166323b872dd868686604051602401610d1c9392919061141b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610d5591906113a4565b6000604051808303816000865af19150503d8060008114610d92576040519150601f19603f3d011682016040523d82523d6000602084013e610d97565b606091505b5091509150818015610dc1575080511580610dc1575080806020019051810190610dc191906112c0565b610ddd5760405162461bcd60e51b81526004016102e2906115bb565b505050505050565b600080846001600160a01b031663095ea7b38585604051602401610e0a92919061143f565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610e4391906113a4565b6000604051808303816000865af19150503d8060008114610e80576040519150601f19603f3d011682016040523d82523d6000602084013e610e85565b606091505b5091509150818015610eaf575080511580610eaf575080806020019051810190610eaf91906112c0565b610c915760405162461bcd60e51b81526004016102e29061176c565b604080516000808252602082019092526001600160a01b038416908390604051610ef591906113a4565b60006040518083038185875af1925050503d8060008114610f32576040519150601f19603f3d011682016040523d82523d6000602084013e610f37565b606091505b5050905080610f585760405162461bcd60e51b81526004016102e290611618565b505050565b80356001600160a01b0381168114610f7457600080fd5b919050565b600082601f830112610f89578081fd5b81356020610f9e610f998361186e565b611844565b8281528181019085830183850287018401881015610fba578586fd5b855b85811015610fd857813584529284019290840190600101610fbc565b5090979650505050505050565b600082601f830112610ff5578081fd5b81356020611005610f998361186e565b8281528181019085830183850287018401881015611021578586fd5b855b85811015610fd857813561ffff8116811461103c578788fd5b84529284019290840190600101611023565b600082601f83011261105e578081fd5b8135602061106e610f998361186e565b828152818101908583018385028701840188101561108a578586fd5b855b85811015610fd857813560ff811681146110a4578788fd5b8452928401929084019060010161108c565b6000602082840312156110c7578081fd5b6110d082610f5d565b9392505050565b6000806000606084860312156110eb578182fd5b6110f484610f5d565b925061110260208501610f5d565b9150604084013590509250925092565b6000806000806000806000806000806000806101808d8f031215611134578788fd5b67ffffffffffffffff8d351115611149578788fd5b6111568e8e358f01610fe5565b9b5067ffffffffffffffff60208e01351115611170578788fd5b6111808e60208f01358f01610fe5565b9a5067ffffffffffffffff60408e0135111561119a578788fd5b6111aa8e60408f01358f01610f79565b99506111b860608e01610f5d565b98506111c660808e01610f5d565b975060a08d0135965060c08d0135955067ffffffffffffffff60e08e013511156111ee578485fd5b6111fe8e60e08f01358f01610f79565b945067ffffffffffffffff6101008e01351115611219578384fd5b61122a8e6101008f01358f01610f79565b935067ffffffffffffffff6101208e01351115611245578283fd5b6112568e6101208f01358f0161104e565b925067ffffffffffffffff6101408e01351115611271578081fd5b6112828e6101408f01358f01610f79565b915067ffffffffffffffff6101608e0135111561129d578081fd5b6112ae8e6101608f01358f01610f79565b90509295989b509295989b509295989b565b6000602082840312156112d1578081fd5b815180151581146110d0578182fd5b6000602082840312156112f1578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561133457815187529582019590820190600101611318565b509495945050505050565b6000815180845260208085019450808401835b8381101561133457815161ffff1687529582019590820190600101611352565b6000815180845260208085019450808401835b8381101561133457815160ff1687529582019590820190600101611385565b60008251815b818110156113c457602081860181015185830152016113aa565b818111156113d25782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006080825261146b608083018761133f565b6001600160a01b0395861660208401529390941660408201526060015292915050565b600061018082526114a361018083018f61133f565b82810360208401526114b5818f61133f565b905082810360408401526114c9818e611305565b90506114d8606084018d6112f8565b6114e5608084018c6112f8565b8960a08401528860c084015282810360e08401526115038189611305565b90508281036101008401526115188188611305565b905082810361012084015261152d8187611372565b90508281036101408401526115428186611305565b90508281036101608401526115578185611305565b9f9e505050505050505050505050505050565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e6f74204554482070726f647563740000000000000000000000000000000000604082015260600190565b602080825260039082015262533a3160e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611866576118666118d7565b604052919050565b600067ffffffffffffffff821115611888576118886118d7565b5060209081020190565b600082198211156118a5576118a56118c1565b500190565b6000828210156118bc576118bc6118c1565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c75f08ffc740599c34131d08d146da95bccd618d5fcb9baa6b47fbd4dc24883664736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c8063a3d05bed1161008a578063c5d3a10711610059578063c5d3a10714610239578063d5f4479c14610259578063d9203b911461026e578063f2fde38b14610283576100f3565b8063a3d05bed146101da578063aa57511d146101ed578063ad5c46481461020f578063b7160dee14610224576100f3565b8063715018a6116100c6578063715018a6146101705780638ab234b6146101855780638da5cb5b146101a557806393a32fb1146101c7576100f3565b8063092ae4dc146100f85780631af42c0f1461011a57806366d3820314610150576100f3565b366100f357005b600080fd5b34801561010457600080fd5b506101186101133660046110d7565b6102a3565b005b34801561012657600080fd5b5061013a6101353660046110b6565b610338565b604051610147919061156a565b60405180910390f35b34801561015c57600080fd5b5061011861016b3660046110b6565b61034d565b34801561017c57600080fd5b506101186103e1565b34801561019157600080fd5b506101186101a03660046110b6565b61042c565b3480156101b157600080fd5b506101ba6104c8565b60405161014791906113dd565b6101186101d5366004611112565b6104d7565b6101186101e8366004611112565b6108e8565b3480156101f957600080fd5b50610202610a3e565b604051610147919061183b565b34801561021b57600080fd5b506101ba610a44565b34801561023057600080fd5b506101ba610a5c565b34801561024557600080fd5b506101186102543660046110b6565b610a80565b34801561026557600080fd5b506101ba610b18565b34801561027a57600080fd5b506101ba610b27565b34801561028f57600080fd5b5061011861029e3660046110b6565b610b36565b6102ab610ba7565b6001600160a01b03166102bc6104c8565b6001600160a01b0316146102eb5760405162461bcd60e51b81526004016102e290611700565b60405180910390fd5b6102f6838383610bab565b7f37e6496681d2c16ab49733a2a6cf0916ebaa3e90250d01f84cec59f546d8cf243383858460405161032b94939291906113f1565b60405180910390a1505050565b60026020526000908152604090205460ff1681565b610355610ba7565b6001600160a01b03166103666104c8565b6001600160a01b03161461038c5760405162461bcd60e51b81526004016102e290611700565b6001600160a01b0381166103b25760405162461bcd60e51b81526004016102e2906116e3565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6103e9610ba7565b6001600160a01b03166103fa6104c8565b6001600160a01b0316146104205760405162461bcd60e51b81526004016102e290611700565b61042a6000610c98565b565b610434610ba7565b6001600160a01b03166104456104c8565b6001600160a01b03161461046b5760405162461bcd60e51b81526004016102e290611700565b6001600160a01b03811660009081526002602052604090205460ff16156104a45760405162461bcd60e51b81526004016102e290611675565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000546001600160a01b031690565b60006001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156105b1576003546001600160a01b031663ba560ed97f000000000000000000000000000000000000000000000000000000000000000061053b8a6001611892565b6040518363ffffffff1660e01b815260040161055892919061143f565b602060405180830381600087803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa91906112e0565b9050610662565b6003546001600160a01b03166334899be67f00000000000000000000000000000000000000000000000000000000000000008c6105ef8b6001611892565b6040518463ffffffff1660e01b815260040161060d9392919061141b565b602060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906112e0565b90505b61068e7f0000000000000000000000000000000000000000000000000000000000000000333084610cf5565b6003546106c6907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031683610de5565b6001600160a01b038a1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610774576003546040516378cb717160e01b81526001600160a01b03909116906378cb71719061073d907f000000000000000000000000000000000000000000000000000000000000000090859060040161143f565b600060405180830381600087803b15801561075757600080fd5b505af115801561076b573d6000803e3d6000fd5b50505050610812565b600354604051636e85a5ab60e01b81526001600160a01b0390911690636e85a5ab906107c8907f0000000000000000000000000000000000000000000000000000000000000000908e90869060040161141b565b600060405180830381600087803b1580156107e257600080fd5b505af11580156107f6573d6000803e3d6000fd5b505060045461081292508c91506001600160a01b031689610de5565b600460009054906101000a90046001600160a01b03166001600160a01b031663ddeb2d4e888f8f8f8f8f8f8f8f8f8f8f8f6040518e63ffffffff1660e01b815260040161086a9c9b9a9998979695949392919061148e565b6000604051808303818588803b15801561088357600080fd5b505af1158015610897573d6000803e3d6000fd5b50505050507f45085eb0f088969322b07998679405e4d60e68eee1902dd7311646dd46afcc2a8d8a8c8a6040516108d19493929190611458565b60405180910390a150505050505050505050505050565b6001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146109245760405162461bcd60e51b81526004016102e2906116ac565b853410156109445760405162461bcd60e51b81526004016102e2906117b7565b600061095087346118aa565b1115610969576109693361096488346118aa565b610ecb565b600460009054906101000a90046001600160a01b03166001600160a01b031663ddeb2d4e878e8e8e8e8e8e8e8e8e8e8e8e6040518e63ffffffff1660e01b81526004016109c19c9b9a9998979695949392919061148e565b6000604051808303818588803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b50505050507f45085eb0f088969322b07998679405e4d60e68eee1902dd7311646dd46afcc2a8c898b89604051610a289493929190611458565b60405180910390a1505050505050505050505050565b60015481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a88610ba7565b6001600160a01b0316610a996104c8565b6001600160a01b031614610abf5760405162461bcd60e51b81526004016102e290611700565b6001600160a01b03811660009081526002602052604090205460ff16610af75760405162461bcd60e51b81526004016102e290611735565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6004546001600160a01b031681565b6003546001600160a01b031681565b610b3e610ba7565b6001600160a01b0316610b4f6104c8565b6001600160a01b031614610b755760405162461bcd60e51b81526004016102e290611700565b6001600160a01b038116610b9b5760405162461bcd60e51b81526004016102e290611575565b610ba481610c98565b50565b3390565b600080846001600160a01b031663a9059cbb8585604051602401610bd092919061143f565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610c0991906113a4565b6000604051808303816000865af19150503d8060008114610c46576040519150601f19603f3d011682016040523d82523d6000602084013e610c4b565b606091505b5091509150818015610c75575080511580610c75575080806020019051810190610c7591906112c0565b610c915760405162461bcd60e51b81526004016102e2906117ee565b5050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080856001600160a01b03166323b872dd868686604051602401610d1c9392919061141b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610d5591906113a4565b6000604051808303816000865af19150503d8060008114610d92576040519150601f19603f3d011682016040523d82523d6000602084013e610d97565b606091505b5091509150818015610dc1575080511580610dc1575080806020019051810190610dc191906112c0565b610ddd5760405162461bcd60e51b81526004016102e2906115bb565b505050505050565b600080846001600160a01b031663095ea7b38585604051602401610e0a92919061143f565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610e4391906113a4565b6000604051808303816000865af19150503d8060008114610e80576040519150601f19603f3d011682016040523d82523d6000602084013e610e85565b606091505b5091509150818015610eaf575080511580610eaf575080806020019051810190610eaf91906112c0565b610c915760405162461bcd60e51b81526004016102e29061176c565b604080516000808252602082019092526001600160a01b038416908390604051610ef591906113a4565b60006040518083038185875af1925050503d8060008114610f32576040519150601f19603f3d011682016040523d82523d6000602084013e610f37565b606091505b5050905080610f585760405162461bcd60e51b81526004016102e290611618565b505050565b80356001600160a01b0381168114610f7457600080fd5b919050565b600082601f830112610f89578081fd5b81356020610f9e610f998361186e565b611844565b8281528181019085830183850287018401881015610fba578586fd5b855b85811015610fd857813584529284019290840190600101610fbc565b5090979650505050505050565b600082601f830112610ff5578081fd5b81356020611005610f998361186e565b8281528181019085830183850287018401881015611021578586fd5b855b85811015610fd857813561ffff8116811461103c578788fd5b84529284019290840190600101611023565b600082601f83011261105e578081fd5b8135602061106e610f998361186e565b828152818101908583018385028701840188101561108a578586fd5b855b85811015610fd857813560ff811681146110a4578788fd5b8452928401929084019060010161108c565b6000602082840312156110c7578081fd5b6110d082610f5d565b9392505050565b6000806000606084860312156110eb578182fd5b6110f484610f5d565b925061110260208501610f5d565b9150604084013590509250925092565b6000806000806000806000806000806000806101808d8f031215611134578788fd5b67ffffffffffffffff8d351115611149578788fd5b6111568e8e358f01610fe5565b9b5067ffffffffffffffff60208e01351115611170578788fd5b6111808e60208f01358f01610fe5565b9a5067ffffffffffffffff60408e0135111561119a578788fd5b6111aa8e60408f01358f01610f79565b99506111b860608e01610f5d565b98506111c660808e01610f5d565b975060a08d0135965060c08d0135955067ffffffffffffffff60e08e013511156111ee578485fd5b6111fe8e60e08f01358f01610f79565b945067ffffffffffffffff6101008e01351115611219578384fd5b61122a8e6101008f01358f01610f79565b935067ffffffffffffffff6101208e01351115611245578283fd5b6112568e6101208f01358f0161104e565b925067ffffffffffffffff6101408e01351115611271578081fd5b6112828e6101408f01358f01610f79565b915067ffffffffffffffff6101608e0135111561129d578081fd5b6112ae8e6101608f01358f01610f79565b90509295989b509295989b509295989b565b6000602082840312156112d1578081fd5b815180151581146110d0578182fd5b6000602082840312156112f1578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561133457815187529582019590820190600101611318565b509495945050505050565b6000815180845260208085019450808401835b8381101561133457815161ffff1687529582019590820190600101611352565b6000815180845260208085019450808401835b8381101561133457815160ff1687529582019590820190600101611385565b60008251815b818110156113c457602081860181015185830152016113aa565b818111156113d25782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006080825261146b608083018761133f565b6001600160a01b0395861660208401529390941660408201526060015292915050565b600061018082526114a361018083018f61133f565b82810360208401526114b5818f61133f565b905082810360408401526114c9818e611305565b90506114d8606084018d6112f8565b6114e5608084018c6112f8565b8960a08401528860c084015282810360e08401526115038189611305565b90508281036101008401526115188188611305565b905082810361012084015261152d8187611372565b90508281036101408401526115428186611305565b90508281036101608401526115578185611305565b9f9e505050505050505050505050505050565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20455448207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526011908201527f416c726561647920617661696c61626c65000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e6f74204554482070726f647563740000000000000000000000000000000000604082015260600190565b602080825260039082015262533a3160e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f4e6f7420617661696c61626c6520796574000000000000000000000000000000604082015260600190565b6020808252602b908201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060408201526a1c9bdd994819985a5b195960aa1b606082015260800190565b60208082526013908201527f496e73756666696369656e7420616d6f756e7400000000000000000000000000604082015260600190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611866576118666118d7565b604052919050565b600067ffffffffffffffff821115611888576118886118d7565b5060209081020190565b600082198211156118a5576118a56118c1565b500190565b6000828210156118bc576118bc6118c1565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c75f08ffc740599c34131d08d146da95bccd618d5fcb9baa6b47fbd4dc24883664736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyCoverByToken(uint16[],uint16[],uint256[],address,address,uint256,uint256,uint256[],uint256[],uint8[],bytes32[],bytes32[])": {
        "details": "Through this function, users can get covers from Insure by some tokens such as CVR... if users want to save gas fee, he shoud reach to this function through MultiSigWallet."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAsset(address,address,uint256)": {
        "details": "For reflect tokens, we should deposit some tokens at contract directly, We will withdraw tokens deposited at contract through this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "We are supporting only CVR for InsureAce",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 535,
        "contract": "contracts/onchain/InsureAcePolka.sol:InsureAcePolka",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4229,
        "contract": "contracts/onchain/InsureAcePolka.sol:InsureAcePolka",
        "label": "productIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1510_storage"
      },
      {
        "astId": 4233,
        "contract": "contracts/onchain/InsureAcePolka.sol:InsureAcePolka",
        "label": "availableCurrencies",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4235,
        "contract": "contracts/onchain/InsureAcePolka.sol:InsureAcePolka",
        "label": "exchangeAgent",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4367,
        "contract": "contracts/onchain/InsureAcePolka.sol:InsureAcePolka",
        "label": "coverContractAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Counter)1510_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1509,
            "contract": "contracts/onchain/InsureAcePolka.sol:InsureAcePolka",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}